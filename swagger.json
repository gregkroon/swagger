{
  "openapi": "3.0.3",
  "info": {
    "title": "Harness NextGen Software Delivery Platform API Reference",
    "description": "The Harness Software Delivery Platform uses OpenAPI Specification v3.0. Harness constantly improves these APIs. Please be aware that some improvements could cause breaking changes.",
    "termsOfService": "https://harness.io/terms-of-use/",
    "contact": {
      "email": "contact@harness.io"
    },
    "version": "3.0"
  },
  "servers": [
    {
      "url": "https://app.harness.io/gateway"
    }
  ],
  "security": [
    {
      "ApiKey": [
        "read",
        "write"
      ]
    }
  ],
  "tags": [
    {
      "name": "Accounts",
      "description": "This contains APIs related to accounts as defined in Harness"
    },
    {
      "name": "EnvironmentGroup",
      "description": "This contains APIs related to EnvironmentGroup. Please enable Feature flag ENV_GROUP to use them"
    },
    {
      "name": "Connectors",
      "description": "This contains APIs related to Connectors as defined in Harness"
    },
    {
      "name": "GoogleSecretManagerConnector",
      "description": "This contains APIs specific to Google Secret Manager Connector as defined in Harness"
    },
    {
      "name": "File Store",
      "description": "This contains APIs related to File Store in Harness"
    },
    {
      "name": "Filter",
      "description": "This contains APIs related to Filter as defined in Harness"
    },
    {
      "name": "Git Branches",
      "description": "Contains APIs related to Git Sync Branch"
    },
    {
      "name": "Git Full Sync",
      "description": "Contains APIs related to Git Full Sync"
    },
    {
      "name": "Git Sync Settings",
      "description": "Contains APIs related to Git Sync Settings"
    },
    {
      "name": "SCM",
      "description": "Contains APIs related to Scm"
    },
    {
      "name": "Git Sync",
      "description": "Contains APIs for CRUD on Git Sync"
    },
    {
      "name": "Git Sync Errors",
      "description": "Contains APIs related to Git Sync Errors"
    },
    {
      "name": "Nextgen Ldap",
      "description": "This contains APIs related to Nextgen Ldap as defined in Harness"
    },
    {
      "name": "Usage",
      "description": "This contains APIs related to license usage as defined in Harness"
    },
    {
      "name": "Authentication Settings",
      "description": "This contains APIs related to Authentication settings as defined in Harness"
    },
    {
      "name": "AccountSetting",
      "description": "This contains APIs related to Account Settings as defined in Harness"
    },
    {
      "name": "Agent mTLS Endpoint Management",
      "description": "Contains APIs related to Agent mTLS Endpoint management."
    },
    {
      "name": "CustomDeployment",
      "description": "This contains APIs related to Custom Deployment"
    },
    {
      "name": "Delegate Download Resource",
      "description": "Contains APIs related to Downloading Delegates"
    },
    {
      "name": "Delegate Group Tags Resource",
      "description": "Contains APIs related to Delegate Group Tags management"
    },
    {
      "name": "Delegate Setup Resource",
      "description": "Contains Delegate Setup APIs"
    },
    {
      "name": "Delegate Token Resource",
      "description": "Contains APIs related to Delegate Token management"
    },
    {
      "name": "Environments",
      "description": "This contains APIs related to Environments"
    },
    {
      "name": "Infrastructures",
      "description": "This contains APIs related to Infrastructure Definitions"
    },
    {
      "name": "Invite",
      "description": "This contains APIs related to Invite as defined in Harness"
    },
    {
      "name": "ApiKey",
      "description": "This fetches API keys defined in Harness"
    },
    {
      "name": "ValidateHost",
      "description": "This contains APIs related to SSH or WinRm host validation"
    },
    {
      "name": "Hosts",
      "description": "This contains APIs related to Hosts as defined in Harness"
    },
    {
      "name": "Secret Managers",
      "description": "This contains APIs related to SecretManagers as defined in Harness"
    },
    {
      "name": "Secrets",
      "description": "This contains APIs related to Secrets as defined in Harness"
    },
    {
      "name": "Organization",
      "description": "This contains APIs related to Organization as defined in Harness"
    },
    {
      "name": "Project",
      "description": "This contains APIs related to Project as defined in Harness"
    },
    {
      "name": "Token",
      "description": "This contains APIs related to Token as defined in Harness"
    },
    {
      "name": "User Group",
      "description": "This contains APIs related to User Group as defined in Harness"
    },
    {
      "name": "Services",
      "description": "This contains APIs related to Services"
    },
    {
      "name": "SMTP",
      "description": "This contains APIs related to SmtpConfig as defined in Harness"
    },
    {
      "name": "tas",
      "description": "This contains APIs related to tas"
    },
    {
      "name": "User",
      "description": "This contains APIs related to User as defined in Harness"
    },
    {
      "name": "Variables",
      "description": "This contains APIs related to Variables as defined in Harness."
    },
    {
      "name": "Freeze CRUD",
      "description": "This contains APIs related to Freeze CRUD"
    },
    {
      "name": "Freeze Evaluation",
      "description": "This contains APIs related to evaluation Freeze status"
    },
    {
      "name": "Freeze Schema",
      "description": "This contains APIs related to construct schema for Freeze"
    },
    {
      "name": "Clusters",
      "description": "This contains APIs related to Gitops Clusters"
    },
    {
      "name": "Service Account",
      "description": "This has all the APIs specific to the Service Accounts in Harness."
    },
    {
      "name": "Source Code Manager",
      "description": "Contains APIs related to Source Code Manager"
    },
    {
      "name": "Webhook Event Handler",
      "description": "Contains APIs corresponding to Webhook Triggers."
    },
    {
      "name": "Setting",
      "description": "This contains APIs related to Settings as defined in Harness"
    },
    {
      "name": "Triggers",
      "description": "This contains APIs related to Triggers."
    },
    {
      "name": "Webhook Triggers",
      "description": "This contains APIs related to Webhook Triggers."
    },
    {
      "name": "Approvals",
      "description": "This contains APIs related to Pipeline approvals"
    },
    {
      "name": "Pipeline Dashboard",
      "description": "This contains APIs related to Pipeline Dashboard"
    },
    {
      "name": "Pipeline Input Set",
      "description": "This contains APIs related to Input Sets"
    },
    {
      "name": "Pipeline",
      "description": "This contains APIs related to Setup of Pipelines"
    },
    {
      "name": "Pipeline Execution Details",
      "description": "This contains APIs for fetching Pipeline Execution Details"
    },
    {
      "name": "Pipeline Execute",
      "description": "This contains APIs for Executing a Pipeline"
    },
    {
      "name": "Access Control List",
      "description": "This contains the APIs to perform access control checks"
    },
    {
      "name": "Permissions",
      "description": "This contains the APIs related to permissions"
    },
    {
      "name": "Role Assignments",
      "description": "This contains APIs for CRUD on role assignments"
    },
    {
      "name": "Roles",
      "description": "This contains APIs for CRUD on roles"
    },
    {
      "name": "Harness Resource Group",
      "description": "This contains APIs specific to the Harness Resource Group"
    },
    {
      "name": "Harness Resource Type",
      "description": "This contains APIs related to Harness Resource Type"
    },
    {
      "name": "Cloud Cost Anomalies",
      "description": "Get details about any anomalous spike in your cloud costs"
    },
    {
      "name": "Cloud Cost BI Dashboards",
      "description": "Get details of BI-dashboards specific to CCM"
    },
    {
      "name": "Cloud Cost Budgets",
      "description": "Manage Budgets and receive alerts when your costs exceed (or are forecasted to exceed) your budget."
    },
    {
      "name": "Cloud Cost K8S Connectors Metadata",
      "description": "Health related metadata for your k8S clusters having cost access enabled."
    },
    {
      "name": "Cloud Cost Details",
      "description": "Fetch cloud cost data for cost analysis"
    },
    {
      "name": "Cloud Cost Currency Preferences",
      "description": "Select destination currency to view different cloud provider currencies in destination currency"
    },
    {
      "name": "RuleEnforcement",
      "description": "This contains APIs related to Rule Enforcement "
    },
    {
      "name": "Rule",
      "description": "This contains APIs related to Rule Management "
    },
    {
      "name": "Cloud Cost Perspectives Folders",
      "description": "Group your Perspectives using Folders in ways that are more meaningful to your business needs."
    },
    {
      "name": "Cloud Cost Perspective Reports",
      "description": "Manage cost reports created on Perspectives."
    },
    {
      "name": "Cloud Cost Perspectives",
      "description": "Group your resources using Perspectives in ways that are more meaningful to your business needs."
    },
    {
      "name": "Cloud Cost Recommendations Details",
      "description": "Cloud Cost Recommendations details for workloads and node pools."
    },
    {
      "name": "Cloud Cost Recommendations",
      "description": "Recommendations for workloads and node pools."
    },
    {
      "name": "Cloud Cost Recommendation Jira",
      "description": "Cloud Cost recommendation CRUD apis for jira."
    },
    {
      "name": "Cloud Cost Recommendation Ignore List",
      "description": "Cloud Cost recommendation CRUD apis for recommendations ignore list."
    },
    {
      "description": "APIs to create and manage Feature Flag SDK API Keys",
      "name": "API Keys"
    },
    {
      "description": "APIs to create and manage Feature Flags",
      "name": "Feature Flags"
    },
    {
      "description": "APIs to create and manage Feature Flag Targets",
      "name": "Targets"
    },
    {
      "description": "APIs to create and manage Feature Flag Target Groups",
      "name": "Target Groups"
    },
    {
      "name": "Cloud Cost AutoStopping Rules",
      "description": "This contains APIs to create and manage AutoStopping Rules for your cloud resources."
    },
    {
      "name": "Cloud Cost AutoStopping Rules V2",
      "description": "This contains Autostopping v2 APIs that support the usage of Autostopping Proxy for managing cloud resources."
    },
    {
      "name": "Cloud Cost AutoStopping Load Balancers",
      "description": "This contains APIs to create and manage load balancers used for AutoStopping."
    },
    {
      "name": "Cloud Cost AutoStopping Fixed Schedules",
      "description": "This contains APIs to manage fixed schedules for the AutoStopping Rules."
    },
    {
      "name": "AuditFilters",
      "description": "This contains APIs related to Filter of type Audit as defined in Harness"
    },
    {
      "name": "Audit",
      "description": "This contains APIs related to Audit as defined in Harness"
    },
    {
      "name": "Templates",
      "description": "This contains a list of APIs specific to the Templates Validations and Refresh"
    },
    {
      "name": "Template Schemas",
      "description": "This contains a list of APIs specific to the Template Schemas"
    },
    {
      "name": "Monitored Services",
      "description": "This contains APIs related to CRUD operations of Monitored Services"
    },
    {
      "name": "SLOs dashboard",
      "description": "This contains APIs related to SLOs dashboard"
    },
    {
      "name": "NG SLOs",
      "description": "This contains APIs related to CRUD operations of SLOs (simple & composite)"
    },
    {
      "name": "SLOs",
      "description": "This contains APIs related to CRUD operations of SLOs"
    }
  ],
  "paths": {
    "/ng/api/accounts/{accountIdentifier}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Gets an account",
        "operationId": "getAccountNG",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccount"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/accounts/{accountIdentifier}/immutable-delegate-enabled": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Checks if immutable delegate is enabled for account",
        "operationId": "isImmutableDelegateEnabled",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if immutable delegate is enabled for account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/accounts/{accountIdentifier}/name": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update Account Name",
        "operationId": "updateAccountNameNG",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is details of the Account. Name is mandatory.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccount"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/accounts/{accountIdentifier}/default-experience": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update Default Experience",
        "operationId": "updateAccountDefaultExperienceNG",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is details of the Account. DefaultExperience is mandatory",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccount"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/environmentGroup": {
      "post": {
        "tags": [
          "EnvironmentGroup"
        ],
        "summary": "Create an Environment Group",
        "operationId": "postEnvironmentGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Environment Group to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentGroupRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentGroupRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "If the YAML is valid, returns created Environment Group. If not, it sends what is wrong with the YAML",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/environmentGroup/{envGroupIdentifier}": {
      "get": {
        "tags": [
          "EnvironmentGroup"
        ],
        "summary": "Gets an Environment Group by identifier",
        "operationId": "getEnvironmentGroup",
        "parameters": [
          {
            "name": "envGroupIdentifier",
            "in": "path",
            "description": "Environment Group Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Specify whether environment group is deleted or not",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The saved Environment Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EnvironmentGroup"
        ],
        "summary": "Update an Environment Group by Identifier",
        "operationId": "updateEnvironmentGroup",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envGroupIdentifier",
            "in": "path",
            "description": "Environment Group Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "description": "If the entity is git-synced, this parameter represents the commit id against which file conflicts are resolved",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Environment Group to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentGroupRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentGroupRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Environment Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EnvironmentGroup"
        ],
        "summary": "Delete en Environment Group by Identifier",
        "operationId": "deleteEnvironmentGroup",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envGroupIdentifier",
            "in": "path",
            "description": "Environment Group Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceDelete",
            "in": "query",
            "description": "If true, the Entity will be forced delete, without checking any references/usages",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the Environment Group is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentGroupDelete"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentGroupDelete"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/environmentGroup/list": {
      "post": {
        "tags": [
          "EnvironmentGroup"
        ],
        "summary": "Gets Environment Group list",
        "operationId": "getEnvironmentGroupList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envGroupIdentifiers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The word to be searched and included in the list response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "description": "Filter identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeAllEnvGroupsAccessibleAtScope",
            "in": "query",
            "description": "Specify true if all accessible environment groups are to be included",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "This is the body for the filter properties for listing Environment Groups",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterProperties"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/FilterProperties"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Environment Groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseEnvironmentGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseEnvironmentGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/ccmK8sList": {
      "post": {
        "tags": [
          "Connectors"
        ],
        "summary": "Fetches the list of CMC K8S Connectors corresponding to the request's filter criteria.",
        "operationId": "getCCMK8SConnectorList",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. The default value is 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. The default value is 100",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllConnectorsAvailableAtScope",
            "in": "query",
            "description": "Specify whether or not to include all the Connectors accessible at the scope. For eg if set as true, at the Project scope we will get org and account Connector also in the response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "getDistinctFromBranches",
            "in": "query",
            "description": "This when set to true along with GitSync enabled for the Connector, you can get one connector entity from each identifier. The connector entity can belong to any branch",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the filters applied",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorFilterProperties"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorFilterProperties"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorFilterProperties"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorFilterProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Connectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseCcmK8sConnectorResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseCcmK8sConnectorResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseCcmK8sConnectorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "List all Connectors using filters",
        "description": "Lists all the Connectors matching the specified filters.",
        "operationId": "getConnectorList",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. The default value is 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. The default value is 100",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter Connectors by type",
            "schema": {
              "type": "string",
              "enum": [
                "K8sCluster",
                "Git",
                "Splunk",
                "AppDynamics",
                "Prometheus",
                "Dynatrace",
                "Vault",
                "AzureKeyVault",
                "DockerRegistry",
                "Local",
                "AwsKms",
                "GcpKms",
                "AwsSecretManager",
                "Gcp",
                "Aws",
                "Azure",
                "Artifactory",
                "Jira",
                "Nexus",
                "Github",
                "Gitlab",
                "Bitbucket",
                "Codecommit",
                "CEAws",
                "CEAzure",
                "GcpCloudCost",
                "CEK8sCluster",
                "HttpHelmRepo",
                "NewRelic",
                "Datadog",
                "SumoLogic",
                "PagerDuty",
                "CustomHealth",
                "ServiceNow",
                "ErrorTracking",
                "Pdc",
                "AzureRepo",
                "Jenkins",
                "OciHelmRepo",
                "CustomSecretManager",
                "ElasticSearch",
                "GcpSecretManager",
                "AzureArtifacts",
                "Tas",
                "Spot"
              ]
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter Connectors by category",
            "schema": {
              "type": "string",
              "enum": [
                "CLOUD_PROVIDER",
                "SECRET_MANAGER",
                "CLOUD_COST",
                "ARTIFACTORY",
                "CODE_REPO",
                "MONITORING",
                "TICKETING"
              ]
            }
          },
          {
            "name": "source_category",
            "in": "query",
            "description": "Filter Connectors by Source Category. Available Source Categories are CLOUD_PROVIDER, SECRET_MANAGER, CLOUD_COST, ARTIFACTORY, CODE_REPO,  MONITORING and TICKETING",
            "schema": {
              "type": "string",
              "enum": [
                "CLOUD_PROVIDER",
                "SECRET_MANAGER",
                "CLOUD_COST",
                "ARTIFACTORY",
                "CODE_REPO",
                "MONITORING",
                "TICKETING"
              ]
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Connectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseConnectorResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseConnectorResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseConnectorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "Connectors"
        ],
        "summary": "Update a Connector",
        "description": "Updates a Connector for the given ID.",
        "operationId": "updateConnector",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "description": "If the entity is git-synced, this parameter represents the commit id against which file conflicts are resolved",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated Connector. Please provide values for all fields, not just the fields you are updating",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Connectors"
        ],
        "summary": "Create a Connector",
        "description": "Creates a new Harness Connector.",
        "operationId": "createConnector",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "description": "Checks the new branch",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeType",
            "in": "query",
            "description": "Tells whether the Entity is to be saved on Git or not",
            "schema": {
              "type": "string",
              "enum": [
                "INLINE",
                "REMOTE"
              ]
            }
          },
          {
            "name": "repoName",
            "in": "query",
            "description": "Name of the repository.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Connector to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Connector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/{identifier}": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Return Connector details",
        "description": "Returns the Connector's details for the given Account and Connector ID.",
        "operationId": "getConnector",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Connector Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the connector with the requested accountIdentifier and connectorIdentifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Connectors"
        ],
        "summary": "Delete a Connector",
        "description": "Deletes a Connector for the given ID.",
        "operationId": "deleteConnector",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Connector ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceDelete",
            "in": "query",
            "description": "If true, the Entity will be forced delete, without checking any references/usages",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the Connector is deleted successfully and false if the Connector is not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/fieldValues": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "List all the configured field values for the given Connector type.",
        "description": "Returns all the configured field values for the given Connector type, which can be used during connector creation.",
        "operationId": "getAllAllowedFieldValues",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorType",
            "in": "query",
            "description": "Connector type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "K8sCluster",
                "Git",
                "Splunk",
                "AppDynamics",
                "Prometheus",
                "Dynatrace",
                "Vault",
                "AzureKeyVault",
                "DockerRegistry",
                "Local",
                "AwsKms",
                "GcpKms",
                "AwsSecretManager",
                "Gcp",
                "Aws",
                "Azure",
                "Artifactory",
                "Jira",
                "Nexus",
                "Github",
                "Gitlab",
                "Bitbucket",
                "Codecommit",
                "CEAws",
                "CEAzure",
                "GcpCloudCost",
                "CEK8sCluster",
                "HttpHelmRepo",
                "NewRelic",
                "Datadog",
                "SumoLogic",
                "PagerDuty",
                "CustomHealth",
                "ServiceNow",
                "ErrorTracking",
                "Pdc",
                "AzureRepo",
                "Jenkins",
                "OciHelmRepo",
                "CustomSecretManager",
                "ElasticSearch",
                "GcpSecretManager",
                "AzureArtifacts",
                "Tas",
                "Spot"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns all the configured field values for the given Connector type, which can be used during connector creation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFieldValues"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFieldValues"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFieldValues"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/getceawstemplateurl": {
      "post": {
        "tags": [
          "Connectors"
        ],
        "summary": "Get the Template URL of connector",
        "operationId": "getCEAwsTemplate",
        "parameters": [
          {
            "name": "eventsEnabled",
            "in": "query",
            "description": "Specify whether or not to enable events",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "curEnabled",
            "in": "query",
            "description": "Specify whether or not to enable CUR",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "optimizationEnabled",
            "in": "query",
            "description": "Specify whether or not to enable optimization",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the cloud formation template URL to configure the Cloud Cost AWS Connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/ng/api/connectors/catalogue": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Lists all Connectors for an account",
        "description": "Lists all the Connectors for the given Account ID.",
        "operationId": "getConnectorCatalogue",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Connector catalogue response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorCatalogueResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorCatalogueResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorCatalogueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/stats": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Gets the connector's statistics by Account Identifier, Project Identifier and Organization Identifier",
        "operationId": "getConnectorStatistics",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Connector's statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorStatistics"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorStatistics"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorStatistics"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/listV2": {
      "post": {
        "tags": [
          "Connectors"
        ],
        "summary": "Fetches the list of Connectors corresponding to the request's filter criteria.",
        "operationId": "getConnectorListV2",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. The default value is 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. The default value is 100",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllConnectorsAvailableAtScope",
            "in": "query",
            "description": "Specify whether or not to include all the Connectors accessible at the scope. For eg if set as true, at the Project scope we will get org and account Connector also in the response",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "getDistinctFromBranches",
            "in": "query",
            "description": "This when set to true along with GitSync enabled for the Connector, you can get one connector entity from each identifier. The connector entity can belong to any branch",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the filters applied",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorFilterProperties"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorFilterProperties"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorFilterProperties"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorFilterProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Connectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseConnectorResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseConnectorResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseConnectorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/listbyfqn": {
      "post": {
        "tags": [
          "Connectors"
        ],
        "summary": "Get list of Connectors by FQN",
        "description": "Lists all Connectors for an Account by Fully Qualified Name (FQN).",
        "operationId": "listConnectorByFQN",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of ConnectorsFQN as strings",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/yaml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/html": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Connectors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListConnectorResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListConnectorResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListConnectorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/testConnection/{identifier}": {
      "post": {
        "tags": [
          "Connectors"
        ],
        "summary": "Test Harness Connector connection with third-party tool",
        "description": "Tests if a Harness Connector can successfully connect Harness to a third-party tool.",
        "operationId": "getTestConnectionResult",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Connector ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Connector validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorValidationResult"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorValidationResult"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorValidationResult"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/testGitRepoConnection/{identifier}": {
      "post": {
        "tags": [
          "Connectors"
        ],
        "summary": "Test Git Connector sync with repo",
        "description": "Tests if a Git Repo Connector can successfully connect Harness to a Git provider.",
        "operationId": "getTestGitRepoConnectionResult",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoURL",
            "in": "query",
            "description": "URL of the repository, specify only in the case of Account Type Git Connector",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Connector ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Connector validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorValidationResult"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorValidationResult"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOConnectorValidationResult"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/connectors/validateUniqueIdentifier": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Test a Harness Connector",
        "description": "Tests if a Connector can successfully connect Harness to a third-party tool using the an Account and Connector ID.",
        "operationId": "validateTheIdentifierIsUnique",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Connector ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the Identifier is unique and false if the Identifier is not unique",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/google-secret-manager-connector/gcp-regions": {
      "get": {
        "tags": [
          "GoogleSecretManagerConnector"
        ],
        "summary": "Get list of GCP Regions",
        "description": "Lists all GCP Regions",
        "operationId": "getGcpRegions",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of GCP Regions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store": {
      "get": {
        "tags": [
          "File Store"
        ],
        "summary": "List Files and Folders metadata",
        "operationId": "listFilesAndFolders",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of File IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This will be used to filter files or folders. Any file or folder having the specified search term in its Name or Identifier will be filtered",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "List Files and Folders metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageFile"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageFile"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "File Store"
        ],
        "summary": "Create Folder or File including content",
        "operationId": "create",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "name",
                  "parentIdentifier",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "string",
                    "description": "The File or Folder tags"
                  },
                  "content": {
                    "type": "object",
                    "description": "The content of the File as InputStream"
                  },
                  "identifier": {
                    "type": "string",
                    "description": "Identifier of the File or Folder"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the File or Folder"
                  },
                  "fileUsage": {
                    "type": "string",
                    "description": "This specifies the file usage",
                    "enum": [
                      "MANIFEST_FILE",
                      "CONFIG",
                      "SCRIPT"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "description": "This specifies the type of the File",
                    "enum": [
                      "FILE",
                      "FOLDER"
                    ]
                  },
                  "parentIdentifier": {
                    "type": "string",
                    "description": "This specifies parent directory identifier. The value of Root directory identifier is Root."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the File or Folder"
                  },
                  "mimeType": {
                    "type": "string",
                    "description": "Mime type of the File"
                  },
                  "path": {
                    "type": "string",
                    "description": "The path of the File or Folder"
                  },
                  "createdBy": {
                    "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
                  },
                  "lastModifiedBy": {
                    "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
                  },
                  "lastModifiedAt": {
                    "type": "integer",
                    "description": "Last modified time for the File or Folder",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns create response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store/yaml": {
      "post": {
        "tags": [
          "File Store"
        ],
        "summary": "Creates File or Folder metadata via YAML",
        "operationId": "createViaYAML",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "YAML definition of File or Folder",
          "content": {
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/FileStoreRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns create response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store/{identifier}": {
      "get": {
        "tags": [
          "File Store"
        ],
        "summary": "Get the Folder or File metadata",
        "operationId": "getFile",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Get the Folder or File metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "File Store"
        ],
        "summary": "Update Folder or File including content",
        "operationId": "update",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "name",
                  "parentIdentifier",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "string",
                    "description": "The File or Folder tags"
                  },
                  "identifier": {
                    "type": "string",
                    "description": "Identifier of the File or Folder"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the File or Folder"
                  },
                  "fileUsage": {
                    "type": "string",
                    "description": "This specifies the file usage",
                    "enum": [
                      "MANIFEST_FILE",
                      "CONFIG",
                      "SCRIPT"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "description": "This specifies the type of the File",
                    "enum": [
                      "FILE",
                      "FOLDER"
                    ]
                  },
                  "parentIdentifier": {
                    "type": "string",
                    "description": "This specifies parent directory identifier. The value of Root directory identifier is Root."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the File or Folder"
                  },
                  "mimeType": {
                    "type": "string",
                    "description": "Mime type of the File"
                  },
                  "path": {
                    "type": "string",
                    "description": "The path of the File or Folder"
                  },
                  "createdBy": {
                    "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
                  },
                  "lastModifiedBy": {
                    "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
                  },
                  "lastModifiedAt": {
                    "type": "integer",
                    "description": "Last modified time for the File or Folder",
                    "format": "int64"
                  },
                  "content": {
                    "type": "object",
                    "description": "The content of the File as InputStream"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File Store"
        ],
        "summary": "Delete File or Folder by identifier",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if deletion was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store/files/{identifier}/download": {
      "get": {
        "tags": [
          "File Store"
        ],
        "summary": "Download File",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Download File content"
          }
        }
      }
    },
    "/ng/api/file-store/files/createdBy": {
      "get": {
        "tags": [
          "File Store"
        ],
        "summary": "Get list of created by user details",
        "operationId": "getCreatedByList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of created by user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSetEmbeddedUserDetailsDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSetEmbeddedUserDetailsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store/{identifier}/referenced-by": {
      "get": {
        "tags": [
          "File Store"
        ],
        "summary": "Get list of entities where file is referenced by queried entity type",
        "operationId": "getReferencedBy",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. The default value is 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. The default value is 100",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Entity type",
            "schema": {
              "type": "string",
              "enum": [
                "CreatePR",
                "MergePR",
                "Projects",
                "Pipelines",
                "PipelineSteps",
                "Http",
                "Email",
                "JiraCreate",
                "JiraUpdate",
                "JiraApproval",
                "HarnessApproval",
                "CustomApproval",
                "Barrier",
                "Queue",
                "FlagConfiguration",
                "ShellScript",
                "K8sCanaryDeploy",
                "K8sApply",
                "K8sBlueGreenDeploy",
                "K8sRollingDeploy",
                "K8sRollingRollback",
                "K8sScale",
                "K8sDelete",
                "K8sBGSwapServices",
                "K8sCanaryDelete",
                "TerraformApply",
                "TerraformPlan",
                "TerraformDestroy",
                "TerraformRollback",
                "HelmDeploy",
                "HelmRollback",
                "Connectors",
                "Secrets",
                "Files",
                "Service",
                "Environment",
                "EnvironmentGroup",
                "InputSets",
                "CvConfig",
                "Verify",
                "Delegates",
                "DelegateConfigurations",
                "CvVerificationJob",
                "IntegrationStage",
                "IntegrationSteps",
                "SecurityStage",
                "SecuritySteps",
                "CvKubernetesActivitySource",
                "DeploymentSteps",
                "DeploymentStage",
                "ApprovalStage",
                "PipelineStage",
                "FeatureFlagStage",
                "Template",
                "TemplateStage",
                "CustomDeployment",
                "Triggers",
                "MonitoredService",
                "GitRepositories",
                "FeatureFlags",
                "ServiceNowApproval",
                "ServiceNowCreate",
                "ServiceNowUpdate",
                "ServiceNowImportSet",
                "GovernancePolicies",
                "Policy",
                "Run",
                "RunTests",
                "Plugin",
                "RestoreCacheGCS",
                "RestoreCacheS3",
                "SaveCacheGCS",
                "SaveCacheS3",
                "Security",
                "AquaTrivy",
                "AWSECR",
                "Bandit",
                "BlackDuck",
                "Brakeman",
                "Burp",
                "Checkmarx",
                "Clair",
                "DataTheorem",
                "DockerContentTrust",
                "External",
                "FortifyOnDemand",
                "Grype",
                "JfrogXray",
                "Mend",
                "Metasploit",
                "Nessus",
                "NexusIQ",
                "Nikto",
                "Nmap",
                "Openvas",
                "Owasp",
                "PrismaCloud",
                "Prowler",
                "Qualys",
                "Reapsaw",
                "ShiftLeft",
                "Sniper",
                "Snyk",
                "Sonarqube",
                "Sysdig",
                "Tenable",
                "Veracode",
                "Zap",
                "GitClone",
                "ArtifactoryUpload",
                "GCSUpload",
                "S3Upload",
                "BuildAndPushGCR",
                "BuildAndPushECR",
                "BuildAndPushDockerRegistry",
                "CreateStack",
                "DeleteStack",
                "ServerlessAwsLambdaDeploy",
                "ServerlessAwsLambdaRollback",
                "CustomStage",
                "RollbackStack",
                "Infrastructure",
                "Command",
                "StrategyNode",
                "AzureSlotDeployment",
                "AzureTrafficShift",
                "FetchInstanceScript",
                "AzureSwapSlot",
                "AzureWebAppRollback",
                "JenkinsBuild",
                "EcsRollingDeploy",
                "EcsRollingRollback",
                "EcsCanaryDeploy",
                "EcsCanaryDelete",
                "AzureCreateARMResource",
                "BuildAndPushACR",
                "AzureCreateBPResource",
                "AzureARMRollback",
                "Background",
                "Wait",
                "ArtifactSource",
                "EcsBlueGreenCreateService",
                "EcsBlueGreenSwapTargetGroups",
                "EcsBlueGreenRollback",
                "ShellScriptProvision",
                "Freeze",
                "GitOpsUpdateReleaseRepo",
                "GitOpsFetchLinkedApps",
                "EcsRunTask",
                "Chaos",
                "ElastigroupDeploy",
                "ElastigroupRollback",
                "Action",
                "ElastigroupSetup",
                "Bitrise",
                "TerragruntPlan",
                "TerragruntApply",
                "TerragruntDestroy",
                "TerragruntRollback",
                "IACMStage",
                "IACMStep",
                "IACM",
                "Container",
                "IACMTerraformPlan",
                "IACMTemplate",
                "ElastigroupBGStageSetup",
                "ElastigroupSwapRoute",
                "AsgCanaryDeploy",
                "AsgCanaryDelete",
                "SwapRoutes",
                "SwapRollback",
                "AppResize",
                "AppRollback",
                "CanaryAppSetup",
                "BGAppSetup",
                "BasicAppSetup",
                "TanzuCommand",
                "AsgRollingDeploy",
                "AsgRollingRollback",
                "GovernanceRuleAWS",
                "TasRollingDeploy",
                "TasRollingRollback",
                "K8sDryRun",
                "AsgBlueGreenSwapService",
                "AsgBlueGreenDeploy",
                "AsgBlueGreenRollback"
              ]
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of entities where file is referenced by",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageEntitySetupUsage"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageEntitySetupUsage"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store/supported-entity-types": {
      "get": {
        "tags": [
          "File Store"
        ],
        "summary": "Get the list of supported entity types for files",
        "operationId": "getEntityTypes",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of supported entity types for file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListEntityType"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListEntityType"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store/files/filter": {
      "post": {
        "tags": [
          "File Store"
        ],
        "summary": "Get filtered list of Files or Folders",
        "operationId": "listFilesWithFilter",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "description": "Filter identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This will be used to filter files or folders. Any file or folder having the specified search term in its Name or Identifier will be filtered",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the File filter properties to be applied",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilesFilterPropertiesDTO"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns filtered list of Files or Folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageFile"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageFile"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store/folder": {
      "post": {
        "tags": [
          "File Store"
        ],
        "summary": "Get folder nodes at first level, not including sub-nodes",
        "operationId": "getFolderNodes",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileUsage",
            "in": "query",
            "description": "The file usage",
            "schema": {
              "type": "string",
              "enum": [
                "MANIFEST_FILE",
                "CONFIG",
                "SCRIPT"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Folder node for which to return the list of nodes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderNode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the folder populated with file store nodes as children",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFolderNode"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFolderNode"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/file-store/yaml/{identifier}": {
      "put": {
        "tags": [
          "File Store"
        ],
        "summary": "Update File or Folder metadata via YAML",
        "operationId": "updateViaYAML",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The file identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "YAML definition of File or Folder",
          "content": {
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/FileStoreRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFile"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/filters": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "List Filters",
        "description": "Lists Filters for the given criteria.",
        "operationId": "getConnectorListV2_1",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. If left empty, default value of 0 is assumed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. If left empty, default value of 100 is assumed",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Filter"
        ],
        "summary": "Update a Filter",
        "description": "Updates the filter for the given ID.",
        "operationId": "updateFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated Filter. This should have all the fields not just the updated ones",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Create a Filter",
        "description": "Creates a Filter.",
        "operationId": "postFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Connector to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/filters/{identifier}": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Return Filter Details",
        "description": "Returns the settings of a filter for the given ID.",
        "operationId": "getFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns Filter having filterIdentifier as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Filter"
        ],
        "summary": "Delete a Filter",
        "description": "Deletes a filter for the given ID.",
        "operationId": "deleteFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Boolean status whether request was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync-branch/sync": {
      "post": {
        "tags": [
          "Git Branches"
        ],
        "summary": "Sync the content of new Git Branch into harness with Git Sync Config Id",
        "operationId": "syncGitBranch",
        "parameters": [
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns True if the new Git Branch is successfully synced into Harness",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync-branch/listBranchesWithStatus": {
      "get": {
        "tags": [
          "Git Branches"
        ],
        "summary": "Lists branches with their status(Synced, Unsynced) by Git Sync Config Id for the given scope",
        "operationId": "getListOfBranchesWithStatus",
        "parameters": [
          {
            "name": "yamlGitConfigIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search Term.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "branchSyncStatus",
            "in": "query",
            "description": "Used to filter out Synced and Unsynced branches",
            "schema": {
              "type": "string",
              "enum": [
                "SYNCED",
                "SYNCING",
                "UNSYNCED"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns a list of branches along with their status within the given scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitBranchList"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitBranchList"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitBranchList"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-full-sync/config": {
      "get": {
        "tags": [
          "Git Full Sync"
        ],
        "summary": "Fetch Configuration for Git Full Sync for the provided scope",
        "operationId": "getGitFullSyncConfig",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the saved Git Full Sync Configuration for the provided scope.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Git Full Sync"
        ],
        "summary": "Update Configuration for Git Full Sync for the provided scope",
        "operationId": "updateGitFullSyncConfig",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Git Full sync Configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncConfigRequest"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncConfigRequest"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncConfigRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Git Full Sync Configuration for the provided scope.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git Full Sync"
        ],
        "summary": "Create Configuration for Git Full Sync for the provided scope",
        "operationId": "createGitFullSyncConfig",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Git Full sync Configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncConfigRequest"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncConfigRequest"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncConfigRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the saved Configuration details for Git Full Sync.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFullSyncConfig"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-full-sync/files": {
      "post": {
        "tags": [
          "Git Full Sync"
        ],
        "summary": "List files in full sync along with their status",
        "operationId": "listFullSyncFiles",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search Term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Entity Type and Sync Status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncEntityInfoFilter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncEntityInfoFilter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/GitFullSyncEntityInfoFilter"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the List of Files for Git Full sync.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitFullSyncEntityInfo"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitFullSyncEntityInfo"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitFullSyncEntityInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-full-sync": {
      "post": {
        "tags": [
          "Git Full Sync"
        ],
        "summary": "Trigger Full Sync",
        "operationId": "triggerFullSync",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully Triggered Full Sync.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTriggerGitFullSyncResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTriggerGitFullSyncResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTriggerGitFullSyncResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync-settings": {
      "get": {
        "tags": [
          "Git Sync Settings"
        ],
        "summary": "Get Git Sync Setting for the given scope",
        "operationId": "getGitSyncSettings",
        "parameters": [
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Git Sync Setting of the given scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Git Sync Settings"
        ],
        "summary": "This updates the existing Git Sync settings within the scope. Only changing Connectivity Mode is allowed",
        "operationId": "updateGitSyncSetting",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains details of Git Sync Settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncSettings"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncSettings"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Updated Git Sync Setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git Sync Settings"
        ],
        "summary": "Creates Git Sync Setting in a scope",
        "operationId": "createGitSyncSetting",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains details of Git Sync settings like - (scope, executionOnDelegate)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncSettings"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncSettings"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully created Git Sync Setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncSettings"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/scm/createPR": {
      "post": {
        "tags": [
          "SCM"
        ],
        "summary": "creates a Pull Request",
        "operationId": "createPR",
        "requestBody": {
          "description": "Details to create a PR",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitPRCreateRequest"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/GitPRCreateRequest"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/GitPRCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully created a PR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPRDetails"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPRDetails"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPRDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/scm/fileContent": {
      "get": {
        "tags": [
          "SCM"
        ],
        "summary": "Gets Git File Content",
        "operationId": "getFileContent",
        "parameters": [
          {
            "name": "yamlGitConfigIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "query",
            "description": "Commit Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Git File Content including: object Id and content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFileContent"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFileContent"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitFileContent"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/scm/listBranchesByGitConfig": {
      "get": {
        "tags": [
          "SCM"
        ],
        "summary": "Lists Branches by given Git Sync Config Id",
        "operationId": "getListOfBranchesByGitConfig",
        "parameters": [
          {
            "name": "yamlGitConfigIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search Term.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "This contains a list of Branches specific to Git Sync Config Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/scm/listRepoBranches": {
      "get": {
        "tags": [
          "SCM"
        ],
        "summary": "Lists Branches of given Repo by referenced Connector Identifier",
        "operationId": "getListOfBranchesByConnector",
        "parameters": [
          {
            "name": "connectorIdentifierRef",
            "in": "query",
            "description": "Connector Identifier Reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoURL",
            "in": "query",
            "description": "URL of the repository.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search Term.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "This contains a list of Branches specific to Referenced Connector Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync": {
      "get": {
        "tags": [
          "Git Sync"
        ],
        "summary": "Lists Git Sync Config for the given scope",
        "operationId": "getGitSyncConfigList",
        "parameters": [
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "List of Git Sync Config for the given scope",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitSyncConfig"
                  }
                }
              },
              "text/yaml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitSyncConfig"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitSyncConfig"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Git Sync"
        ],
        "summary": "Update existing Git Sync Config by Identifier",
        "operationId": "updateGitSyncConfig",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of Git Sync Config",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncConfig"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncConfig"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncConfig"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Updated Git Sync Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git Sync"
        ],
        "summary": "Creates Git Sync Config in given scope",
        "operationId": "createGitSyncConfig",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of Git Sync Config",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncConfig"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncConfig"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncConfig"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/GitSyncConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully created Git Sync Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync/git-sync-enabled": {
      "get": {
        "tags": [
          "Git Sync"
        ],
        "summary": "Check whether Git Sync is enabled for given scope or not",
        "operationId": "isGitSyncEnabled",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Result of whether Git Sync is enabled for the scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitEnabled"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/GitEnabled"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/GitEnabled"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync/{identifier}/folder/{folderIdentifier}/default": {
      "put": {
        "tags": [
          "Git Sync"
        ],
        "summary": "Update existing Git Sync Config default root folder by Identifier",
        "operationId": "updateDefaultFolder",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Git Sync Config Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderIdentifier",
            "in": "path",
            "description": "Folder Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Updated Git Sync Config default root folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/GitSyncConfig"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync-errors/count": {
      "get": {
        "tags": [
          "Git Sync Errors"
        ],
        "summary": "Get Errors Count for the given scope, Repo and Branch",
        "operationId": "getGitSyncErrorsCount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search Term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Count of both Git to Harness Errors and Connectivity Errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncErrorCount"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncErrorCount"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGitSyncErrorCount"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync-errors": {
      "get": {
        "tags": [
          "Git Sync Errors"
        ],
        "summary": "Lists Git to Harness Errors by file or connectivity errors for the given scope, Repo and Branch",
        "operationId": "listGitSyncErrors",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search Term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "gitToHarness",
            "in": "query",
            "description": "This specifies which errors to show - (Git to Harness or Connectivity), Put true to show Git to Harness Errors",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of Git to Harness Errors by file or connectivity errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncError"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncError"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncError"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync-errors/commits/{commitId}": {
      "get": {
        "tags": [
          "Git Sync Errors"
        ],
        "summary": "Lists Git to Harness Errors for the given Commit Id",
        "operationId": "listGitToHarnessErrorForCommit",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "Commit Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of Git to Harness Errors for given Commit Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncError"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncError"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncError"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/git-sync-errors/aggregate": {
      "get": {
        "tags": [
          "Git Sync Errors"
        ],
        "summary": "Lists Git to Harness Errors grouped by Commits for the given scope, Repo and Branch",
        "operationId": "listGitToHarnessErrorsGroupedByCommits",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search Term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "numberOfErrorsInSummary",
            "in": "query",
            "description": "Number of errors that will be displayed in the summary",
            "schema": {
              "maximum": 5,
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of Git to Harness Errors grouped by Commit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncErrorAggregateByCommit"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncErrorAggregateByCommit"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseGitSyncErrorAggregateByCommit"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/ldap/ldap-login-test": {
      "post": {
        "tags": [
          "Nextgen Ldap"
        ],
        "summary": "Test LDAP authentication",
        "description": "Tests LDAP authentication for the given Account ID, with a valid test email and password",
        "operationId": "postLdapAuthenticationTest",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "This should be a valid test email"
                  },
                  "password": {
                    "type": "string",
                    "description": "This should be a valid password for the test email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns authentication status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseLdapResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseLdapResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/ldap/{ldapId}/search/group": {
      "get": {
        "tags": [
          "Nextgen Ldap"
        ],
        "summary": "Return Ldap groups matching name",
        "description": "Returns all userGroups for the configured Ldap in the account matching a given name.",
        "operationId": "searchLdapGroups",
        "parameters": [
          {
            "name": "ldapId",
            "in": "path",
            "description": "Ldap setting id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns ldap groups matching a given name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCollectionLdapGroupResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseCollectionLdapGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/usage/CD/serviceInstancesLicense": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Gets License Usage By Module, Timestamp, and Account Identifier",
        "operationId": "getCDLicenseUsageForServiceInstances",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account id to get the license usage.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns a license usage object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceInstanceUsageDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/usage/CD/servicesLicense": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Gets License Usage By Module, Timestamp, and Account Identifier",
        "operationId": "getCDLicenseUsageForServices",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account id to get the license usage.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns a license usage object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceUsageDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/usage/{module}": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Gets License Usage By Module, Timestamp, and Account Identifier",
        "operationId": "getLicenseUsage",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account id to get the license usage.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module",
            "in": "path",
            "description": "A Harness platform module.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "CDLicenseType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns a license usage object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOLicenseUsage"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/usage/cd/active-services": {
      "post": {
        "tags": [
          "Usage"
        ],
        "summary": "List Active Services with instances, last deployed and licenses consumed details on Account, Organization and Project level",
        "operationId": "listCDActiveServices",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "maximum": 50,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Active Services Filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActiveServicesFilterParams"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns a list of active services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageActiveService"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/ldap/settings": {
      "get": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Return configured Ldap settings for the account",
        "description": "Returns configured Ldap settings and its details for the account.",
        "operationId": "getLdapSettings",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns ldap setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseLDAPSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Updates Ldap setting",
        "description": "Updates configured Ldap settings along with the user, group queries.",
        "operationId": "updateLdapSettings",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated LdapSettings. Values for all fields is needed, not just the fields you are updating",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/LDAPSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Updated Ldap settings along with the user, group settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseLDAPSettings"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Create Ldap setting",
        "description": "Creates Ldap settings along with the user, group queries.",
        "operationId": "createLdapSettings",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create LdapSettings request body. Values for connection settings are needed, user and group settings can also be provided",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/LDAPSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Creates Ldap settings along with the user, group queries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseLDAPSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Delete Ldap settings",
        "description": "Delete configured Ldap settings on this account.",
        "operationId": "deleteLdapSettings",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully deleted Ldap settings configured on account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/delete-saml-metadata": {
      "delete": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Delete SAML meta data",
        "description": "Deletes SAML metadata for the given Account ID.",
        "operationId": "deleteSamlMetaData",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully deleted SAML meta associated with a SAML setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseSSOConfig"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings": {
      "get": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Gets authentication settings for the given Account ID",
        "description": "Gets authentication settings for the given Account ID.",
        "operationId": "getAuthenticationSettings",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully returns authentication settings of an Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseAuthenticationSettingsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/login-settings/password-strength": {
      "get": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Get password strength",
        "description": "Gets password strength for the given Account ID.",
        "operationId": "getPasswordStrengthSettings",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns password strength of an Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePasswordStrengthPolicy"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/saml-login-test": {
      "get": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Test SAML connectivity",
        "description": "Tests SAML connectivity for the given Account ID.",
        "operationId": "getSamlLoginTest",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns connectivity status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseLoginTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/oauth/remove-mechanism": {
      "delete": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Delete OAuth Setting",
        "description": "Deletes OAuth settings for a given Account ID.",
        "operationId": "removeOauthMechanism",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully removed OAuth settings configured to an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/two-factor-admin-override-settings": {
      "put": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Set two factor authorization",
        "description": "Sets Two-Factor authorization for the given Account ID.",
        "operationId": "setTwoFactorAuthAtAccountLevel",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Boolean that specify whether or not to override two factor enabled setting",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorAdminOverrideSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully configured two factor authorization for an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/update-auth-mechanism": {
      "put": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Update Auth mechanism",
        "description": "Updates the authentication mechanism for the given Account ID.",
        "operationId": "updateAuthMechanism",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authenticationMechanism",
            "in": "query",
            "description": "Type of Authentication Mechanism SSO or NON_SSO",
            "schema": {
              "type": "string",
              "enum": [
                "USER_PASSWORD",
                "SAML",
                "LDAP",
                "OAUTH"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully updated Auth mechanism for an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/oauth/update-providers": {
      "put": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Update Oauth providers",
        "description": "Updates OAuth providers for the given Account ID.",
        "operationId": "updateOauthProviders",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated OAuthSettings. Please provide values for all fields, not just the fields you are updating",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/OAuthSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully updated the Oauth providers for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/saml-metadata-upload": {
      "put": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Update SAML metadata",
        "description": "Updates SAML metadata of the SAML configuration configured for an account",
        "operationId": "updateSamlMetaData",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "object",
                    "description": "SAML Metadata input file"
                  },
                  "fileMetadata": {
                    "$ref": "#/components/schemas/FormDataContentDisposition"
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Display Name of the SAML"
                  },
                  "groupMembershipAttr": {
                    "type": "string",
                    "description": "Group membership attribute"
                  },
                  "authorizationEnabled": {
                    "type": "boolean",
                    "description": "Specify whether or not to enable authorization"
                  },
                  "logoutUrl": {
                    "type": "string",
                    "description": "Logout URL"
                  },
                  "entityIdentifier": {
                    "type": "string",
                    "description": "SAML metadata Identifier"
                  },
                  "samlProviderType": {
                    "type": "string",
                    "description": "SAML provider type"
                  },
                  "clientId": {
                    "type": "string",
                    "description": "Optional SAML clientId for Azure SSO"
                  },
                  "clientSecret": {
                    "type": "string",
                    "description": "Optional SAML clientSecret reference string for Azure SSO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully updated SAML metadata of SAML setting configured for an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseSSOConfig"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Upload SAML metadata",
        "description": "Updates the SAML metadata for the given Account ID.",
        "operationId": "uploadSamlMetaData",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "object",
                    "description": "Saml Metadata input file"
                  },
                  "fileMetadata": {
                    "$ref": "#/components/schemas/FormDataContentDisposition"
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Display Name of the SAML"
                  },
                  "groupMembershipAttr": {
                    "type": "string",
                    "description": "Group membership attribute"
                  },
                  "authorizationEnabled": {
                    "type": "boolean",
                    "description": "Specify whether or not to enable authorization"
                  },
                  "logoutUrl": {
                    "type": "string",
                    "description": "Logout URL"
                  },
                  "entityIdentifier": {
                    "type": "string",
                    "description": "SAML metadata Identifier"
                  },
                  "samlProviderType": {
                    "type": "string",
                    "description": "SAML provider type"
                  },
                  "clientId": {
                    "type": "string",
                    "description": "Optional SAML clientId for Azure SSO"
                  },
                  "clientSecret": {
                    "type": "string",
                    "description": "Optional SAML clientSecret reference string for Azure SSO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully uploads SAML metadata to the SAML setting configured for an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseSSOConfig"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/authentication-settings/whitelisted-domains": {
      "put": {
        "tags": [
          "Authentication Settings"
        ],
        "summary": "Updates the whitelisted domains",
        "description": "Updates whitelisted domains configured for an account.",
        "operationId": "updateWhitelistedDomains",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Set of whitelisted domains and IPs for the account",
          "content": {
            "*/*": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully updated whitelisted domains configured with an account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/account-setting": {
      "get": {
        "tags": [
          "AccountSetting"
        ],
        "summary": "Get the AccountSetting by accountIdentifier",
        "operationId": "getAccountSetting",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the AccountSetting with the requested accountIdentifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccountSettingResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccountSettingResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccountSettingResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountSetting"
        ],
        "summary": "Updates account settings",
        "operationId": "updateAccountSetting",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the AccountSetting to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettings"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettings"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettings"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/AccountSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created account setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccountSettingResponse"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccountSettingResponse"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccountSettingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/account-setting/list": {
      "get": {
        "tags": [
          "AccountSetting"
        ],
        "summary": "Get the AccountSetting by accountIdentifier",
        "operationId": "listAccountSetting",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "Connector"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of AccountSettings with requested accountIdentifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListAccountSettings"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListAccountSettings"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListAccountSettings"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/agent/mtls/endpoint": {
      "get": {
        "tags": [
          "Agent mTLS Endpoint Management"
        ],
        "summary": "Gets the agent mTLS endpoint for an account.",
        "operationId": "getAgentMtlsEndpointForAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The mTLS endpoint for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseAgentMtlsEndpointDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agent mTLS Endpoint Management"
        ],
        "summary": "Updates the existing agent mTLS endpoint for an account.",
        "operationId": "updateAgentMtlsEndpointForAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details to update for the agent mTLS endpoint.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentMtlsEndpointRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The details of the updated mTLS endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseAgentMtlsEndpointDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Agent mTLS Endpoint Management"
        ],
        "summary": "Creates the agent mTLS endpoint for an account.",
        "operationId": "createAgentMtlsEndpointForAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the agent mTLS endpoint to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentMtlsEndpointRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The details of the newly created mTLS endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseAgentMtlsEndpointDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Agent mTLS Endpoint Management"
        ],
        "summary": "Removes the agent mTLS endpoint for an account.",
        "operationId": "deleteAgentMtlsEndpointForAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "True if and only if the endpoint existed and got removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Agent mTLS Endpoint Management"
        ],
        "summary": "Updates selected properties of the existing agent mTLS endpoint for an account.",
        "operationId": "patchAgentMtlsEndpointForAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A subset of the details to update for the agent mTLS endpoint.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentMtlsEndpointRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The details of the updated mTLS endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseAgentMtlsEndpointDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/agent/mtls/check-availability": {
      "get": {
        "tags": [
          "Agent mTLS Endpoint Management"
        ],
        "summary": "Checks whether a given agent mTLS endpoint domain prefix is available.",
        "operationId": "checkAgentMtlsEndpointDomainPrefixAvailability",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domainPrefix",
            "in": "query",
            "description": "The domain prefix to check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "True if and only if the domain prefix is currently not in use by any existing mTLS endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/customDeployment/get-references": {
      "post": {
        "tags": [
          "CustomDeployment"
        ],
        "summary": "Gets Custom Deployment Entity References",
        "operationId": "getCustomDeploymentEntityReferences",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Custom Deployment Yaml Request DTO containing entityYaml",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDeploymentYamlRequestDTO"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/CustomDeploymentYamlRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns all entity references in the custom deployment template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListEntityDetailProtoDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListEntityDetailProtoDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/customDeployment/expression-variables": {
      "post": {
        "tags": [
          "CustomDeployment"
        ],
        "summary": "Gets Custom Deployment Expression Variables",
        "operationId": "getCustomDeploymentExpressionVariables",
        "requestBody": {
          "description": "Custom Deployment Yaml Request DTO containing entityYaml",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDeploymentYamlRequestDTO"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/CustomDeploymentYamlRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns all Variables used that are valid to be used as expression in template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCustomDeploymentVariableResponseDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCustomDeploymentVariableResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/customDeployment/variables/{templateIdentifier}": {
      "get": {
        "tags": [
          "CustomDeployment"
        ],
        "summary": "Gets Infra Variables from a Custom Deployment Template by identifier",
        "operationId": "getCustomDeploymentInfraVariables",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateIdentifier",
            "in": "path",
            "description": "Custom Deployment Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionLabel",
            "in": "query",
            "description": "Version Label",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Specifies whether Template is deleted or not",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The saved Custom Deployment Infra Variables",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/customDeployment/get-updated-Yaml/{infraIdentifier}": {
      "post": {
        "tags": [
          "CustomDeployment"
        ],
        "summary": "Return the updated yaml for infrastructure based on Deployment template",
        "operationId": "getUpdatedYamlForInfrastructure",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "infraIdentifier",
            "in": "path",
            "description": "Infrastructure Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "YAML",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDeploymentYamlDTO"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/CustomDeploymentYamlDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Return the updated yaml for infrastructure based on Deployment template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCustomDeploymentRefreshYamlDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCustomDeploymentRefreshYamlDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/customDeployment/validate-infrastructure/{infraIdentifier}": {
      "get": {
        "tags": [
          "CustomDeployment"
        ],
        "summary": "This validates whether Infrastructure is valid or not",
        "operationId": "validateInfrastructureForDeploymentTemplate",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envIdentifier",
            "in": "query",
            "description": "Environment Identifier for the entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "infraIdentifier",
            "in": "path",
            "description": "Infrastructure Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns if the infra is valid or not.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCustomDeploymentInfraResponseDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCustomDeploymentInfraResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/download-delegates/docker": {
      "post": {
        "tags": [
          "Delegate Download Resource"
        ],
        "summary": "Downloads a docker delegate yaml file.",
        "operationId": "downloadDockerDelegateYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters needed for downloading docker delegate yaml",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateDownloadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Delegate Yaml File."
          }
        }
      }
    },
    "/ng/api/download-delegates/kubernetes": {
      "post": {
        "tags": [
          "Delegate Download Resource"
        ],
        "summary": "Downloads a kubernetes delegate yaml file.",
        "operationId": "downloadKubernetesDelegateYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters needed for downloading kubernetes delegate yaml",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateDownloadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Delegate Yaml File."
          }
        }
      }
    },
    "/ng/api/delegate-group-tags/{groupIdentifier}": {
      "get": {
        "tags": [
          "Delegate Group Tags Resource"
        ],
        "summary": "Retrieves list of tags attached with Delegate group",
        "operationId": "listTagsForDelegateGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIdentifier",
            "in": "path",
            "description": "Delegate Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Delegate group details along with tags.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDelegateGroupDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Delegate Group Tags Resource"
        ],
        "summary": "Clears all existing tags with delegate group and attach given set of tags to delegate group.",
        "operationId": "updateTagsOfDelegateGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIdentifier",
            "in": "path",
            "description": "Delegate Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Set of tags",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateGroupTags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Delegate Group details for updated group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDelegateGroupDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Delegate Group Tags Resource"
        ],
        "summary": "Add given list of tags to the Delegate group",
        "operationId": "addTagsToDelegateGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIdentifier",
            "in": "path",
            "description": "Delegate Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Set of tags",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateGroupTags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Delegate Group details for updated group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDelegateGroupDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Delegate Group Tags Resource"
        ],
        "summary": "Deletes all tags from the Delegate group",
        "operationId": "deleteTagsFromDelegateGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIdentifier",
            "in": "path",
            "description": "Delegate Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Delegate Group details for updated group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDelegateGroupDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/delegate-group-tags/delegate-groups": {
      "post": {
        "tags": [
          "Delegate Group Tags Resource"
        ],
        "summary": "List delegate groups that are having mentioned tags.",
        "operationId": "listDelegateGroupsUsingTags",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Set of tags",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateGroupTags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "List of Delegate Group details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListDelegateGroupDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/delegate-setup/delegate/{delegateIdentifier}": {
      "delete": {
        "tags": [
          "Delegate Setup Resource"
        ],
        "summary": "Deletes a Delegate by its identifier.",
        "operationId": "deleteDelegate",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegateIdentifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "200 Ok response if everything successfully deleted delegate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDelegateDeleteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/delegate-setup/delegate-terraform-module-file": {
      "get": {
        "tags": [
          "Delegate Setup Resource"
        ],
        "summary": "Generates delegate terraform example module file from the account",
        "operationId": "generateTerraformModule",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Generated terraform module file."
          }
        }
      }
    },
    "/ng/api/delegate-setup/generate-helm-values": {
      "post": {
        "tags": [
          "Delegate Setup Resource"
        ],
        "summary": "Generates helm values yaml file from the data specified in request body (Delegate setup details).",
        "operationId": "generateNgHelmValuesYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Delegate setup details, containing data to populate yaml file values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateSetupDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Generated yaml file."
          }
        }
      }
    },
    "/ng/api/delegate-token-ng": {
      "get": {
        "tags": [
          "Delegate Token Resource"
        ],
        "summary": "Retrieves Delegate Tokens by Account, Organization, Project and status.",
        "operationId": "getDelegateTokens",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of Delegate Token (ACTIVE or REVOKED).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of Delegate Token (ACTIVE or REVOKED). If left empty both active and revoked tokens will be retrieved",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "REVOKED"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "A list of Delegate Tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListDelegateTokenDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Delegate Token Resource"
        ],
        "summary": "Revokes Delegate Token.",
        "operationId": "revokeDelegateToken",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenName",
            "in": "query",
            "description": "Delegate Token name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "200 Ok response if everything successfully revoked token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDelegateTokenDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Delegate Token Resource"
        ],
        "summary": "Creates Delegate Token.",
        "operationId": "createDelegateToken",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenName",
            "in": "query",
            "description": "Delegate Token name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "A created Token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDelegateTokenDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/delegate-token-ng/delegate-groups": {
      "get": {
        "tags": [
          "Delegate Token Resource"
        ],
        "summary": "Lists delegate groups that are using the specified delegate token.",
        "operationId": "getDelegateGroupsUsingToken",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegateTokenName",
            "in": "query",
            "description": "Delegate Token name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "A list of delegate groups that are usign the specified token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseDelegateGroupListing"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/environmentsV2": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Gets Environment list for a project",
        "operationId": "getEnvironmentList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The word to be searched and included in the list response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "description": "List of EnvironmentIds",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Environments for a Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseEnvironmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseEnvironmentResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Update an Environment by identifier",
        "operationId": "updateEnvironmentV2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Environment to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Create an Environment",
        "operationId": "createEnvironmentV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Environment to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/environmentsV2/{environmentIdentifier}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Gets an Environment by identifier",
        "operationId": "getEnvironmentV2",
        "parameters": [
          {
            "name": "environmentIdentifier",
            "in": "path",
            "description": "Environment Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Specify whether Environment is deleted or not",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The saved Environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Delete an Environment by identifier",
        "operationId": "deleteEnvironmentV2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "path",
            "description": "Environment Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceDelete",
            "in": "query",
            "description": "If true, the Entity will be forced delete, without checking any references/usages",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the Environment is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/environmentsV2/serviceOverrides": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Gets Service Overrides list",
        "operationId": "getServiceOverridesList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "description": "Environment Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "description": "Service Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Service Overrides for an Environment.serviceIdentifier, if passed, can be used to get the overrides for that particular Service in the Environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceOverrideResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceOverrideResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "upsert a Service Override for an Environment",
        "operationId": "upsertServiceOverride",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Service Override to be upserted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOverrideRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOverrideRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Upsert ( Create/Update )  a Service Override in an Environment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceOverrideResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceOverrideResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Delete a ServiceOverride entity",
        "operationId": "deleteServiceOverride",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "description": "Environment Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "description": "Service Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the Service Override is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/environmentsV2/list/access": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Gets Environment Access list",
        "operationId": "getEnvironmentAccessList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The word to be searched and included in the list response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envIdentifiers",
            "in": "query",
            "description": "List of EnvironmentIds",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "envGroupIdentifier",
            "in": "query",
            "description": "Environment group identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Environments that are accessible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListEnvironmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListEnvironmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/environmentsV2/upsert": {
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Upsert an Environment by identifier",
        "operationId": "upsertEnvironmentV2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Environment to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnvironmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/infrastructures": {
      "get": {
        "tags": [
          "Infrastructures"
        ],
        "summary": "Gets Infrastructure list",
        "operationId": "getInfrastructureList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "description": "Environment Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The word to be searched and included in the list response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "infraIdentifiers",
            "in": "query",
            "description": "List of InfrastructureIds",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "deploymentType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "Kubernetes",
                "NativeHelm",
                "Ssh",
                "WinRm",
                "ServerlessAwsLambda",
                "AzureWebApp",
                "CustomDeployment",
                "ECS",
                "Elastigroup",
                "TAS",
                "Asg",
                "GoogleCloudFunctions"
              ]
            }
          },
          {
            "name": "deploymentTemplateIdentifier",
            "in": "query",
            "description": "The Identifier of deployment template if infrastructure is of type custom deployment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionLabel",
            "in": "query",
            "description": "The version label of deployment template if infrastructure is of type custom deployment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Infrastructure for an Environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseInfrastructureResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseInfrastructureResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Infrastructures"
        ],
        "summary": "Update an Infrastructure by identifier",
        "operationId": "updateInfrastructure",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Infrastructure to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfrastructureRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/InfrastructureRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Infrastructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInfrastructureResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInfrastructureResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Infrastructures"
        ],
        "summary": "Create an Infrastructure in an Environment",
        "operationId": "createInfrastructure",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Infrastructure to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfrastructureRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/InfrastructureRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Infrastructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInfrastructureResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInfrastructureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/infrastructures/{infraIdentifier}": {
      "get": {
        "tags": [
          "Infrastructures"
        ],
        "summary": "Gets an Infrastructure by identifier",
        "operationId": "getInfrastructure",
        "parameters": [
          {
            "name": "infraIdentifier",
            "in": "path",
            "description": "Infrastructure Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "description": "envId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Specify whether Infrastructure is deleted or not",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The saved Infrastructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInfrastructureResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInfrastructureResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Infrastructures"
        ],
        "summary": "Delete an Infrastructure by identifier",
        "operationId": "deleteInfrastructure",
        "parameters": [
          {
            "name": "infraIdentifier",
            "in": "path",
            "description": "Infrastructure Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "description": "Environment Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the Infrastructure is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/invites/{inviteId}": {
      "put": {
        "tags": [
          "Invite"
        ],
        "summary": "Resend invite",
        "description": "Resend the invite email",
        "operationId": "updateInvite",
        "parameters": [
          {
            "name": "inviteId",
            "in": "path",
            "description": "Invite id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Updated Invite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invite"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Invite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Invite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOptionalInvite"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOptionalInvite"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invite"
        ],
        "summary": "Delete Invite",
        "description": "Delete an Invite by Identifier",
        "operationId": "deleteInvite",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Invite Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns either empty value of Deleted Invite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOptionalInvite"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/invites/invite": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "Get Invite",
        "description": "Gets an Invite by either Invite Id or JwtToken",
        "operationId": "getInvite",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "query",
            "description": "Invitation Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jwttoken",
            "in": "query",
            "description": "JWT Token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Invite having either InviteId or JwtToken as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInvite"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInvite"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/invites": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "List Invites",
        "description": "List all the Invites for a Project or Organization",
        "operationId": "getInvites",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of Invites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseInvite"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseInvite"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/invites/aggregate": {
      "post": {
        "tags": [
          "Invite"
        ],
        "summary": "Get pending users",
        "description": "List of all the pending users in a scope",
        "operationId": "getPendingUsersAggregated",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACLAggregateFilter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ACLAggregateFilter"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of Pending Invites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseInvite"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseInvite"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/apikey": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Fetches the list of API Keys corresponding to the request's filter criteria.",
        "operationId": "listApiKeys_1",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyType",
            "in": "query",
            "description": "This is the API Key type like Personal Access Key or Service Account Key.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "SERVICE_ACCOUNT"
              ]
            }
          },
          {
            "name": "parentIdentifier",
            "in": "query",
            "description": "ID of API key's Parent Service Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of API Key IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of API keys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListApiKey"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListApiKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListApiKey"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Creates an API key",
        "operationId": "createApiKey",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKey"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/apikey/{identifier}": {
      "put": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Updates API Key for the provided ID",
        "operationId": "updateApiKey",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "This is the API key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKey"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKey"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Deletes the API Key corresponding to the provided ID.",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyType",
            "in": "query",
            "description": "This is the API Key type like Personal Access Key or Service Account Key.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "SERVICE_ACCOUNT"
              ]
            }
          },
          {
            "name": "parentIdentifier",
            "in": "query",
            "description": "Id of API key's Parent Service Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "This is the API key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns a boolean value. The value is True if the API Key is successfully deleted, else it is False.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/apikey/aggregate/{identifier}": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Fetches the API Keys details corresponding to the provided ID and Scope.",
        "operationId": "getAggregatedApiKey",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyType",
            "in": "query",
            "description": "This is the API Key type like Personal Access Key or Service Account Key.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "SERVICE_ACCOUNT"
              ]
            }
          },
          {
            "name": "parentIdentifier",
            "in": "query",
            "description": "ID of API key's Parent Service Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "This is the API key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKeyAggregate"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKeyAggregate"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApiKeyAggregate"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/apikey/aggregate": {
      "get": {
        "tags": [
          "ApiKey"
        ],
        "summary": "Fetches the list of Aggregated API Keys corresponding to the request's filter criteria.",
        "operationId": "listApiKeys",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyType",
            "in": "query",
            "description": "This is the API Key type like Personal Access Key or Service Account Key.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "SERVICE_ACCOUNT"
              ]
            }
          },
          {
            "name": "parentIdentifier",
            "in": "query",
            "description": "ID of API key's Parent Service Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of API Key IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter API keys. Any API key having the specified string in its Name, ID and Tag would be filtered.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Paginated list of Aggregated API keys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseApiKeyAggregate"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseApiKeyAggregate"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseApiKeyAggregate"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/host-validation": {
      "post": {
        "tags": [
          "ValidateHost"
        ],
        "summary": "Validates hosts connectivity credentials",
        "operationId": "validateHosts",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Secret Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of SSH or WinRm hosts to validate, and Delegate tags (optional)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostValidationParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns validation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListHostValidationDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListHostValidationDTO"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/ng/api/hosts/filter": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Gets the list of hosts filtered by accountIdentifier and connectorIdentifier",
        "operationId": "filterHostsByConnector",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Connector Identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the filters applied",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostFilterDTO"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/HostFilterDTO"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/HostFilterDTO"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/HostFilterDTO"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of hosts filtered by accountIdentifier and connectorIdentifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseHostDTO"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseHostDTO"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseHostDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/hosts/validate": {
      "post": {
        "tags": [
          "Hosts"
        ],
        "summary": "Validates hosts connectivity credentials",
        "operationId": "validateHosts_1",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Secret Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of SSH or WinRm hosts to validate, and Delegate tags (optional)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostValidationParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns validation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListHostValidationDTO"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListHostValidationDTO"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListHostValidationDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/secret-managers/meta-data": {
      "post": {
        "tags": [
          "Secret Managers"
        ],
        "summary": "Gets the metadata of Secret Manager",
        "operationId": "getMetadata",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details required for the creation of the Secret Manager",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invite"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Invite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the metadata of Secret Manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretManagerMetadataDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretManagerMetadataDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Fetches the list of Secrets corresponding to the request's filter criteria.",
        "operationId": "listSecretsV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of Secret IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Secret whether it is SecretFile, SecretText or SSH key",
            "schema": {
              "type": "string",
              "enum": [
                "SecretFile",
                "SecretText",
                "SSHKey",
                "WinRmCredentials"
              ]
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Filter Secrets based on name, Identifier and tags by this search term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Add multiple secret types like SecretFile, SecretText or SSH key to criteria",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "SecretFile",
                  "SecretText",
                  "SSHKey",
                  "WinRmCredentials"
                ]
              }
            }
          },
          {
            "name": "source_category",
            "in": "query",
            "description": "Source Category like CLOUD_PROVIDER, SECRET_MANAGER, CLOUD_COST, ARTIFACTORY, CODE_REPO, MONITORING or TICKETING",
            "schema": {
              "type": "string",
              "enum": [
                "CLOUD_PROVIDER",
                "SECRET_MANAGER",
                "CLOUD_COST",
                "ARTIFACTORY",
                "CODE_REPO",
                "MONITORING",
                "TICKETING"
              ]
            }
          },
          {
            "name": "includeSecretsFromEverySubScope",
            "in": "query",
            "description": "Specify whether or not to include secrets from all the sub-scopes of the given Scope",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeAllSecretsAccessibleAtScope",
            "in": "query",
            "description": "Specify whether or not to include all the Secrets accessible at the scope. For eg if set as true, at the Project scope we will get org and account Secrets also in the response",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. The default value is 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. The default value is 100 ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Secrets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSecretResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Creates a Secret at given Scope",
        "operationId": "postSecret",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "privateSecret",
            "in": "query",
            "description": "This is a boolean value to specify if the Secret is Private. The default value is False.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Details required to create the Secret",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretRequestWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Secret details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets/files": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Creates a Secret File",
        "operationId": "postSecretFileV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "privateSecret",
            "in": "query",
            "description": "This is a boolean value to specify if the Secret is Private. The default value is False.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "object",
                    "description": "This is the encrypted Secret File that needs to be uploaded."
                  },
                  "spec": {
                    "type": "string",
                    "description": "Specification of Secret file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Secret file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets/yaml": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Creates a secret via YAML",
        "operationId": "postSecretViaYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "privateSecret",
            "in": "query",
            "description": "This is a boolean value to specify if the Secret is Private. The default value is False.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Details required to create the Secret",
          "content": {
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/SecretRequestWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Secret details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets/{identifier}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get the Secret by ID and Scope",
        "operationId": "getSecretV2",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Secret with the requested ID and Scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Updates the Secret by ID and Scope",
        "operationId": "putSecret",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretRequestWrapper"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Secrets"
        ],
        "summary": "Deletes Secret by ID and Scope",
        "operationId": "deleteSecretV2",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceDelete",
            "in": "query",
            "description": "If true, the Entity will be forced delete, without checking any references/usages",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the secret is successfully deleted and false if it is not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets/list": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Fetches the list of Secrets corresponding to the request's filter criteria.",
        "operationId": "listSecretsV3",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. The default value of 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. The default value is 100",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretResourceFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/SecretResourceFilter"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Secrets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSecretResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets/files/{identifier}": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Updates the Secret file by ID and Scope",
        "operationId": "putSecretFileV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "object",
                    "description": "This is the encrypted Secret File that needs to be uploaded."
                  },
                  "spec": {
                    "type": "string",
                    "description": "Specification of Secret file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Secret file details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets/{identifier}/yaml": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Updates the Secret by ID and Scope via YAML",
        "operationId": "putSecretViaYaml",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of Secret to create",
          "content": {
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/SecretRequestWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Secret details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets/validate": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Validates Secret with the provided ID and Scope",
        "operationId": "validateSecret",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Secret ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Secret type",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretValidationMetaData"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/SecretValidationMetaData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns validation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretValidationResult"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSecretValidationResult"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/secrets/validateUniqueIdentifier/{identifier}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Checks whether the identifier is unique or not",
        "operationId": "validateSecretIdentifierIsUnique",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Secret Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the Identifier is unique and false if the Identifier is not unique.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List Organizations by filter",
        "description": "List all Organizations matching the given search criteria.",
        "operationId": "getOrganizationList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of Org Key IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter Organizations. Any Organization having the specified string in its Name, ID and Tag would be filtered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns list of Organizations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseOrganizationResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseOrganizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create an Organization",
        "description": "Creates a new Organization.",
        "operationId": "postOrganization",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Organization to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOrganizationResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOrganizationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/organizations/{identifier}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List Organization details",
        "description": "Lists Organization details using an Account and Organization ID.",
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Organization details with the passed Account Identifier and Org Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOrganizationResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOrganizationResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Update an Organization",
        "description": "Updates Organization settings.",
        "operationId": "putOrganization",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version number of the Organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated Organization. Please provide values for all fields, not just the fields you are updating",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOrganizationResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOOrganizationResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete an Organization",
        "description": "Deletes Organization for the given ID.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version number of the Organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the Organization is deleted successfully and false if the Organization is not deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "List all Projects for a user",
        "description": "Lists all Projects the user is a member of by using the user's API key token.",
        "operationId": "getProjectList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hasModule",
            "in": "query",
            "description": "This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of Project IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "moduleType",
            "in": "query",
            "description": "Filter Projects by module type",
            "schema": {
              "type": "string",
              "enum": [
                "CD",
                "CI",
                "CV",
                "CF",
                "CE",
                "STO",
                "CHAOS",
                "SRM",
                "CODE",
                "CORE",
                "PMS",
                "TEMPLATESERVICE",
                "GOVERNANCE",
                "IACM"
              ]
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter Projects. Any Project having the specified string in its Name, ID and Tag would be filtered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of Projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseProjectResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseProjectResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a Project",
        "description": "Creates a new Harness Project.",
        "operationId": "postProject",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization identifier for the Project. If left empty, the Project is created under Default Organization",
            "schema": {
              "type": "string",
              "default": "default"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Project to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOProjectResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOProjectResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/projects/{identifier}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "List Project details",
        "description": "Lists a Project's details for the given ID.",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization identifier for the project. If left empty, Default Organization is assumed",
            "schema": {
              "type": "string",
              "default": "default"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns Project having ID as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOProjectResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOProjectResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update a Project",
        "description": "Updates Project details for the given ID.",
        "operationId": "putProject",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version number of Project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization identifier for the Project. If left empty, Default Organization is assumed",
            "schema": {
              "type": "string",
              "default": "default"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated Project. Please provide values for all fields, not just the fields you are updating",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns updated Project details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOProjectResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOProjectResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a Project",
        "description": "Deletes a Project corresponding to the given ID.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version number of Project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "This is the Organization Identifier for the Project. By default, the Default Organization's Identifier is considered.",
            "schema": {
              "type": "string",
              "default": "default"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the Project is deleted successfully and false if the Project is not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/projects/list": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "List user's project with support to filter by multiple organizations",
        "operationId": "getProjectListWithMultiOrgFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifiers",
            "in": "query",
            "description": "List of Organization Identifiers for the Entities.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "hasModule",
            "in": "query",
            "description": "This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of Project Identifiers. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "moduleType",
            "in": "query",
            "description": "Filter Projects by module type",
            "schema": {
              "type": "string",
              "enum": [
                "CD",
                "CI",
                "CV",
                "CF",
                "CE",
                "STO",
                "CHAOS",
                "SRM",
                "CODE",
                "CORE",
                "PMS",
                "TEMPLATESERVICE",
                "GOVERNANCE",
                "IACM"
              ]
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Filter Projects by searching for this word in Name, Id, and Tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of Projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseProjectResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseProjectResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/token": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Create a Token",
        "description": "Creates a Token for the given API Key Type.",
        "operationId": "createToken",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Token details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/token/{identifier}": {
      "put": {
        "tags": [
          "Token"
        ],
        "summary": "Update a Token",
        "description": "Updates a Token for the given API Key Type.",
        "operationId": "updateToken",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Token"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns updated Token details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOToken"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOToken"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOToken"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Token"
        ],
        "summary": "Delete a Token",
        "description": "Deletes a Token for the given API Key Type.",
        "operationId": "deleteToken",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyType",
            "in": "query",
            "description": "This is the API Key type like Personal Access Key or Service Account Key.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "SERVICE_ACCOUNT"
              ]
            }
          },
          {
            "name": "parentIdentifier",
            "in": "query",
            "description": "ID of API key's Parent Service Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyIdentifier",
            "in": "query",
            "description": "API key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the Token is deleted successfully and false if the Token is not deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/token/aggregate": {
      "get": {
        "tags": [
          "Token"
        ],
        "summary": "List all Tokens",
        "description": "Lists all the Tokens matching the given search criteria.",
        "operationId": "listAggregatedTokens",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyType",
            "in": "query",
            "description": "This is the API Key type like Personal Access Key or Service Account Key.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "SERVICE_ACCOUNT"
              ]
            }
          },
          {
            "name": "parentIdentifier",
            "in": "query",
            "description": "ID of API key's Parent Service Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyIdentifier",
            "in": "query",
            "description": "API key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of Token IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter Tokens. Any Token having the specified string in its Name, ID and Tag would be filtered.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Aggregated Tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseTokenAggregate"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseTokenAggregate"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseTokenAggregate"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/token/rotate/{identifier}": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Rotate a Token",
        "description": "Rotates a Token for the given API Key Type.",
        "operationId": "rotateToken",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Token Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rotateTimestamp",
            "in": "query",
            "description": "Time stamp when the Token is to be rotated",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyType",
            "in": "query",
            "description": "This is the API Key type like Personal Access Key or Service Account Key.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "SERVICE_ACCOUNT"
              ]
            }
          },
          {
            "name": "parentIdentifier",
            "in": "query",
            "description": "ID of API key's Parent Service Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyIdentifier",
            "in": "query",
            "description": "API key ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the rotated Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/token/validate": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Validate a Token",
        "description": "Validate a Token for the given account.",
        "operationId": "validateToken",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Validate a Token for the given account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOToken"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOToken"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOToken"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/{identifier}/member/{userIdentifier}": {
      "get": {
        "tags": [
          "User Group"
        ],
        "summary": "Check user membership",
        "description": "Check if the user is part of the user group in an account/org/project",
        "operationId": "getMember",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "Identifier of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Return true/false based on whether the user is part of the user group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Group"
        ],
        "summary": "Add user to User Group",
        "description": "Add a user to the user group in an account/org/project",
        "operationId": "putMember",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "Identifier of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated user group after user addition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Group"
        ],
        "summary": "Remove user from User Group",
        "description": "Remove a user from the user group in an account/org/project",
        "operationId": "deleteMember",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "Identifier of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated user group after user removal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/copy": {
      "put": {
        "tags": [
          "User Group"
        ],
        "summary": "Copy User Group",
        "description": "Copy a User Group in an account/org/project",
        "operationId": "copyUserGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIdentifier",
            "in": "query",
            "description": "groupIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of scopes",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Scope"
                }
              }
            },
            "application/yaml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Scope"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns whether the copy was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/ng/api/user-groups": {
      "get": {
        "tags": [
          "User Group"
        ],
        "summary": "List the User Groups in an account/org/project",
        "description": "List User Groups",
        "operationId": "getUserGroupList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search filter which matches by user group name/identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "EXCLUDE_INHERITED_GROUPS",
              "enum": [
                "INCLUDE_INHERITED_GROUPS",
                "EXCLUDE_INHERITED_GROUPS"
              ]
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the paginated list of the User Groups.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseUserGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Group"
        ],
        "summary": "Update User Group",
        "description": "Update a User Group in an account/org/project",
        "operationId": "putUserGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User Group entity with the updates",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroup"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/UserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the successfully updated User Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Group"
        ],
        "summary": "Create User Group",
        "description": "Create a User Group in an account/org/project",
        "operationId": "postUserGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User Group entity to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroup"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/UserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the successfully created User Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/{identifier}": {
      "get": {
        "tags": [
          "User Group"
        ],
        "summary": "Get User Group",
        "description": "Get a User Group in an account/org/project",
        "operationId": "getUserGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the successfully fetched User Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Group"
        ],
        "summary": "Delete a User Group in an account/org/project",
        "description": "Delete User Group",
        "operationId": "deleteUserGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the successfully deleted User Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/{identifier}/scopes": {
      "get": {
        "tags": [
          "User Group"
        ],
        "summary": "Get Inheriting Child Scopes",
        "description": "List the Child Scopes inheriting this User Group",
        "operationId": "getInheritingChildScopeList",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of the child scopes inheriting this User Group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListScopeName"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListScopeName"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/{identifier}/users": {
      "post": {
        "tags": [
          "User Group"
        ],
        "summary": "List users in User Group",
        "description": "List the users in a User Group in an account/org/project",
        "operationId": "getUserListInUserGroup",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Filter users based on multiple parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/UserFilter"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the paginated list of the users in a User Group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseUserMetadata"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseUserMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/{userGroupId}/link/ldap/{ldapId}": {
      "put": {
        "tags": [
          "User Group"
        ],
        "summary": "Link LDAP Group to the User Group to an account/org/project",
        "operationId": "linkUserGroupToLDAP",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ldapId",
            "in": "path",
            "description": "LDAP entity identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "LDAP Link Group Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapLinkGroupRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/LdapLinkGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated User Group after linking LDAP Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUserGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/{userGroupId}/link/saml/{samlId}": {
      "put": {
        "tags": [
          "User Group"
        ],
        "summary": "Link SAML Group to the User Group in an account/org/project",
        "operationId": "linkUserGroupToSAML",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "samlId",
            "in": "path",
            "description": "Saml Group entity identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Saml Link Group Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SamlLinkGroupRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/SamlLinkGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated User Group after linking SAML Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUserGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/batch": {
      "post": {
        "tags": [
          "User Group"
        ],
        "summary": "List User Groups by filter",
        "description": "List the User Groups selected by a filter in an account/org/project",
        "operationId": "getBatchUsersGroupList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User Group Filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of the user groups selected by a filter in a User Group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListUserGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user-groups/{userGroupId}/unlink": {
      "put": {
        "tags": [
          "User Group"
        ],
        "summary": "Unlink SSO Group from the User Group in an account/org/project",
        "operationId": "unlinkUserGroupfromSSO",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "Identifier of the user group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "retainMembers",
            "in": "query",
            "description": "Retain currently synced members of the user group",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated User Group after unlinking SSO Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUserGroup"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseUserGroup"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/v2/user-groups": {
      "put": {
        "tags": [
          "User Group"
        ],
        "summary": "Update User Group",
        "description": "Update a User Group in an account/org/project",
        "operationId": "putUserGroupV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User Group entity with the updates",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestV2"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the successfully updated User Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroupResponseV2"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroupResponseV2"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Group"
        ],
        "summary": "Create User Group",
        "description": "Create a User Group in an account/org/project",
        "operationId": "postUserGroupV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User Group entity to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestV2"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the successfully created User Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroupResponseV2"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserGroupResponseV2"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/servicesV2": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Gets Service list",
        "operationId": "getServiceList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The word to be searched and included in the list response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "description": "List of ServicesIds",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "Kubernetes",
                "NativeHelm",
                "Ssh",
                "WinRm",
                "ServerlessAwsLambda",
                "AzureWebApp",
                "CustomDeployment",
                "ECS",
                "Elastigroup",
                "TAS",
                "Asg",
                "GoogleCloudFunctions"
              ]
            }
          },
          {
            "name": "gitOpsEnabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deploymentTemplateIdentifier",
            "in": "query",
            "description": "The Identifier of deployment template if infrastructure is of type custom deployment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionLabel",
            "in": "query",
            "description": "The version label of deployment template if infrastructure is of type custom deployment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllServicesAccessibleAtScope",
            "in": "query",
            "description": "Specify true if all accessible Services are to be included",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Services for a Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Services"
        ],
        "summary": "Update a Service by identifier",
        "operationId": "updateServiceV2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Service to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create a Service",
        "operationId": "createServiceV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Service to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/servicesV2/batch": {
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create Services",
        "operationId": "createServicesV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Services to be created",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceRequest"
                }
              }
            },
            "application/yaml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceRequest"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/servicesV2/{serviceIdentifier}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Gets a Service by identifier",
        "operationId": "getServiceV2",
        "parameters": [
          {
            "name": "serviceIdentifier",
            "in": "path",
            "description": "Service Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Specify whether Service is deleted or not",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The saved Service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Services"
        ],
        "summary": "Delete a Service by identifier",
        "operationId": "deleteServiceV2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifier",
            "in": "path",
            "description": "Service Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceDelete",
            "in": "query",
            "description": "If true, the Entity will be forced delete, without checking any references/usages",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the Service is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/servicesV2/k8s/command-flags": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Retrieving the list of Kubernetes Command Options",
        "operationId": "k8sCmdFlags",
        "parameters": [
          {
            "name": "serviceSpecType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Kubernetes Command Options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSetK8sCommandFlagType"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSetK8sCommandFlagType"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/servicesV2/list/access": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Gets Service Access list",
        "operationId": "getServiceAccessList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The word to be searched and included in the list response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifiers",
            "in": "query",
            "description": "List of ServicesIds",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "Kubernetes",
                "NativeHelm",
                "Ssh",
                "WinRm",
                "ServerlessAwsLambda",
                "AzureWebApp",
                "CustomDeployment",
                "ECS",
                "Elastigroup",
                "TAS",
                "Asg",
                "GoogleCloudFunctions"
              ]
            }
          },
          {
            "name": "gitOpsEnabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deploymentTemplateIdentifier",
            "in": "query",
            "description": "The Identifier of deployment template if infrastructure is of type custom deployment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionLabel",
            "in": "query",
            "description": "The version label of deployment template if infrastructure is of type custom deployment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Services for a Project that are accessible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListServiceResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/servicesV2/upsert": {
      "put": {
        "tags": [
          "Services"
        ],
        "summary": "Upsert a Service by identifier",
        "operationId": "upsertServiceV2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Service to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/smtpConfig/{identifier}": {
      "delete": {
        "tags": [
          "SMTP"
        ],
        "summary": "Delete Smtp Config by identifier",
        "operationId": "deleteSmtpConfig",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Config identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Boolean status whether request was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/smtpConfig": {
      "get": {
        "tags": [
          "SMTP"
        ],
        "summary": "Gets Smtp config by accountId",
        "operationId": "getSmtpConfig",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "returns the SmtpConfig having accountId as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONgSmtp"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SMTP"
        ],
        "summary": "Updates the Smtp Config",
        "operationId": "updateSmtp",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NgSmtp"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns updated config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONgSmtp"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Creates SMTP config",
        "operationId": "createSmtpConfig",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NgSmtp"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONgSmtp"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/smtpConfig/validate-connectivity": {
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Tests the config's connectivity by sending a test email",
        "operationId": "validateConnectivity",
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Attribute uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns validation Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOValidationResult"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/smtpConfig/validateName": {
      "post": {
        "tags": [
          "SMTP"
        ],
        "summary": "Checks whether other connectors exist with the same name",
        "operationId": "validateName",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of Config",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns validation Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOValidationResult"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/tas/organizations": {
      "get": {
        "tags": [
          "tas"
        ],
        "summary": "Return the Tas organizations",
        "operationId": "getTasOrganizations",
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier for tas connector",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "query",
            "description": "Environment Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "infraDefinitionId",
            "in": "query",
            "description": "Infrastructure Definition Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Return the Tas organizations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/tas/space": {
      "get": {
        "tags": [
          "tas"
        ],
        "summary": "Return the Tas spaces",
        "operationId": "getTasSpaces",
        "parameters": [
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier for tas connector",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "organization for tas",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Return the Tas spaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/tas/v2/space": {
      "get": {
        "tags": [
          "tas"
        ],
        "summary": "Return the Tas spaces",
        "operationId": "getTasSpacesV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "query",
            "description": "Environment Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "infraDefinitionId",
            "in": "query",
            "description": "Infrastructure Definition Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Return the Tas spaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add user(s) to scope",
        "operationId": "addUsers",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUsersDTO"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/AddUsersDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns list of added users to a given scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAddUsersResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAddUsersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/password": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Change user password",
        "description": "Updates the User password",
        "operationId": "changeUserPassword",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns whether the operation is successful or not with readable response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPasswordChangeResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPasswordChangeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/last-admin": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Check if user is last admin",
        "description": "Check whether the user is last admin at scope or not",
        "operationId": "checkIfLastAdmin",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns Boolean status whether the user is last admin at scope or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/disable-two-factor-auth": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Disable two factor authentication",
        "description": "Disables two-factor-auth for an user in an account",
        "operationId": "disableTTwoFactorAuth",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/aggregate/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get detailed user information",
        "description": "Returns the user metadata along with rolesAssignments by userId and scope",
        "operationId": "getAggregatedUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the user metadata along with rolesAssignments by userId and scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserAggregate"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserAggregate"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/aggregate": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get list of users",
        "description": "List of all the user's metadata along with rolesAssignments who have access to given scope",
        "operationId": "getAggregatedUsers",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACLAggregateFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ACLAggregateFilter"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns list of all the user's metadata along with rolesAssignments who have access to given scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseUserAggregate"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseUserAggregate"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/two-factor-auth/{authMechanism}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets Two Factor Auth Settings",
        "description": "Gets two factor authentication settings information of the current logged in user",
        "operationId": "getTwoFactorAuthSettings",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authMechanism",
            "in": "path",
            "description": "This is the authentication mechanism for the logged-in User. Two-Factor Authentication settings will be fetched for this mechanism.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "TOTP"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns current logged in user's two factor authentication info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTwoFactorAuthSettingsInfo"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTwoFactorAuthSettingsInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/currentUser": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Current User Info",
        "description": "Gets current logged in User information",
        "operationId": "getCurrentUserInfo",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns current logged in user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/batch": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get users list",
        "description": "Get list of user's for a given scope",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/UserFilter"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of user's Metadata for a given scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseUserMetadata"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseUserMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/{userId}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove user from scope",
        "description": "Remove user as the collaborator from the scope",
        "operationId": "removeUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns Boolean status whether request was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/unlock-user/{userId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Unlock user",
        "description": "unlock user in a given scope",
        "operationId": "unlockUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user/enable-two-factor-auth": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Enable two factor authentication",
        "description": "Enables two-factor-auth for an user in an account",
        "operationId": "enableTwoFactorAuth",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorAuthSettingsInfo"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorAuthSettingsInfo"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/user": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "Updates the User information",
        "operationId": "updateUserInfo",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfo"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/UserInfo"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the update User information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/variables": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Fetches the list of Variables.",
        "operationId": "getVariableList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. The default value is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter Variables. Any Variable having the specified string in its Name or ID would be filtered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeVariablesFromEverySubScope",
            "in": "query",
            "description": "Specify whether or not to include all the Variables accessible at the scope. For eg if set as true, at the Project scope we will get org and account Variable also in the response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Variable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseVariableResponseDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Variables"
        ],
        "summary": "Updates the Variable.",
        "operationId": "updateVariable",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the variable to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariableRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Variable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOVariableResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Variables"
        ],
        "summary": "Creates a Variable.",
        "operationId": "createVariable",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Variable to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariableRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Variable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOVariableResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/variables/{identifier}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get the Variable by scope identifiers and variable identifier.",
        "operationId": "getVariable",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Variable ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the variable with the requested scope identifiers and variable identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOVariableResponseDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Variables"
        ],
        "summary": "Deletes Variable by ID.",
        "operationId": "deleteVariable",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Variable ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the Variable is deleted successfully and false if the Variable is not deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/freeze": {
      "post": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Create a Freeze",
        "operationId": "createFreeze",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Freeze YAML",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Freeze Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/freeze/{freezeIdentifier}": {
      "get": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Get a Freeze",
        "operationId": "getFreeze",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "freezeIdentifier",
            "in": "path",
            "description": "Freeze Identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Freeze Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeDetailedResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeDetailedResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Updates a Freeze",
        "operationId": "updateFreeze",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "freezeIdentifier",
            "in": "path",
            "description": "Freeze Identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Freeze YAML",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Freeze Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Delete a Freeze",
        "operationId": "deleteFreeze",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "freezeIdentifier",
            "in": "path",
            "description": "Freeze Identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Freeze Config"
          }
        }
      }
    },
    "/ng/api/freeze/delete": {
      "post": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Delete many Freezes",
        "operationId": "deleteManyFreezes",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of Freeze Identifiers",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/yaml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Freeze Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponseWrapperDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponseWrapperDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/freeze/list": {
      "post": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Gets Freeze list",
        "operationId": "getFreezeList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains details of Freeze filters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreezeFilterPropertiesDTO"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/FreezeFilterPropertiesDTO"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Freeze for a Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFreezeSummaryResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFreezeSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/freeze/getGlobalFreeze": {
      "get": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Get Global Freeze Yaml",
        "operationId": "getGlobalFreeze",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Get Global Freeze Yaml",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeDetailedResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeDetailedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/freeze/manageGlobalFreeze": {
      "post": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Create Global Freeze",
        "operationId": "createGlobalFreeze",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Freeze YAML",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Global Freeze Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/freeze/updateFreezeStatus": {
      "post": {
        "tags": [
          "Freeze CRUD"
        ],
        "summary": "Update the status of Freeze to active or inactive",
        "operationId": "updateFreezeStatus",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Freeze YAML",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Enabled",
                "Disabled"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Comma seperated List of Freeze Identifiers",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/yaml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Freeze Config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponseWrapperDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFreezeResponseWrapperDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/gitops/clusters/{identifier}": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "summary": "Gets a Cluster by identifier",
        "operationId": "getCluster",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Cluster Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "description": "environmentIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Specify whether cluster is deleted or not",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "The saved Cluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOClusterResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOClusterResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Clusters"
        ],
        "summary": "Delete a Cluster by identifier",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Cluster Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "description": "environmentIdentifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Scope for the gitops cluster",
            "schema": {
              "type": "string",
              "enum": [
                "ACCOUNT",
                "ORGANIZATION",
                "PROJECT"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the Cluster is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/gitops/clusters": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "summary": "Gets cluster list",
        "operationId": "getClusterList",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "description": "Environment Identifier of the clusters",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The word to be searched and included in the list response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "List of cluster identifiers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of cluster for a Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseClusterResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseClusterResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clusters"
        ],
        "summary": "link a Cluster",
        "operationId": "linkCluster",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the createCluster to be linked",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the linked Cluster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOClusterResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOClusterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/gitops/clusters/batch": {
      "post": {
        "tags": [
          "Clusters"
        ],
        "summary": "Link Clusters",
        "operationId": "linkClusters",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the createCluster to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterBatchRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ClusterBatchRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the linked Clusters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOClusterBatchResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOClusterBatchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/gitops/clusters/batchunlink": {
      "post": {
        "tags": [
          "Clusters"
        ],
        "summary": "Unlink Clusters",
        "operationId": "unlinkClustersInBatch",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the createCluster to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterBatchRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ClusterBatchRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if all the Clusters are deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOClusterBatchResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOClusterBatchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/serviceaccount": {
      "get": {
        "tags": [
          "Service Account"
        ],
        "summary": "Get Service Accounts",
        "description": "Fetches list of Service Accounts for the given filter criteria.",
        "operationId": "listServiceAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of Service Account IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Service Accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListServiceAccount"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListServiceAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListServiceAccount"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Service Account"
        ],
        "summary": "Create a Service Account",
        "description": "Creates a new Service Account.",
        "operationId": "createServiceAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details required to create Service Account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccount"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccount"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns details of the created Service Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccount"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccount"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/serviceaccount/{identifier}": {
      "put": {
        "tags": [
          "Service Account"
        ],
        "summary": "Update a Service Account",
        "description": "Updates details of the Service Account for the given Service Account ID.",
        "operationId": "updateServiceAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Service Account ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the updated Service Account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccount"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccount"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Service Account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccount"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccount"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Service Account"
        ],
        "summary": "Delete a Service Account",
        "description": "Deletes a Service Account corresponding to the given Service Account ID.",
        "operationId": "deleteServiceAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Service Account ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "It returns true if the Service Account is deleted successfully and false if the Service Account is not deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/serviceaccount/aggregate/{identifier}": {
      "get": {
        "tags": [
          "Service Account"
        ],
        "summary": "Get Service Account In Scope",
        "description": "Gets the list of Service Accounts in the given scope.",
        "operationId": "getAggregatedServiceAccount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Service Account IDr",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Service Account details corresponding to the specified Account Identifier and Service Account Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccountAggregate"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccountAggregate"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceAccountAggregate"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/serviceaccount/aggregate": {
      "get": {
        "tags": [
          "Service Account"
        ],
        "summary": "List aggregated Service Accounts",
        "description": "Fetches the list of Aggregated Service Accounts corresponding to the request's filter criteria.",
        "operationId": "listAggregatedServiceAccounts",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "This is the list of Service Account IDs. Details specific to these IDs would be fetched.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "This would be used to filter Service Accounts. Any Service Account having the specified string in its Name, ID and Tag would be filtered.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the paginated list of Aggregated Service Accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceAccountAggregate"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceAccountAggregate"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceAccountAggregate"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/source-code-manager/{identifier}": {
      "put": {
        "tags": [
          "Source Code Manager"
        ],
        "summary": "Updates Source Code Manager Details with the given Source Code Manager Id",
        "operationId": "updateSourceCodeManager",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Source Code manager Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains details of Source Code Manager",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SourceCodeManager"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "This contains details of the updated Source Code Manager for the specific Source Code Manager Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSourceCodeManager"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Source Code Manager"
        ],
        "summary": "Deletes the Source Code Manager corresponding to the specified Source Code Manager Id",
        "operationId": "deleteSourceCodeManager",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Source Code manager Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Successfully deleted Source Code Manager for the given Source Code Manager Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/source-code-manager": {
      "get": {
        "tags": [
          "Source Code Manager"
        ],
        "summary": "Lists Source Code Managers for the given account",
        "operationId": "getSourceCodeManagers",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of Source Code Managers of given account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListSourceCodeManager"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Source Code Manager"
        ],
        "summary": "Creates Source Code Manager",
        "operationId": "createSourceCodeManager",
        "requestBody": {
          "description": "This contains details of Source Code Manager",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SourceCodeManager"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "This contains details of the newly created Source Code Manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSourceCodeManager"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/webhook": {
      "post": {
        "tags": [
          "Webhook Event Handler"
        ],
        "summary": "Process event payload for webhook triggers.",
        "operationId": "processWebhookEvent",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns UUID of newly created webhook processing event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/settings/{identifier}": {
      "get": {
        "tags": [
          "Setting"
        ],
        "summary": "Get a setting value by identifier",
        "operationId": "getSettingValue",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "This is the Identifier of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "This returns a setting value by the Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSettingValueResponseDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSettingValueResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ng/api/settings": {
      "get": {
        "tags": [
          "Setting"
        ],
        "summary": "Get list of settings under the specified category",
        "operationId": "getSettingsList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category of the Setting.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CD",
                "CI",
                "CE",
                "CV",
                "CF",
                "STO",
                "CORE",
                "PMS",
                "TEMPLATESERVICE",
                "GOVERNANCE",
                "CHAOS",
                "SCIM",
                "GIT_EXPERIENCE",
                "CONNECTORS"
              ]
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Group Id of the setting",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "This contains a list of Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListSettingResponseDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListSettingResponseDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Setting"
        ],
        "summary": "Update settings",
        "operationId": "updateSettingValue",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of update requests for settings",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SettingRequestDTO"
                }
              }
            },
            "application/yaml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SettingRequestDTO"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "This updates the settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListSettingUpdateResponseDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListSettingUpdateResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/filters": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "List Filters",
        "description": "Lists Filters for the given criteria.",
        "operationId": "PipelinegetConnectorListV2",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. If left empty, default value of 0 is assumed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. If left empty, default value of 100 is assumed",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Filter"
        ],
        "summary": "Update a Filter",
        "description": "Updates the filter for the given ID.",
        "operationId": "PipelineupdateFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated Filter. This should have all the fields not just the updated ones",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Create a Filter",
        "description": "Creates a Filter.",
        "operationId": "PipelinepostFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Connector to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/filters/{identifier}": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Return Filter Details",
        "description": "Returns the settings of a filter for the given ID.",
        "operationId": "PipelinegetFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns Filter having filterIdentifier as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Filter"
        ],
        "summary": "Delete a Filter",
        "description": "Deletes a filter for the given ID.",
        "operationId": "PipelinedeleteFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Boolean status whether request was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/triggers": {
      "get": {
        "tags": [
          "Triggers"
        ],
        "summary": "Gets the paginated list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier.",
        "operationId": "getListForTarget",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "description": "Identifier of the target pipeline",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the paginated list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseNGTriggerDetailsResponseDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseNGTriggerDetailsResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Creates Trigger for triggering target pipeline identifier.",
        "operationId": "createTrigger",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "description": "Identifier of the target pipeline",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ignoreError",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "withServiceV2",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Triggers YAML",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Create": {
                  "summary": "Sample Create Trigger YAML",
                  "description": "Sample Triggers YAML",
                  "value": "trigger:\n  name: Trigger\n  identifier: Trigger\n  enabled: true\n  orgIdentifier: default\n  projectIdentifier: Terraform_Provider\n  pipelineIdentifier: Terraform_NG_Acc_Tests_With_Notifications\n  source:\n    type: Scheduled\n    spec:\n      type: Cron\n      spec:\n        expression: 0 8,20 * * *\n  inputYaml: |\n    pipeline:\n      identifier: Terraform_NG_Acc_Tests_With_Notifications\n      properties:\n        ci:\n          codebase:\n            build:\n              type: branch\n              spec:\n                branch: main"
                }
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Create": {
                  "summary": "Sample Create Trigger YAML",
                  "description": "Sample Triggers YAML",
                  "value": "trigger:\n  name: Trigger\n  identifier: Trigger\n  enabled: true\n  orgIdentifier: default\n  projectIdentifier: Terraform_Provider\n  pipelineIdentifier: Terraform_NG_Acc_Tests_With_Notifications\n  source:\n    type: Scheduled\n    spec:\n      type: Cron\n      spec:\n        expression: 0 8,20 * * *\n  inputYaml: |\n    pipeline:\n      identifier: Terraform_NG_Acc_Tests_With_Notifications\n      properties:\n        ci:\n          codebase:\n            build:\n              type: branch\n              spec:\n                branch: main"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns details of the created Trigger.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGTriggerResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGTriggerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/triggers/{triggerIdentifier}": {
      "get": {
        "tags": [
          "Triggers"
        ],
        "summary": "Gets the trigger by accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier and triggerIdentifier.",
        "operationId": "getTrigger",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "description": "Identifier of the target pipeline under which trigger resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the trigger with the accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier and triggerIdentifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGTriggerResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGTriggerResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Triggers"
        ],
        "summary": "Updates trigger for pipeline with target pipeline identifier.",
        "operationId": "updateTrigger",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "description": "Identifier of the target pipeline under which trigger resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ignoreError",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Triggers YAML",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Update": {
                  "summary": "Sample Update Trigger YAML",
                  "description": "Sample Triggers YAML",
                  "value": "trigger:\n  name: Trigger\n  identifier: Trigger\n  enabled: true\n  orgIdentifier: default\n  projectIdentifier: Terraform_Provider\n  pipelineIdentifier: Terraform_NG_Acc_Tests_With_Notifications\n  source:\n    type: Scheduled\n    spec:\n      type: Cron\n      spec:\n        expression: 0 8,20 * * *\n  inputYaml: |\n    pipeline:\n      identifier: Terraform_NG_Acc_Tests_With_Notifications\n      properties:\n        ci:\n          codebase:\n            build:\n              type: branch\n              spec:\n                branch: main"
                }
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Update": {
                  "summary": "Sample Update Trigger YAML",
                  "description": "Sample Triggers YAML",
                  "value": "trigger:\n  name: Trigger\n  identifier: Trigger\n  enabled: true\n  orgIdentifier: default\n  projectIdentifier: Terraform_Provider\n  pipelineIdentifier: Terraform_NG_Acc_Tests_With_Notifications\n  source:\n    type: Scheduled\n    spec:\n      type: Cron\n      spec:\n        expression: 0 8,20 * * *\n  inputYaml: |\n    pipeline:\n      identifier: Terraform_NG_Acc_Tests_With_Notifications\n      properties:\n        ci:\n          codebase:\n            build:\n              type: branch\n              spec:\n                branch: main"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated trigger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGTriggerResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGTriggerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Triggers"
        ],
        "summary": "Deletes Trigger by identifier.",
        "operationId": "deleteTrigger",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "description": "Identifier of the target pipeline under which trigger resides.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the boolean status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/triggers/catalog": {
      "get": {
        "tags": [
          "Triggers"
        ],
        "summary": "Lists all Triggers",
        "description": "Lists all the Triggers for the given Account ID.",
        "operationId": "getTriggerCatalog",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Trigger catalogue response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTriggerCatalogResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTriggerCatalogResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/triggers/{triggerIdentifier}/details": {
      "get": {
        "tags": [
          "Triggers"
        ],
        "summary": "Fetches Trigger details for a specific accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier.",
        "operationId": "getTriggerDetails",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "description": "Identifier of the target pipeline",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Fetches Trigger details for a specific accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGTriggerDetailsResponseDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGTriggerDetailsResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/triggers/{triggerIdentifier}/eventHistory": {
      "get": {
        "tags": [
          "Triggers"
        ],
        "summary": "Get event history for a trigger",
        "description": "Get event history for a trigger",
        "operationId": "triggerEventHistory",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetIdentifier",
            "in": "query",
            "description": "Identifier of the target pipeline under which trigger resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search term to filter out pipelines based on pipeline name, identifier, tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the Trigger catalogue response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageNGTriggerEventHistoryDTO"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageNGTriggerEventHistoryDTO"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/webhook/triggerProcessingDetails": {
      "get": {
        "tags": [
          "Webhook Triggers"
        ],
        "summary": "Gets webhook event processing details for input eventId.",
        "operationId": "fetchWebhookDetails",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns webhook event processing details for input eventId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOWebhookEventProcessingDetails"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOWebhookEventProcessingDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOWebhookEventProcessingDetails"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/webhook/triggerExecutionDetails/{eventId}": {
      "get": {
        "tags": [
          "Webhook Triggers"
        ],
        "summary": "Gets webhook event processing details for input eventId.",
        "operationId": "fetchWebhookExecutionDetails",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns webhook event processing details for input eventId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOWebhookExecutionDetails"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOWebhookExecutionDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOWebhookExecutionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/webhook/trigger": {
      "post": {
        "tags": [
          "Webhook Triggers"
        ],
        "summary": "Handles event payload for webhook triggers.",
        "operationId": "PipelineprocessWebhookEvent",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns UUID of newly created webhook processing event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/webhook/custom": {
      "post": {
        "tags": [
          "Webhook Triggers"
        ],
        "summary": "Handles event payload for custom webhook triggers.",
        "operationId": "processCustomWebhookEvent",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns UUID of newly created custom webhook processing event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/webhook/custom/v2": {
      "post": {
        "tags": [
          "Webhook Triggers"
        ],
        "summary": "Handles event payload for custom webhook triggers.",
        "operationId": "processCustomWebhookEventV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline Identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "triggerIdentifier",
            "in": "query",
            "description": "Trigger Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Trigger Payload",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns data about of newly created custom webhook processing event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGProcessWebhookResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGProcessWebhookResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONGProcessWebhookResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/approvals/{approvalInstanceId}/harness/activity": {
      "post": {
        "tags": [
          "Approvals"
        ],
        "summary": "Approve or Reject a Pipeline Execution",
        "operationId": "addHarnessApprovalActivity",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalInstanceId",
            "in": "path",
            "description": "Approval Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of approval activity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HarnessApprovalActivityRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/HarnessApprovalActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a newly added Harness Approval activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApprovalInstanceResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOApprovalInstanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipelines/pipelineExecution": {
      "get": {
        "tags": [
          "Pipeline Dashboard"
        ],
        "summary": "Fetch Execution Details for an Interval",
        "description": "Returns Pipeline Execution Details for a Given Interval (Presented in Day Wise Format)",
        "operationId": "getPipelineExecution",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moduleInfo",
            "in": "query",
            "description": "The module from which execution was triggered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start Date Epoch time in ms",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End Date Epoch time in ms",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "default": {
            "description": "Fetches Pipeline Executions details for a given Interval and will be presented in day wise format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTODashboardPipelineExecution"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/pipeline/api/inputSets": {
      "get": {
        "tags": [
          "Pipeline Input Set"
        ],
        "summary": "List Input Sets",
        "description": "Lists all Input Sets for a Pipeline",
        "operationId": "listInputSet",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline identifier for which we need the Input Sets list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inputSetType",
            "in": "query",
            "description": "Type of Input Set. The default value is ALL.",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "INPUT_SET",
                "OVERLAY_INPUT_SET"
              ],
              "default": "ALL"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search term to filter out Input Sets based on name, identifier, tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Fetch all the Input Sets for a Pipeline, including Overlay Input Sets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseInputSetSummaryResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseInputSetSummaryResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pipeline Input Set"
        ],
        "summary": "Create an Input Set",
        "description": "Creates an Input Set for a Pipeline",
        "operationId": "postInputSet",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline Identifier for the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "description": "Github branch of the Pipeline for which the Input Set is to be created",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "description": "Github Repo identifier of the Pipeline for which the Input Set is to be created",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "description": "Checks the new branch",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeType",
            "in": "query",
            "description": "Tells whether the Entity is to be saved on Git or not",
            "schema": {
              "type": "string",
              "enum": [
                "INLINE",
                "REMOTE"
              ]
            }
          },
          {
            "name": "repoName",
            "in": "query",
            "description": "Name of the repository.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Input set YAML to be created. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters.",
          "content": {
            "application/yaml": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Create": {
                  "summary": "Sample Input Set YAML",
                  "description": "Sample Input Set YAML",
                  "value": "inputSet:\n    name: Sample Input Set\n    tags: {}\n    identifier: Sample_Input_Set\n    orgIdentifier: default\n    projectIdentifier: MISC\n    pipeline:\n        identifier: Sample_Pipeline\n        stages:\n            - stage:\n                  identifier: Sample_Stage\n                  type: Approval\n                  spec:\n                      execution:\n                          steps:\n                              - step:\n                                    identifier: Approval_Step\n                                    type: HarnessApproval\n                                    spec:\n                                        approvers:\n                                            userGroups:\n                                                - account.Admins\n                              - step:\n                                    identifier: Shellscript_Step\n                                    type: ShellScript\n                                    spec:\n                                        source:\n                                            type: Inline\n                                            spec:\n                                                script: echo \"ShellScript\"\n            - stage:\n                  identifier: Sample_Deploy_Stage\n                  type: Deployment\n                  spec:\n                      serviceConfig:\n                          serviceRef: Service1\n                      infrastructure:\n                          environmentRef: Env1\n                          infrastructureDefinition:\n                              type: KubernetesDirect\n                              spec:\n                                  connectorRef: account.harnessciplatform\n                                  namespace: sample\n"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "If the YAML is valid, returns created Input Set. If not, it sends what is wrong with the YAML",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInputSetResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInputSetResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/inputSets/{inputSetIdentifier}": {
      "get": {
        "tags": [
          "Pipeline Input Set"
        ],
        "summary": "Fetch an Input Set",
        "description": "Returns Input Set for a Given Identifier (Throws an Error if no Input Set Exists)",
        "operationId": "getInputSet",
        "parameters": [
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "description": "Identifier for the Input Set",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline Identifier for the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "description": "Github branch of the Pipeline for which the Input Set is to be fetched",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "description": "Github Repo identifier of the Pipeline for which the Input Set is to be fetched",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns Input Set if exists for the given Identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInputSetResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInputSetResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pipeline Input Set"
        ],
        "summary": "Update an Input Set",
        "description": "Updates the Input Set for a Pipeline",
        "operationId": "putInputSet",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of Entity to match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "description": "Identifier for the Input Set that needs to be updated. An Input Set corresponding to this identifier should already exist.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline Identifier for the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineBranch",
            "in": "query",
            "description": "Github branch of the Pipeline for which the Input Set is to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineRepoID",
            "in": "query",
            "description": "Github Repo Id of the Pipeline for which the Input Set is to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "description": "If the entity is git-synced, this parameter represents the commit id against which file conflicts are resolved",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Input set YAML to be updated. The query parameters should match the Account, Org, Project, and Pipeline Ids in the YAML.",
          "content": {
            "application/yaml": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Update": {
                  "summary": "Sample Input Set YAML",
                  "description": "Sample Input Set YAML",
                  "value": "inputSet:\n    name: Sample Input Set\n    tags: {}\n    identifier: Sample_Input_Set\n    orgIdentifier: default\n    projectIdentifier: MISC\n    pipeline:\n        identifier: Sample_Pipeline\n        stages:\n            - stage:\n                  identifier: Sample_Stage\n                  type: Approval\n                  spec:\n                      execution:\n                          steps:\n                              - step:\n                                    identifier: Approval_Step\n                                    type: HarnessApproval\n                                    spec:\n                                        approvers:\n                                            userGroups:\n                                                - account.Admins\n                              - step:\n                                    identifier: Shellscript_Step\n                                    type: ShellScript\n                                    spec:\n                                        source:\n                                            type: Inline\n                                            spec:\n                                                script: echo \"ShellScript\"\n            - stage:\n                  identifier: Sample_Deploy_Stage\n                  type: Deployment\n                  spec:\n                      serviceConfig:\n                          serviceRef: Service1\n                      infrastructure:\n                          environmentRef: Env1\n                          infrastructureDefinition:\n                              type: KubernetesDirect\n                              spec:\n                                  connectorRef: account.harnessciplatform\n                                  namespace: sample\n"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "If the YAML is valid, returns the updated Input Set. If not, it sends what is wrong with the YAML",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInputSetResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInputSetResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pipeline Input Set"
        ],
        "summary": "Delete an Input Set",
        "description": "Deletes the Input Set by Identifier",
        "operationId": "deleteInputSet",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of Entity to match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inputSetIdentifier",
            "in": "path",
            "description": "Identifier of the Input Set that should be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline Identifier for the entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Return the Deleted Input Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/inputSets/template": {
      "post": {
        "tags": [
          "Pipeline Input Set"
        ],
        "summary": "Fetch Runtime Input Template",
        "description": "Returns Runtime Input Template for a Pipeline",
        "operationId": "runtimeInputTemplate",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline identifier for which we need the Runtime Input Template.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSetTemplateRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/InputSetTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Fetch Runtime Input Template for a Pipeline, along with any expressions whose value is needed for running specific Stages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInputSetTemplateWithReplacedExpressionsResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInputSetTemplateWithReplacedExpressionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipelines": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Create a Pipeline",
        "description": "Creates a Pipeline",
        "operationId": "postPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "description": "Checks the new branch",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeType",
            "in": "query",
            "description": "Tells whether the Entity is to be saved on Git or not",
            "schema": {
              "type": "string",
              "enum": [
                "INLINE",
                "REMOTE"
              ]
            }
          },
          {
            "name": "repoName",
            "in": "query",
            "description": "Name of the repository.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pipeline YAML",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns created pipeline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/pipeline/api/pipelines/v2": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Create a Pipeline",
        "description": "Creates a Pipeline",
        "operationId": "postPipelineV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "description": "Checks the new branch",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeType",
            "in": "query",
            "description": "Tells whether the Entity is to be saved on Git or not",
            "schema": {
              "type": "string",
              "enum": [
                "INLINE",
                "REMOTE"
              ]
            }
          },
          {
            "name": "repoName",
            "in": "query",
            "description": "Name of the repository.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pipeline YAML",
          "content": {
            "application/yaml": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Create": {
                  "summary": "Sample Create Pipeline YAML",
                  "description": "Sample Pipeline YAML with One Build Stage and One Deploy Stage",
                  "value": "pipeline:\n    name: Sample Pipeline\n    identifier: Sample_Pipeline\n    allowStageExecutions: false\n    projectIdentifier: Temp\n    orgIdentifier: default\n    tags: {}\n    stages:\n        - stage:\n              name: Sample Stage\n              identifier: Sample_Stage\n              description: \"\"\n              type: Approval\n              spec:\n                  execution:\n                      steps:\n                          - step:\n                                name: Approval Step\n                                identifier: Approval_Step\n                                type: HarnessApproval\n                                timeout: 1d\n                                spec:\n                                    approvalMessage: |-\n                                        Please review the following information\n                                        and approve the pipeline progression\n                                    includePipelineExecutionHistory: true\n                                    approvers:\n                                        minimumCount: 1\n                                        disallowPipelineExecutor: false\n                                        userGroups: <+input>\n                                    approverInputs: []\n                          - step:\n                                type: ShellScript\n                                name: ShellScript Step\n                                identifier: ShellScript_Step\n                                spec:\n                                    shell: Bash\n                                    onDelegate: true\n                                    source:\n                                        type: Inline\n                                        spec:\n                                            script: <+input>\n                                    environmentVariables: []\n                                    outputVariables: []\n                                    executionTarget: {}\n                                timeout: 10m\n              tags: {}\n        - stage:\n              name: Sample Deploy Stage\n              identifier: Sample_Deploy_Stage\n              description: \"\"\n              type: Deployment\n              spec:\n                  serviceConfig:\n                      serviceRef: <+input>\n                      serviceDefinition:\n                          spec:\n                              variables: []\n                          type: Kubernetes\n                  infrastructure:\n                      environmentRef: <+input>\n                      infrastructureDefinition:\n                          type: KubernetesDirect\n                          spec:\n                              connectorRef: <+input>\n                              namespace: <+input>\n                              releaseName: release-<+INFRA_KEY>\n                      allowSimultaneousDeployments: false\n                  execution:\n                      steps:\n                          - step:\n                                name: Rollout Deployment\n                                identifier: rolloutDeployment\n                                type: K8sRollingDeploy\n                                timeout: 10m\n                                spec:\n                                    skipDryRun: false\n                      rollbackSteps:\n                          - step:\n                                name: Rollback Rollout Deployment\n                                identifier: rollbackRolloutDeployment\n                                type: K8sRollingRollback\n                                timeout: 10m\n                                spec: {}\n              tags: {}\n              failureStrategies:\n                  - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns created pipeline with metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPipelineSaveResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPipelineSaveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipelines/{pipelineIdentifier}": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Fetch a Pipeline",
        "description": "Returns a Pipeline by Identifier",
        "operationId": "getPipeline",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "description": "Pipeline Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "getTemplatesResolvedPipeline",
            "in": "query",
            "description": "This is a boolean value. If true, returns Templates resolved Pipeline YAML in the response else returns null.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "loadFromFallbackBranch",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validateAsync",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Load-From-Cache",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "false"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns pipeline YAML",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPMSPipelineResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPMSPipelineResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Update a Pipeline",
        "description": "Updates a Pipeline by Identifier",
        "operationId": "updatePipeline",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of Entity to match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "description": "Pipeline Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "description": "If the entity is git-synced, this parameter represents the commit id against which file conflicts are resolved",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pipeline YAML to be updated",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns updated pipeline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Delete a Pipeline",
        "description": "Deletes a Pipeline by Identifier",
        "operationId": "deletePipeline",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of Entity to match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "description": "Pipeline Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Boolean status whether request was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipelines/list": {
      "post": {
        "tags": [
          "Pipeline"
        ],
        "summary": "List Pipelines",
        "description": "Returns List of Pipelines in the Given Project",
        "operationId": "getPipelineList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search term to filter out pipelines based on pipeline name, identifier, tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "getDistinctFromBranches",
            "in": "query",
            "description": "Boolean flag to get distinct pipelines from all branches.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "This is the body for the filter properties for listing pipelines.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineFilterProperties"
              },
              "examples": {
                "List": {
                  "summary": "Sample List Pipeline JSON",
                  "description": "Sample List Pipeline JSON Payload",
                  "value": {
                    "filterType": "PipelineSetup"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of pipelines.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPagePMSPipelineSummaryResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPagePMSPipelineSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipelines/summary/{pipelineIdentifier}": {
      "get": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Fetch Pipeline Summary",
        "description": "Returns Pipeline Summary by Identifier",
        "operationId": "getPipelineSummary",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "description": "Pipeline Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns Pipeline Summary having pipelineIdentifier as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPMSPipelineSummaryResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPMSPipelineSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipelines/v2/{pipelineIdentifier}": {
      "put": {
        "tags": [
          "Pipeline"
        ],
        "summary": "Update a Pipeline",
        "description": "Updates a Pipeline by Identifier",
        "operationId": "updatePipelineV2",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "Version of Entity to match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "path",
            "description": "Pipeline Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "description": "If the entity is git-synced, this parameter represents the commit id against which file conflicts are resolved",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pipeline YAML to be updated",
          "content": {
            "application/yaml": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Update": {
                  "summary": "Sample Update Pipeline YAML",
                  "description": "Sample Pipeline YAML with One Build Stage and One Deploy Stage",
                  "value": "pipeline:\n    name: Sample Pipeline\n    identifier: Sample_Pipeline\n    allowStageExecutions: false\n    projectIdentifier: Temp\n    orgIdentifier: default\n    tags: {}\n    stages:\n        - stage:\n              name: Sample Stage\n              identifier: Sample_Stage\n              description: \"\"\n              type: Approval\n              spec:\n                  execution:\n                      steps:\n                          - step:\n                                name: Approval Step\n                                identifier: Approval_Step\n                                type: HarnessApproval\n                                timeout: 1d\n                                spec:\n                                    approvalMessage: |-\n                                        Please review the following information\n                                        and approve the pipeline progression\n                                    includePipelineExecutionHistory: true\n                                    approvers:\n                                        minimumCount: 1\n                                        disallowPipelineExecutor: false\n                                        userGroups: <+input>\n                                    approverInputs: []\n                          - step:\n                                type: ShellScript\n                                name: ShellScript Step\n                                identifier: ShellScript_Step\n                                spec:\n                                    shell: Bash\n                                    onDelegate: true\n                                    source:\n                                        type: Inline\n                                        spec:\n                                            script: <+input>\n                                    environmentVariables: []\n                                    outputVariables: []\n                                    executionTarget: {}\n                                timeout: 10m\n              tags: {}\n        - stage:\n              name: Sample Deploy Stage\n              identifier: Sample_Deploy_Stage\n              description: \"\"\n              type: Deployment\n              spec:\n                  serviceConfig:\n                      serviceRef: <+input>\n                      serviceDefinition:\n                          spec:\n                              variables: []\n                          type: Kubernetes\n                  infrastructure:\n                      environmentRef: <+input>\n                      infrastructureDefinition:\n                          type: KubernetesDirect\n                          spec:\n                              connectorRef: <+input>\n                              namespace: <+input>\n                              releaseName: release-<+INFRA_KEY>\n                      allowSimultaneousDeployments: false\n                  execution:\n                      steps:\n                          - step:\n                                name: Rollout Deployment\n                                identifier: rolloutDeployment\n                                type: K8sRollingDeploy\n                                timeout: 10m\n                                spec:\n                                    skipDryRun: false\n                      rollbackSteps:\n                          - step:\n                                name: Rollback Rollout Deployment\n                                identifier: rollbackRolloutDeployment\n                                type: K8sRollingRollback\n                                timeout: 10m\n                                spec: {}\n              tags: {}\n              failureStrategies:\n                  - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns updated pipeline with metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPipelineSaveResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPipelineSaveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipelines/execution/{planExecutionId}": {
      "get": {
        "tags": [
          "Pipeline Execution Details"
        ],
        "summary": "Fetch Execution Details",
        "description": "Returns the Pipeline Execution Details for a Given PlanExecution ID",
        "operationId": "getExecutionDetail",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageNodeId",
            "in": "query",
            "description": "Stage Node Identifier for which Stage Graph needs to be Rendered",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageNodeExecutionId",
            "in": "query",
            "description": "Stage Node Execution ID for which Stage Graph needs to be Rendered. (Needed only when there are Multiple Runs for a Given Stage. It can be Extracted from LayoutNodeMap Field)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "description": "Plan Execution Id for which we want to get the Execution details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Return the Pipeline Execution details for given PlanExecution Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPipelineExecutionDetail"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPipelineExecutionDetail"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/pipeline/api/pipelines/execution/v2/{planExecutionId}": {
      "get": {
        "tags": [
          "Pipeline Execution Details"
        ],
        "summary": "Fetch Execution Details",
        "description": "Returns the Pipeline Execution Details for a Given PlanExecution ID",
        "operationId": "getExecutionDetailV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageNodeId",
            "in": "query",
            "description": "Stage Node Identifier for which Stage Graph needs to be Rendered",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stageNodeExecutionId",
            "in": "query",
            "description": "Stage Node Execution ID for which Stage Graph needs to be Rendered. (Needed only when there are Multiple Runs for a Given Stage. It can be Extracted from LayoutNodeMap Field)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "childStageNodeId",
            "in": "query",
            "description": "Stage Node Execution ID for which Stage Graph needs to be Rendered. (Needed only when there are Multiple Runs for a Given Stage. It can be Extracted from LayoutNodeMap Field)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renderFullBottomGraph",
            "in": "query",
            "description": "Generate Graph for all the Stages including Steps in each Stage",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "description": "Plan Execution Id for which we want to get the Execution details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Return the Pipeline Execution details for given PlanExecution Id without full graph if stageNodeId is null",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPipelineExecutionDetail"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPipelineExecutionDetail"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipelines/execution/summary": {
      "post": {
        "tags": [
          "Pipeline Execution Details"
        ],
        "summary": "List Executions",
        "description": "Returns a List of Pipeline Executions with Specific Filter",
        "operationId": "getListOfExecutions",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search term to filter out pipelines based on pipeline name, identifier, tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipelineIdentifier",
            "in": "query",
            "description": "Pipeline Identifier filter if exact pipelines needs to be filtered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filterIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "This is the Execution Status of the entity",
                "enum": [
                  "Running",
                  "AsyncWaiting",
                  "TaskWaiting",
                  "TimedWaiting",
                  "Failed",
                  "Errored",
                  "IgnoreFailed",
                  "NotStarted",
                  "Expired",
                  "Aborted",
                  "Discontinuing",
                  "Queued",
                  "Paused",
                  "ResourceWaiting",
                  "InterventionWaiting",
                  "ApprovalWaiting",
                  "WaitStepRunning",
                  "QueuedLicenseLimitReached",
                  "QueuedExecutionConcurrencyReached",
                  "Success",
                  "Suspended",
                  "Skipped",
                  "Pausing",
                  "ApprovalRejected",
                  "InputWaiting",
                  "AbortedByFreeze",
                  "NOT_STARTED",
                  "INTERVENTION_WAITING",
                  "APPROVAL_WAITING",
                  "APPROVAL_REJECTED",
                  "Waiting"
                ]
              }
            }
          },
          {
            "name": "myDeployments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Returns a List of Pipeline Executions with Specific Filters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterProperties"
              },
              "examples": {
                "List": {
                  "summary": "Sample List Pipeline Executions",
                  "description": "Sample List Pipeline Executions JSON Payload",
                  "value": {
                    "filterType": "PipelineExecution"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns all the Executions of pipelines for given filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPagePipelineExecutionSummary"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPagePipelineExecutionSummary"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipeline/execute/interrupt/{planExecutionId}": {
      "put": {
        "tags": [
          "Pipeline Execute"
        ],
        "summary": "Execute an Interrupt",
        "description": "Executes an Interrupt on a Given Execution",
        "operationId": "putHandleInterrupt",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interruptType",
            "in": "query",
            "description": "The Interrupt type needed to be applied to the execution. Choose a value from the enum list.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "AbortAll",
                "Abort",
                "Pause",
                "Resume",
                "Ignore",
                "StageRollback",
                "StepGroupRollback",
                "MarkAsSuccess",
                "ExpireAll",
                "Retry"
              ]
            }
          },
          {
            "name": "planExecutionId",
            "in": "path",
            "description": "The Pipeline Execution Id on which the Interrupt needs to be applied.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Takes a possible Interrupt value and applies it onto the execution referred by the planExecutionId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInterruptResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInterruptResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipeline/execute/{identifier}/inputSetList": {
      "post": {
        "tags": [
          "Pipeline Execute"
        ],
        "summary": "Execute a Pipeline with Input Set References",
        "description": "Execute a Pipeline with Input Set References",
        "operationId": "postPipelineExecuteWithInputSetList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moduleType",
            "in": "query",
            "description": "Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Pipeline identifier for the entity. Identifier of the Pipeline to be executed",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeInputSetRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/MergeInputSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns pipeline execution details V2",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPlanExecutionResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPlanExecutionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/api/pipeline/execute/{identifier}": {
      "post": {
        "tags": [
          "Pipeline Execute"
        ],
        "summary": "Execute a Pipeline with Runtime Input YAML",
        "description": "Execute a Pipeline with Runtime Input YAML",
        "operationId": "postPipelineExecuteWithInputSetYaml",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moduleType",
            "in": "query",
            "description": "Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Pipeline identifier for the entity. Identifier of the Pipeline to be executed",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useFQNIfError",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "notifyOnlyUser",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Enter Runtime Input YAML if the Pipeline contains Runtime Inputs. Template for this can be Fetched from /inputSets/template API.",
          "content": {
            "application/yaml": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "Execute Runtime Input YAML": {
                  "summary": "Execute Pipeline with Runtime Input YAML",
                  "description": "Execute Runtime Input YAML",
                  "value": "pipeline:\n  identifier: \"Sample_Pipeline\"\n  stages:\n      - stage:\n          identifier: \"Sample_Stage\"\n          type: \"Approval\"\n          spec:\n              execution:\n                  steps:\n                      - step:\n                          identifier: \"Approval_Step\"\n                          type: \"HarnessApproval\"\n                          spec:\n                            approvers:\n                              userGroups: \"<+input>\"\n                      - step:\n                          identifier: \"Shellscript_Step\"\n                          type: \"ShellScript\"\n                          spec:\n                            source:\n                              type: \"Inline\"\n                              spec:\n                                script: \"<+input>\"\n      - stage:\n          identifier: \"Sample_Deploy_Stage\"\n          type: \"Deployment\"\n          spec:\n            serviceConfig:\n              serviceRef: \"<+input>\"\n            infrastructure:\n                environmentRef: \"<+input>\"\n                infrastructureDefinition:\n                              type: \"KubernetesDirect\"\n                              spec:\n                                connectorRef: \"<+input>\"\n                                namespace: \"<+input>\"\n"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineError"
                }
              }
            }
          },
          "default": {
            "description": "Returns pipeline execution details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPlanExecutionResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPlanExecutionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/acl": {
      "post": {
        "tags": [
          "Access Control List"
        ],
        "summary": "Check Permission",
        "description": "Check for permission on resource(s) for a principal",
        "operationId": "getAccessControlList",
        "requestBody": {
          "description": "These are the checks to perform for Access Control.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessCheckRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/AccessCheckRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Result of the access check request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccessCheckResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOAccessCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "List Permissions",
        "description": "Get all permissions in a scope or all permissions in the system",
        "operationId": "getPermissionList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeFilterDisabled",
            "in": "query",
            "description": "This is to enable or disable filtering by scope. The default value is false. If the value is true, all the permissions in the system are fetched.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "List of all permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListPermissionResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListPermissionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/permissions/resourcetypes": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "List Resource Types",
        "description": "Get all resource types for permissions in a scope or in the system.",
        "operationId": "getPermissionResourceTypesList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeFilterDisabled",
            "in": "query",
            "description": "This is to enable or disable filtering by scope. The default value is false. If the value is true, all the permissions in the system are fetched.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "List of resource types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSetString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSetString"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roleassignments/multi": {
      "post": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "Create Role Assignments",
        "description": "Create multiple role assignments in a scope. Returns all successfully created role assignments. Ignores failures and duplicates.",
        "operationId": "postRoleAssignments",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of role assignments to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentCreateRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Successfully created role assignments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListRoleAssignmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListRoleAssignmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roleassignments": {
      "get": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "List Role Assignments",
        "description": "List role assignments in the given scope",
        "operationId": "getRoleAssignmentList",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of role assignments in the given scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseRoleAssignmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseRoleAssignmentResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "Create Role Assignment",
        "description": "Creates role assignment within the specified scope.",
        "operationId": "postRoleAssignment",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "These are details for the role assignment to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignment"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "These are details of the created role assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roleassignments/{identifier}": {
      "get": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "Get Role Assignment",
        "description": "Get an existing role assignment by identifier",
        "operationId": "getRoleAssignment",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for role assignment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Get an existing role assignment by identifier in the given scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "Delete Role Assignment",
        "description": "Delete an existing role assignment by identifier",
        "operationId": "deleteRoleAssignment",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for role assignment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Deleted role assignment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roleassignments/filter": {
      "post": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "List Role Assignments by filter",
        "description": "List role assignments in the scope according to the given filter",
        "operationId": "getFilteredRoleAssignmentList",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter role assignments based on multiple parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of role assignments in the scope according to the given filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseRoleAssignmentResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseRoleAssignmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roleassignments/aggregate": {
      "post": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "List Aggregated Role Assignments by filter",
        "description": "List role assignments in the scope according to the given filter with added metadata",
        "operationId": "getRoleAssignmentAggregateList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filter role assignments based on multiple parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of role assignments in the scope according to the given filter with added metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentAggregateResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentAggregateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roleassignments/v2/filter": {
      "post": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "List Role Assignments by scope filter",
        "description": "List role assignments in the scope according to the given filter",
        "operationId": "getFilteredRoleAssignmentByScopeList",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentFilterV2"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentFilterV2"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of role assignments in the scope according to the given filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseRoleAssignmentAggregate"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseRoleAssignmentAggregate"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roleassignments/validate": {
      "post": {
        "tags": [
          "Role Assignments"
        ],
        "summary": "Validate Role Assignment",
        "description": "Check whether a proposed role assignment is valid.",
        "operationId": "validateRoleAssignment",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the details of the role assignment for validation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentValidationRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignmentValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "This is the result of the role assignment validation request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentValidationResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleAssignmentValidationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "List Roles",
        "description": "List roles in the given scope",
        "operationId": "getRoleList",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search roles by name/identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Paginated list of roles in the given scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseRoleResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseRoleResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create Role",
        "description": "Create a Custom Role in a scope",
        "operationId": "postRole",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Role entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Created Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authz/api/roles/{identifier}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Role",
        "description": "Get a Role by identifier",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Queried Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update Role",
        "description": "Update a Custom Role by identifier",
        "operationId": "putRole",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated Role entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Updated Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete Role",
        "description": "Delete a Custom Role in a scope",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier of the Role",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzFailure"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzError"
                }
              }
            }
          },
          "default": {
            "description": "Deleted Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORoleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/resourcegroup/api/resourcegroup": {
      "get": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Get list of resource groups",
        "operationId": "getResourceGroupList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Details of all the resource groups having this string in their name or identifier will be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "This contains a list of Resource Groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseResourceGroupResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseResourceGroupResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Create a resource group",
        "operationId": "createResourceGroup",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains the details required to create a Resource Group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "Successfully created a Resource Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/resourcegroup/api/resourcegroup/{identifier}": {
      "get": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Get a resource group by identifier",
        "operationId": "getResourceGroup",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "This is the Identifier of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "This returns a Resource Group specific to the Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Update a resource group",
        "operationId": "updateResourceGroup",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains the details required to create a Resource Group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupRequest"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "Successfully updated a Resource Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Delete a resource group",
        "operationId": "deleteResourceGroup",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "Successfully deleted a Resource Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/resourcegroup/api/resourcegroup/filter": {
      "post": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "This fetches a filtered list of Resource Groups",
        "operationId": "getFilterResourceGroupList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Filter Resource Groups based on multiple parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "This fetches the list of Resource Groups filtered by multiple fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseResourceGroupResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseResourceGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/resourcegroup/api/resourcetype": {
      "get": {
        "tags": [
          "Harness Resource Type"
        ],
        "summary": "Gets all resource types available at this scope",
        "operationId": "getResourceTypes",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "Returns all resource types available at this scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceType"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceType"
                }
              }
            }
          }
        }
      }
    },
    "/resourcegroup/api/v2/resourcegroup": {
      "get": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "List Resource Groups",
        "description": "Get list of resource groups",
        "operationId": "getResourceGroupListV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Details of all the resource groups having this string in their name or identifier will be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "This contains a list of Resource Groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseResourceGroupV2Response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseResourceGroupV2Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Create Resource Group",
        "description": "Create a resource group",
        "operationId": "createResourceGroupV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains the details required to create a Resource Group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupV2Request"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupV2Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "Successfully created a Resource Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupV2Response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupV2Response"
                }
              }
            }
          }
        }
      }
    },
    "/resourcegroup/api/v2/resourcegroup/{identifier}": {
      "get": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Get Resource Group",
        "description": "Get a resource group by identifier",
        "operationId": "getResourceGroupV2",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "This returns a Resource Group specific to the Identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupV2Response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupV2Response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Update Resource Group",
        "description": "Update a resource group",
        "operationId": "updateResourceGroup_1",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains the details required to create a Resource Group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupV2Request"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupV2Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "Successfully updated a Resource Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupV2Response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOResourceGroupV2Response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "Delete Resource Group",
        "description": "Delete a resource group",
        "operationId": "deleteResourceGroupV2",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "Successfully deleted a Resource Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/resourcegroup/api/v2/resourcegroup/filter": {
      "post": {
        "tags": [
          "Harness Resource Group"
        ],
        "summary": "List Resource Groups by filter",
        "description": "This fetches a filtered list of Resource Groups",
        "operationId": "getFilterResourceGroupListV2",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Filter Resource Groups based on multiple parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupFilter"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/ResourceGroupFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcegroupError"
                }
              }
            }
          },
          "default": {
            "description": "This fetches the list of Resource Groups filtered by multiple fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseResourceGroupV2Response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseResourceGroupV2Response"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/anomaly/summary": {
      "post": {
        "tags": [
          "Cloud Cost Anomalies"
        ],
        "summary": "List Anomalies",
        "description": "Fetch the result of anomaly query",
        "operationId": "getAnomaliesSummary",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Anomaly Filter Properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyFilterProperties"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Anomaly Query result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListAnomalySummary"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/anomaly/filter-values": {
      "post": {
        "tags": [
          "Cloud Cost Anomalies"
        ],
        "summary": "Returns the list of distinct values for all the specified Anomaly fields.",
        "description": "Returns the list of distinct values for all the specified Anomaly fields.",
        "operationId": "anomalyFilterValues",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of Anomaly columns whose unique values will be fetched",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of distinct values for all the specified Anomaly fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListFilterStats"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/anomaly": {
      "post": {
        "tags": [
          "Cloud Cost Anomalies"
        ],
        "summary": "List Anomalies",
        "description": "Fetch the list of anomalies reported according to the filters applied",
        "operationId": "listAnomalies",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Anomaly Filter Properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyFilterProperties"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "List of Anomalies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListAnomalyData"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/anomaly/perspective/{perspectiveId}": {
      "post": {
        "tags": [
          "Cloud Cost Anomalies"
        ],
        "summary": "List Anomalies for Perspective",
        "description": "Fetch anomalies for perspective",
        "operationId": "listPerspectiveAnomalies",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "path",
            "description": "Unique identifier for perspective",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Perspective Query",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PerspectiveQueryDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "List of Anomalies for Perspective",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListPerspectiveAnomalyData"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/anomaly/feedback": {
      "put": {
        "tags": [
          "Cloud Cost Anomalies"
        ],
        "summary": "Report Anomaly feedback",
        "description": "Mark an anomaly as true/false anomaly",
        "operationId": "reportAnomalyFeedback",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anomalyId",
            "in": "query",
            "description": "Unique identifier for perspective",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Feedback",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyFeedback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Report Anomaly Feedback",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/bi-dashboards": {
      "get": {
        "tags": [
          "Cloud Cost BI Dashboards"
        ],
        "summary": "List all the BI Dashboards for CCM",
        "description": "List all the Cloud Cost BI Dashboards.",
        "operationId": "listBIDashboards",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of all BI Dashboards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListBIDashboardSummary"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/budgets/{id}": {
      "get": {
        "tags": [
          "Cloud Cost Budgets"
        ],
        "summary": "Fetch Budget details",
        "description": "Fetch details of a Cloud Cost Budget for the given Budget ID.",
        "operationId": "getBudget",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the budget",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Get a Budget by it's identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBudget"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cloud Cost Budgets"
        ],
        "summary": "Update an existing budget",
        "description": "Update an existing Cloud Cost Budget for the given Budget ID.",
        "operationId": "updateBudget",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the budget",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Budget object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a generic string message when the operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cloud Cost Budgets"
        ],
        "summary": "Clone a budget",
        "description": "Clone a Cloud Cost Budget using the given Budget ID.",
        "operationId": "cloneBudget",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the budget",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cloneName",
            "in": "query",
            "description": "Name of the new budget",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the identifier string of the new Budget created using clone operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cloud Cost Budgets"
        ],
        "summary": "Delete a budget",
        "description": "Delete a Cloud Cost Budget for the given Budget ID.",
        "operationId": "deleteBudget",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the budget",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a text message whether the operation was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/budgets/{id}/costDetails": {
      "get": {
        "tags": [
          "Cloud Cost Budgets"
        ],
        "summary": "Fetch the cost details of a Budget",
        "description": "Fetch the cost details of a Cloud Cost Budget for the given Budget ID.",
        "operationId": "getCostDetails",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the Budget",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "breakdown",
            "in": "query",
            "description": "MONTHLY/YEARLY breakdown. The default value is YEARLY",
            "schema": {
              "type": "string",
              "description": "Whether the Yearly budget breakdown is yearly or monthly",
              "enum": [
                "YEARLY",
                "MONTHLY"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the cost data of a Budget",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBudgetData"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/budgets": {
      "get": {
        "tags": [
          "Cloud Cost Budgets"
        ],
        "summary": "List all the Budgets",
        "description": "List all the Cloud Cost Budgets.",
        "operationId": "listBudgets",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of all Budgets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListBudget"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cloud Cost Budgets"
        ],
        "summary": "Create a Budget",
        "description": "Create a Budget to set and receive alerts when your costs exceed (or are forecasted to exceed) your budget amount.",
        "operationId": "createBudget",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Budget definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the ID string of the new Budget created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/budgets/perspectiveBudgets": {
      "get": {
        "tags": [
          "Cloud Cost Budgets"
        ],
        "summary": "List all the Budgets associated with a Perspective",
        "description": "List all the Cloud Cost Budgets associated for the given Perspective ID.",
        "operationId": "listBudgetsForPerspective",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "Unique identifier for the Perspective",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Budgets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListBudget"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/ccmK8sMeta": {
      "post": {
        "tags": [
          "Cloud Cost K8S Connectors Metadata"
        ],
        "summary": "Get CCM K8S Metadata",
        "description": "Get CCM K8S Metadata ",
        "operationId": "ccmK8sMeta",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing Cost Access K8s connector identifiers",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CcmK8sMetaDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns list of connector identifiers with their health metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCcmK8sMetaInfoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/costdetails/overview": {
      "post": {
        "tags": [
          "Cloud Cost Details"
        ],
        "summary": "Returns an overview of the cost",
        "description": "Returns total cost, cost trend, and the time period based on the specified query parameters.",
        "operationId": "costdetailoverview",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "Perspective identifier of the cost details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start time of the cost details. Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z'.  Defaults to Today - 7days",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End time of the cost details. Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z'.  Defaults to Today",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Cost details query parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostDetailsQueryParams"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns total cost, cost trend, and the time period based on the specified query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCostOverview"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/costdetails/clusterData": {
      "post": {
        "tags": [
          "Cloud Cost Details"
        ],
        "summary": "Returns cluster data in a tabular format",
        "description": "Returns cluster data based on the specified query parameters.",
        "operationId": "clusterData",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start time of the cost details. Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z'.  Defaults to Today - 7days",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End time of the cost details. Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z'.  Defaults to Today",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Cost details query parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterCostDetailsQueryParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns cluster data in a tabular format based on the specified query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListClusterCostDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/costdetails/tabularformat": {
      "post": {
        "tags": [
          "Cloud Cost Details"
        ],
        "summary": "Returns cost details in a tabular format",
        "description": "Returns cost details in a tabular format based on the specified query parameters.",
        "operationId": "costdetailtabular",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "Perspective identifier of the cost details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start time of the cost details. Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z'.  Defaults to Today - 7days",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End time of the cost details. Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z'.  Defaults to Today",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Cost details query parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostDetailsQueryParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns cost details in a tabular format based on the specified query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPerspectiveEntityStatsData"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/costdetails/timeseriesformat": {
      "post": {
        "tags": [
          "Cloud Cost Details"
        ],
        "summary": "Returns cost details in a time series format",
        "description": "Returns cost details in a time series format based on the specified query parameters.",
        "operationId": "costdetailttimeseries",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "Perspective identifier of the cost details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start time of the cost details. Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z'.  Defaults to Today - 7days",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End time of the cost details. Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z'.  Defaults to Today",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Cost details query parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostDetailsQueryParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns cost details in a time series format based on the specified query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPerspectiveTimeSeriesData"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/enforcement": {
      "post": {
        "tags": [
          "RuleEnforcement"
        ],
        "summary": "Add a new rule Enforcement ",
        "operationId": "addRuleEnforcement",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing Rule Enforcement object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRuleEnforcementDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns newly created rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORuleEnforcement"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORuleEnforcement"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/enforcement/count": {
      "post": {
        "tags": [
          "RuleEnforcement"
        ],
        "summary": "Fetch Rule Enforcement count for account",
        "description": "Fetch Rule Enforcement count",
        "operationId": "getRuleEnforcementCount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing  Rule Enforcement count object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnforcementCountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns List of rules  Enforcement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEnforcementCount"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/execution/details": {
      "post": {
        "tags": [
          "RuleEnforcement"
        ],
        "summary": "Fetch Rule Enforcement count for account",
        "description": "execution Detail",
        "operationId": "CcmgetExecutionDetail",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing  Rule Enforcement count object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionDetailDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns execution Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOExecutionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/enforcement/list": {
      "post": {
        "tags": [
          "RuleEnforcement"
        ],
        "summary": "Fetch Rule Enforcement for account",
        "description": "Fetch Rule Enforcement ",
        "operationId": "getRuleEnforcement",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing  Rule Enforcement  object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRuleEnforcementDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns List of rules  Enforcement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListRuleEnforcement"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/rule/{ruleID}": {
      "delete": {
        "tags": [
          "Rule"
        ],
        "summary": "Delete a rule",
        "description": "Delete a Rule for the given a ID.",
        "operationId": "deleteRule",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleID",
            "in": "path",
            "description": "Unique identifier for the rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "A boolean whether the delete was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/enqueue": {
      "post": {
        "tags": [
          "Rule"
        ],
        "summary": "Enqueues job for execution",
        "description": "Enqueues job for execution.",
        "operationId": "enqueueGovernanceJob",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for queuing the governance job",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GovernanceJobEnqueueDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns success when job is enqueued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOGovernanceEnqueueResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/entitySchema": {
      "get": {
        "tags": [
          "Rule"
        ],
        "summary": "Get Schema for entity",
        "description": "Get Schema for entity",
        "operationId": "getSchemaForEntity",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "CreatePR",
                "MergePR",
                "Projects",
                "Pipelines",
                "PipelineSteps",
                "Http",
                "Email",
                "JiraCreate",
                "JiraUpdate",
                "JiraApproval",
                "HarnessApproval",
                "CustomApproval",
                "Barrier",
                "Queue",
                "FlagConfiguration",
                "ShellScript",
                "K8sCanaryDeploy",
                "K8sApply",
                "K8sBlueGreenDeploy",
                "K8sRollingDeploy",
                "K8sRollingRollback",
                "K8sScale",
                "K8sDelete",
                "K8sBGSwapServices",
                "K8sCanaryDelete",
                "TerraformApply",
                "TerraformPlan",
                "TerraformDestroy",
                "TerraformRollback",
                "HelmDeploy",
                "HelmRollback",
                "Connectors",
                "Secrets",
                "Files",
                "Service",
                "Environment",
                "EnvironmentGroup",
                "InputSets",
                "CvConfig",
                "Verify",
                "Delegates",
                "DelegateConfigurations",
                "CvVerificationJob",
                "IntegrationStage",
                "IntegrationSteps",
                "SecurityStage",
                "SecuritySteps",
                "CvKubernetesActivitySource",
                "DeploymentSteps",
                "DeploymentStage",
                "ApprovalStage",
                "PipelineStage",
                "FeatureFlagStage",
                "Template",
                "TemplateStage",
                "CustomDeployment",
                "Triggers",
                "MonitoredService",
                "GitRepositories",
                "FeatureFlags",
                "ServiceNowApproval",
                "ServiceNowCreate",
                "ServiceNowUpdate",
                "ServiceNowImportSet",
                "GovernancePolicies",
                "Policy",
                "Run",
                "RunTests",
                "Plugin",
                "RestoreCacheGCS",
                "RestoreCacheS3",
                "SaveCacheGCS",
                "SaveCacheS3",
                "Security",
                "AquaTrivy",
                "AWSECR",
                "Bandit",
                "BlackDuck",
                "Brakeman",
                "Burp",
                "Checkmarx",
                "Clair",
                "DataTheorem",
                "DockerContentTrust",
                "External",
                "FortifyOnDemand",
                "Grype",
                "JfrogXray",
                "Mend",
                "Metasploit",
                "Nessus",
                "NexusIQ",
                "Nikto",
                "Nmap",
                "Openvas",
                "Owasp",
                "PrismaCloud",
                "Prowler",
                "Qualys",
                "Reapsaw",
                "ShiftLeft",
                "Sniper",
                "Snyk",
                "Sonarqube",
                "Sysdig",
                "Tenable",
                "Veracode",
                "Zap",
                "GitClone",
                "ArtifactoryUpload",
                "GCSUpload",
                "S3Upload",
                "BuildAndPushGCR",
                "BuildAndPushECR",
                "BuildAndPushDockerRegistry",
                "CreateStack",
                "DeleteStack",
                "ServerlessAwsLambdaDeploy",
                "ServerlessAwsLambdaRollback",
                "CustomStage",
                "RollbackStack",
                "Infrastructure",
                "Command",
                "StrategyNode",
                "AzureSlotDeployment",
                "AzureTrafficShift",
                "FetchInstanceScript",
                "AzureSwapSlot",
                "AzureWebAppRollback",
                "JenkinsBuild",
                "EcsRollingDeploy",
                "EcsRollingRollback",
                "EcsCanaryDeploy",
                "EcsCanaryDelete",
                "AzureCreateARMResource",
                "BuildAndPushACR",
                "AzureCreateBPResource",
                "AzureARMRollback",
                "Background",
                "Wait",
                "ArtifactSource",
                "EcsBlueGreenCreateService",
                "EcsBlueGreenSwapTargetGroups",
                "EcsBlueGreenRollback",
                "ShellScriptProvision",
                "Freeze",
                "GitOpsUpdateReleaseRepo",
                "GitOpsFetchLinkedApps",
                "EcsRunTask",
                "Chaos",
                "ElastigroupDeploy",
                "ElastigroupRollback",
                "Action",
                "ElastigroupSetup",
                "Bitrise",
                "TerragruntPlan",
                "TerragruntApply",
                "TerragruntDestroy",
                "TerragruntRollback",
                "IACMStage",
                "IACMStep",
                "IACM",
                "Container",
                "IACMTerraformPlan",
                "IACMTemplate",
                "ElastigroupBGStageSetup",
                "ElastigroupSwapRoute",
                "AsgCanaryDeploy",
                "AsgCanaryDelete",
                "SwapRoutes",
                "SwapRollback",
                "AppResize",
                "AppRollback",
                "CanaryAppSetup",
                "BGAppSetup",
                "BasicAppSetup",
                "TanzuCommand",
                "AsgRollingDeploy",
                "AsgRollingRollback",
                "GovernanceRuleAWS",
                "TasRollingDeploy",
                "TasRollingRollback",
                "K8sDryRun",
                "AsgBlueGreenSwapService",
                "AsgBlueGreenDeploy",
                "AsgBlueGreenRollback"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "enum": [
                  "account",
                  "org",
                  "project",
                  "unknown"
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOJsonNode"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/rule/list": {
      "post": {
        "tags": [
          "Rule"
        ],
        "summary": "Fetch rules for account",
        "description": "Fetch rules ",
        "operationId": "getPolicies",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing rule object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns List of rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORuleList"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/governance/rule": {
      "put": {
        "tags": [
          "Rule"
        ],
        "summary": "Update a Rule",
        "description": "Update a Rule",
        "operationId": "updateRule",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing rule object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRuleDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "update an existing Rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORule"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspectiveFolders/create": {
      "post": {
        "tags": [
          "Cloud Cost Perspectives Folders"
        ],
        "summary": "Create a Perspective folder",
        "description": "Create a Perspective Folder.",
        "operationId": "createPerspectiveFolder",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing Perspective's CEViewFolder object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerspectiveFolderDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a created CEViewFolder object with all its details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCEViewFolder"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspectiveFolders/{folderId}": {
      "delete": {
        "tags": [
          "Cloud Cost Perspectives Folders"
        ],
        "summary": "Delete a folder",
        "description": "Delete a Folder for the given Folder ID.",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "Unique identifier for the Perspective folder",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "A boolean whether the delete was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspectiveFolders": {
      "get": {
        "tags": [
          "Cloud Cost Perspectives Folders"
        ],
        "summary": "Fetch folders for an account",
        "description": "Fetch folders given an accountId",
        "operationId": "getFolders",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns List of CEViewFolders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListCEViewFolder"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cloud Cost Perspectives Folders"
        ],
        "summary": "Update a folder",
        "description": "Update a folder",
        "operationId": "updateFolder",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing ceViewFolder object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CEViewFolder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "CEViewFolder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCEViewFolder"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspectiveFolders/{folderId}/perspectives": {
      "get": {
        "tags": [
          "Cloud Cost Perspectives Folders"
        ],
        "summary": "Return details of all the Perspectives",
        "description": "Return details of all the Perspectives for the given account ID and folder",
        "operationId": "getAllFolderPerspectives",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "Unique identifier for folder",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a List of Perspectives",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListPerspective"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspectiveFolders/movePerspectives": {
      "post": {
        "tags": [
          "Cloud Cost Perspectives Folders"
        ],
        "summary": "Move a Perspective",
        "description": "Move a perspective from a folder to another.",
        "operationId": "movePerspectives",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing perspectiveIds to be moved and newFolderId",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MovePerspectiveDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the new CEView object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListCEView"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspectiveReport/{accountIdentifier}": {
      "get": {
        "tags": [
          "Cloud Cost Perspective Reports"
        ],
        "summary": "Fetch details of a cost Report",
        "description": "Fetch cost Report details for the given Report ID or a Perspective ID.",
        "operationId": "getReportSetting",
        "parameters": [
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "Unique identifier for the Perspective",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportId",
            "in": "query",
            "description": "Unique identifier for the Report",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a list of Report Schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListCEReportSchedule"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cloud Cost Perspective Reports"
        ],
        "summary": "Update a cost Perspective Report",
        "description": "Update cost Perspective Reports.",
        "operationId": "updateReportSetting",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "CEReportSchedule object to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CEReportSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a list of Report Schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListCEReportSchedule"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cloud Cost Perspective Reports"
        ],
        "summary": "Create a schedule for a Report",
        "description": "Create a report schedule for the given Report ID or a Perspective ID.",
        "operationId": "createReportSetting",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "CEReportSchedule object to be saved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CEReportSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a list of Report Schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListCEReportSchedule"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cloud Cost Perspective Reports"
        ],
        "summary": "Delete cost Perspective report",
        "description": "Delete cost Perspective Report for the given Report ID or a Perspective ID.",
        "operationId": "deleteReportSetting",
        "parameters": [
          {
            "name": "reportId",
            "in": "query",
            "description": "Unique identifier for the Report",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "Unique identifier for the Perspective",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a generic string message when the operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspective": {
      "get": {
        "tags": [
          "Cloud Cost Perspectives"
        ],
        "summary": "Fetch details of a Perspective",
        "description": "Fetch details of a Perspective for the given Perspective ID.",
        "operationId": "getPerspective",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "Unique identifier for the Perspective",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a CEView object with all the rules and filters, returns null if no Perspective exists for that particular identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCEView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cloud Cost Perspectives"
        ],
        "summary": "Update a Perspective",
        "description": "Update a Perspective. It accepts a CEView object and upserts it using the uuid mentioned in the definition.",
        "operationId": "updatePerspective",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Perspective's CEView object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CEView"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Upserted CEView object with all the rules and filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCEView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cloud Cost Perspectives"
        ],
        "summary": "Create a Perspective",
        "description": "Create a Perspective. You can set the clone parameter as true to clone a Perspective.",
        "operationId": "createPerspective",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clone",
            "in": "query",
            "description": "Set the clone parameter as true to clone a Perspective.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing Perspective's CEView object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CEView"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a created CEView object with all the rules and filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCEView"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cloud Cost Perspectives"
        ],
        "summary": "Delete a Perspective",
        "description": "Delete a Perspective for the given Perspective ID.",
        "operationId": "deletePerspective",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "Unique identifier for the Perspective",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "A string text message whether the delete was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspective/getAllPerspectives": {
      "get": {
        "tags": [
          "Cloud Cost Perspectives"
        ],
        "summary": "Return details of all the Perspectives",
        "description": "Return details of all the Perspectives for the given account ID.",
        "operationId": "getAllPerspectives",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a List of Perspectives",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListPerspective"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspective/lastPeriodCost": {
      "get": {
        "tags": [
          "Cloud Cost Perspectives"
        ],
        "summary": "Get the last period cost for a Perspective",
        "description": "Get last period cost for a Perspective",
        "operationId": "getLastPeriodCost",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "The Perspective identifier for which we want the cost",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "The Start time (timestamp in millis) for the current period",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the cost",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "YEARLY"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a number having the cost of last period",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTODouble"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/perspective/lastYearMonthlyCost": {
      "get": {
        "tags": [
          "Cloud Cost Perspectives"
        ],
        "summary": "Get the last twelve month cost for a Perspective",
        "description": "Get last twelve month cost for a Perspective",
        "operationId": "getLastYearMonthlyCost",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perspectiveId",
            "in": "query",
            "description": "The Perspective identifier for which we want the cost",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "The Start time (timestamp in millis) for the current period",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Only support for YEARLY budget period",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "YEARLY"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only support for PREVIOUS_PERIOD_SPEND budget type",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Whether the Budget is based on a specified amount or based on previous month's actual spend",
              "enum": [
                "SPECIFIED_AMOUNT",
                "PREVIOUS_MONTH_SPEND",
                "PREVIOUS_PERIOD_SPEND"
              ]
            }
          },
          {
            "name": "breakdown",
            "in": "query",
            "description": "Only support for MONTHLY breakdown",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Whether the Yearly budget breakdown is yearly or monthly",
              "enum": [
                "YEARLY",
                "MONTHLY"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Return list of actual monthly budget cost and respective month in epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListValueDataPoint"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/details/ec2-instance": {
      "get": {
        "tags": [
          "Cloud Cost Recommendations Details"
        ],
        "summary": "Return EC2 Recommendation",
        "description": "Returns EC2 Recommendation details for the given Recommendation identifier.",
        "operationId": "ec2RecommendationDetail",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "EC2 Recommendation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the EC2 Recommendation for the given identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOEC2InstanceRecommendation"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/details/ecs-service": {
      "get": {
        "tags": [
          "Cloud Cost Recommendations Details"
        ],
        "summary": "Return ECS Recommendation",
        "description": "Returns ECS Recommendation details for the given Recommendation identifier.",
        "operationId": "ecsRecommendationDetail",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "ECS Recommendation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z' Defaults to Today-7days",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z' Defaults to Today",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bufferPercentage",
            "in": "query",
            "description": "Buffer Percentage defaults to zero",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the ECS Recommendation for the given identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOECSRecommendationDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/details/node-pool": {
      "get": {
        "tags": [
          "Cloud Cost Recommendations Details"
        ],
        "summary": "Return node pool Recommendation",
        "description": "Returns node pool Recommendation details for the given identifier.",
        "operationId": "nodeRecommendationDetail",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Node pool Recommendation identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns node pool Recommendation details for the given identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTONodeRecommendationDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/details/workload": {
      "get": {
        "tags": [
          "Cloud Cost Recommendations Details"
        ],
        "summary": "Return workload Recommendation",
        "description": "Returns workload Recommendation details for the given Recommendation identifier.",
        "operationId": "workloadRecommendationDetail",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Workload Recommendation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z' Defaults to Today-7days",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Should use org.joda.time.DateTime parsable format. Example, '2022-01-31', '2022-01-31T07:54Z' or '2022-01-31T07:54:51.264Z' Defaults to Today",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the workload Recommendation for the given identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOWorkloadRecommendationDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/overview/count": {
      "post": {
        "tags": [
          "Cloud Cost Recommendations"
        ],
        "summary": "Return the number of Recommendations",
        "description": "Returns the total number of Cloud Cost Recommendations based on the specified filters.",
        "operationId": "recommendationsCount",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "CCM Recommendations filter body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CCMRecommendationFilterProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the count of all Recommendations available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOInteger"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/overview/filter-values": {
      "post": {
        "tags": [
          "Cloud Cost Recommendations"
        ],
        "summary": "Return the list of filter values for the Recommendations",
        "description": "Returns the list of filter values for all the specified filters.",
        "operationId": "recommendationFilterValues",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Recommendation Filter Values Body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterValues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the values available for a filter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOListFilterStats"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/overview/list": {
      "post": {
        "tags": [
          "Cloud Cost Recommendations"
        ],
        "summary": "Return the list of Recommendations",
        "description": "Returns the list of Cloud Cost Recommendations for the specified filters.",
        "operationId": "listRecommendations",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "CCM Recommendations filter body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CCMRecommendationFilterProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Recommendations available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORecommendations"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/overview/mark-applied": {
      "post": {
        "tags": [
          "Cloud Cost Recommendations"
        ],
        "summary": "Return void",
        "description": "Mark recommendation as applied",
        "operationId": "markRecommendationApplied",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recommendationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns void.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOVoid"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/overview/stats": {
      "post": {
        "tags": [
          "Cloud Cost Recommendations"
        ],
        "summary": "Return Recommendations statistics",
        "description": "Returns the Cloud Cost Recommendations statistics for the specified filters.",
        "operationId": "recommendationStats",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "CCM Recommendations filter body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CCMRecommendationFilterProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the statistics of all Recommendations available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORecommendationOverviewStats"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/jira/create": {
      "post": {
        "tags": [
          "Cloud Cost Recommendation Jira"
        ],
        "summary": "Create jira for recommendation",
        "description": "Create jira for recommendation",
        "operationId": "createRecommendationJira",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing CCMJiraDetails",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CCMJiraCreateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a created CCMJiraDetails object with all the jira details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOCCMJiraDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/ignore-list/add": {
      "post": {
        "tags": [
          "Cloud Cost Recommendation Ignore List"
        ],
        "summary": "Add resources to recommendations ignore list",
        "description": "Add resources to recommendations ignore list",
        "operationId": "addRecommendationsIgnoreList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing IgnoreList",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendationsIgnoreResourcesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns ignore list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORecommendationsIgnoreList"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/ignore-list": {
      "get": {
        "tags": [
          "Cloud Cost Recommendation Ignore List"
        ],
        "summary": "Get resources in recommendations ignore list",
        "description": "Get resources in recommendations ignore list",
        "operationId": "getRecommendationsIgnoreList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns ignore list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORecommendationsIgnoreList"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/recommendation/ignore-list/remove": {
      "post": {
        "tags": [
          "Cloud Cost Recommendation Ignore List"
        ],
        "summary": "Remove resources from recommendations ignore list",
        "description": "Remove resources from recommendations ignore list",
        "operationId": "removeRecommendationsIgnoreList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body containing IgnoreList",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendationsIgnoreResourcesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns ignore list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTORecommendationsIgnoreList"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/filters": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "List Filters",
        "description": "Lists Filters for the given criteria.",
        "operationId": "CcmgetConnectorListV2",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. If left empty, default value of 0 is assumed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. If left empty, default value of 100 is assumed",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Filter"
        ],
        "summary": "Update a Filter",
        "description": "Updates the filter for the given ID.",
        "operationId": "CcmupdateFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated Filter. This should have all the fields not just the updated ones",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Create a Filter",
        "description": "Creates a Filter.",
        "operationId": "CcmpostFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Connector to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/filters/{identifier}": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Return Filter Details",
        "description": "Returns the settings of a filter for the given ID.",
        "operationId": "CcmgetFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns Filter having filterIdentifier as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Filter"
        ],
        "summary": "Delete a Filter",
        "description": "Deletes a filter for the given ID.",
        "operationId": "CcmdeleteFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Boolean status whether request was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/usage/CD/serviceInstancesLicense": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Gets License Usage By Module, Timestamp, and Account Identifier",
        "operationId": "CcmgetCDLicenseUsageForServiceInstances",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account id to get the license usage.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a license usage object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceInstanceUsageDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/usage/CD/servicesLicense": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Gets License Usage By Module, Timestamp, and Account Identifier",
        "operationId": "CcmgetCDLicenseUsageForServices",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account id to get the license usage.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a license usage object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOServiceUsageDTO"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/usage/{module}": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Gets License Usage By Module, Timestamp, and Account Identifier",
        "operationId": "CcmgetLicenseUsage",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account id to get the license usage.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module",
            "in": "path",
            "description": "A Harness platform module.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "CDLicenseType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a license usage object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOLicenseUsage"
                }
              }
            }
          }
        }
      }
    },
    "/ccm/api/usage/cd/active-services": {
      "post": {
        "tags": [
          "Usage"
        ],
        "summary": "List Active Services with instances, last deployed and licenses consumed details on Account, Organization and Project level",
        "operationId": "CcmlistCDActiveServices",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "maximum": 50,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Active Services Filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActiveServicesFilterParams"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/CcmError"
                }
              }
            }
          },
          "default": {
            "description": "Returns a list of active services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageActiveService"
                }
              }
            }
          }
        }
      }
    },
    "/cf/admin/apikey": {
      "get": {
        "description": "Returns all the API Keys for an Environment",
        "operationId": "GetAllAPIKeys",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/APIKeysResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns API Keys for an Environment",
        "tags": [
          "API Keys"
        ]
      },
      "post": {
        "description": "Creates an API key for the given Environment",
        "operationId": "AddAPIKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/APIKeyRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/APIKeyResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Creates an API key for the given Environment",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/cf/admin/apikey/{identifier}": {
      "delete": {
        "description": "Deletes an API key for the given identifier",
        "operationId": "DeleteAPIKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Deletes an API Key",
        "tags": [
          "API Keys"
        ]
      },
      "get": {
        "description": "Returns all the API Keys for the given identifier",
        "operationId": "GetAPIKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/APIKeyResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns API keys",
        "tags": [
          "API Keys"
        ]
      },
      "put": {
        "description": "Updates an API key for the given identifier",
        "operationId": "UpdateAPIKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/APIKeyUpdateRequest"
        },
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Updates an API Key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/cf/admin/features": {
      "get": {
        "description": "Returns all the Feature Flag details for the given project",
        "operationId": "GetAllFeatures",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentOptionalQueryParam"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sortOrder"
          },
          {
            "$ref": "#/components/parameters/sortByField"
          },
          {
            "$ref": "#/components/parameters/nameQueryParam"
          },
          {
            "$ref": "#/components/parameters/identifierQueryParam"
          },
          {
            "$ref": "#/components/parameters/archivedQueryParam"
          },
          {
            "$ref": "#/components/parameters/kindQueryParam"
          },
          {
            "$ref": "#/components/parameters/targetOptionalParam"
          },
          {
            "$ref": "#/components/parameters/targetFilterOptionalParam"
          },
          {
            "$ref": "#/components/parameters/metricsOptionalParam"
          },
          {
            "$ref": "#/components/parameters/featuresOptionalParam"
          },
          {
            "$ref": "#/components/parameters/excludedFeaturesOptionalParam"
          },
          {
            "$ref": "#/components/parameters/flagStatus"
          },
          {
            "$ref": "#/components/parameters/flagLifetime"
          },
          {
            "$ref": "#/components/parameters/flagEnabled"
          },
          {
            "$ref": "#/components/parameters/flagCounts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FeaturesResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns all Feature Flags for the project",
        "tags": [
          "Feature Flags"
        ]
      },
      "post": {
        "description": "Creates a Feature Flag in the Project",
        "operationId": "CreateFeatureFlag",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FeatureFlagRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/FeatureEditResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "424": {
            "$ref": "#/components/responses/GitSyncError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Creates a Feature Flag",
        "tags": [
          "Feature Flags"
        ]
      }
    },
    "/cf/admin/features/{identifier}": {
      "delete": {
        "description": "Delete Feature Flag for the given identifier and account ID",
        "operationId": "DeleteFeatureFlag",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/commitMsgQueryParam"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "424": {
            "$ref": "#/components/responses/GitSyncError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a Feature Flag",
        "tags": [
          "Feature Flags"
        ]
      },
      "get": {
        "description": "Returns details such as Variation name, identifier etc for the given Feature Flag",
        "operationId": "GetFeatureFlag",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentOptionalQueryParam"
          },
          {
            "$ref": "#/components/parameters/metricsOptionalParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FeatureResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns a Feature Flag",
        "tags": [
          "Feature Flags"
        ]
      },
      "patch": {
        "description": "This operation is used to modify a Feature Flag.  The request body can include one or more instructions that can modify\nflag attributes such as the state (off|on), the variations that are returned and serving rules.\nFor example if you want to turn a flag off you can use this opeartion and send the setFeatureFlagState\n\n{\n  \"kind\": \"setFeatureFlagState\",\n  \"parameters\": {\n    \"state\": \"off\"\n  }\n}\n",
        "operationId": "PatchFeature",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentOptionalQueryParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FeaturePatchRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FeatureEditResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "424": {
            "$ref": "#/components/responses/GitSyncError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Updates a Feature Flag",
        "tags": [
          "Feature Flags"
        ]
      }
    },
    "/cf/admin/segments": {
      "get": {
        "description": "Returns Target Group details for the given account",
        "operationId": "GetAllSegments",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sortOrder"
          },
          {
            "$ref": "#/components/parameters/sortByField"
          },
          {
            "$ref": "#/components/parameters/nameQueryParam"
          },
          {
            "$ref": "#/components/parameters/identifierQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SegmentsResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns all Target Groups",
        "tags": [
          "Target Groups"
        ]
      },
      "post": {
        "description": "Creates a Target Group in the given Project",
        "operationId": "CreateSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SegmentRequest"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Creates a Target Group",
        "tags": [
          "Target Groups"
        ]
      }
    },
    "/cf/admin/segments/{identifier}": {
      "delete": {
        "description": "Deletes a Target Group for the given ID",
        "operationId": "DeleteSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Deletes a Target Group",
        "tags": [
          "Target Groups"
        ]
      },
      "get": {
        "description": "Returns Target Group details for the given ID",
        "operationId": "GetSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SegmentResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns Target Group details for the given identifier",
        "tags": [
          "Target Groups"
        ]
      },
      "patch": {
        "description": "Updates a Target Group for the given identifier",
        "operationId": "PatchSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/identifier"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SegmentPatchRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SegmentResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Updates a Target Group",
        "tags": [
          "Target Groups"
        ]
      }
    },
    "/cf/admin/segments/{identifier}/available_flags": {
      "get": {
        "description": "Returns the list of Feature Flags that the Target Group can be added to.  This list will exclude any Feature Flag that the Target Group is already part of.",
        "operationId": "GetAvailableFlagsForSegment",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/safSortOrder"
          },
          {
            "$ref": "#/components/parameters/safSortByField"
          },
          {
            "$ref": "#/components/parameters/flagNameQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AvailableFlagResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns Feature Flags that are available to be added to the given Target Group",
        "tags": [
          "Target Groups"
        ]
      }
    },
    "/cf/admin/segments/{identifier}/flags": {
      "get": {
        "description": "Returns the details of a Feature Flag in a Target Group for the given identifier",
        "operationId": "GetSegmentFlags",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SegmentFlagsResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns Feature Flags in a Target Group",
        "tags": [
          "Target Groups"
        ]
      }
    },
    "/cf/admin/targets": {
      "get": {
        "description": "Returns all the Targets for the given Account ID",
        "operationId": "GetAllTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/pageNumber"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/targetSortOrder"
          },
          {
            "$ref": "#/components/parameters/targetSortByField"
          },
          {
            "$ref": "#/components/parameters/targetNameQueryParam"
          },
          {
            "$ref": "#/components/parameters/targetIdentifierQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TargetsResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns all Targets",
        "tags": [
          "Targets"
        ]
      },
      "post": {
        "description": "Create Targets for the given identifier",
        "operationId": "CreateTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TargetRequest"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Creates a Target",
        "tags": [
          "Targets"
        ]
      }
    },
    "/cf/admin/targets/upload": {
      "post": {
        "description": "Add targets by uploading a CSV file",
        "operationId": "UploadTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "fileName": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Add Target details",
        "tags": [
          "Targets"
        ]
      }
    },
    "/cf/admin/targets/{identifier}": {
      "delete": {
        "description": "Deletes a Target for the given identifier",
        "operationId": "DeleteTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Deletes a Target",
        "tags": [
          "Targets"
        ]
      },
      "get": {
        "description": "Returns details of a Target for the given identifier",
        "operationId": "GetTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TargetResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns details of a Target",
        "tags": [
          "Targets"
        ]
      },
      "patch": {
        "description": "Updates a Target for the given identifier",
        "operationId": "PatchTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          },
          {
            "$ref": "#/components/parameters/identifier"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TargetPatchRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TargetResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Updates a Target",
        "tags": [
          "Targets"
        ]
      },
      "put": {
        "description": "Modifies a Target for the given account identifier",
        "operationId": "ModifyTarget",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TargetRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TargetResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modifies a Target",
        "tags": [
          "Targets"
        ]
      }
    },
    "/cf/admin/targets/{identifier}/segments": {
      "get": {
        "description": "Returns the Target Groups that the specified Target belongs to.",
        "operationId": "GetTargetSegments",
        "parameters": [
          {
            "$ref": "#/components/parameters/identifier"
          },
          {
            "$ref": "#/components/parameters/accountQueryParam"
          },
          {
            "$ref": "#/components/parameters/orgQueryParam"
          },
          {
            "$ref": "#/components/parameters/projectQueryParam"
          },
          {
            "$ref": "#/components/parameters/environmentQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TargetDetailResponse"
          },
          "401": {
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Returns Target Groups for the given Target",
        "tags": [
          "Targets"
        ]
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/rules": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "List AutoStopping Rules",
        "description": "Lists all the AutoStopping rules separated by comma-separated strings.",
        "operationId": "ListAutoStoppingRules",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dry_run",
            "description": "Flag which if enabled lists out only dry run rules.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "Create an AutoStopping Rule",
        "description": "Creates a new AutoStopping Rule.",
        "operationId": "UpdateAutoStoppingRule",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Service definition of an AutoStopping rule",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SaveServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LwServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/rules/{rule_id}": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "Return AutoStopping Rule details",
        "description": "Returns details of an AutoStopping Rule for the given identifier.",
        "operationId": "AutoStoppingRuleDetails",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account Identifier for the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "description": "ID of the AutoStopping Rule for which you need to fetch the details",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/SaveServiceRequest"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "Delete an AutoStopping Rule",
        "description": "Deletes an AutoStopping Rule for the given identifier.",
        "operationId": "DeleteAutoStoppingRule",
        "parameters": [
          {
            "name": "rule_id",
            "description": "ID of the AutoStopping Rule that you want to delete",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/rules/{rule_id}/health": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "Return health status of an AutoStopping Rule",
        "description": "Returns health status of an AutoStopping Rule for the given identifier.",
        "operationId": "HealthOfAutoStoppingRule",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "description": "ID of the AutoStopping Rule for which you need to fetch the health status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceHealthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/rules/{rule_id}/savings": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "Return savings details for an AutoStopping Rule",
        "description": "Returns savings details for an AutoStopping rule for the given identifier and the specified time duration.",
        "operationId": "SavingsFromAutoStoppingRule",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "description": "ID of the AutoStopping Rule for which you want to fetch savings detail",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "description": "Start time for the computation of savings",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "description": "End time for the computation of savings",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/rules/{rule_id}/resources": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "List all the resources for an AutoStopping Rule",
        "description": "Lists all the resources for an AutoStopping Rule for the given identifier.",
        "operationId": "AllAutoStoppingResources",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cloud_account_id",
            "description": "Connector ID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "description": "Cloud region where resources belong to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "description": "ID of the AutoStopping Rule for which you need to list the resources",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "format": "int64"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllResourcesOfAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/rules/{rule_id}/diagnostics": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "Return diagnostics result of an AutoStopping Rule",
        "description": "Returns the diagnostics result of an AutoStopping rule for the given identifier.",
        "operationId": "GetAutoStoppingDiagnostics",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "description": "ID of the AutoStopping rule for which you need to fetch the diagnostics details",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDiagnosticsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/rules/savings/cumulative": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "Return cumulative savings for all the AutoStopping Rules",
        "description": "Returns cumulative savings for all the AutoStopping Rules.",
        "operationId": "CumulativeAutoStoppingSavings",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CumulativeSavingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/rules/{rule_id}/toggle_state": {
      "put": {
        "tags": [
          "Cloud Cost AutoStopping Rules"
        ],
        "summary": "Disable/Enable an Autostopping Rule",
        "description": "Disables or enables an Autostopping Rule for the given identifier.",
        "operationId": "ToggleAutostoppingRule",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "description": "ID of the AutoStopping rule to be enabled/disabled",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/v2/rules": {
      "post": {
        "tags": [
          "Cloud Cost AutoStopping Rules V2"
        ],
        "summary": "Create an AutoStopping Rule",
        "description": "Creates a new AutoStopping Rule.",
        "operationId": "CreateAutoStoppingRuleV2",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Service definition of an AutoStopping rule",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SaveServiceRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LwServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/v2/rules/{rule_id}": {
      "put": {
        "tags": [
          "Cloud Cost AutoStopping Rules V2"
        ],
        "summary": "Update an existing AutoStopping Rule",
        "description": "Updates an existing AutoStopping Rule.",
        "operationId": "UpdateAutoStoppingRuleV2",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rule_id",
            "description": "ID of the AutoStopping rule to be enabled/disabled",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Service definition of an AutoStopping rule",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SaveServiceRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LwServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/loadbalancers": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Load Balancers"
        ],
        "summary": "Return all the load balancers",
        "description": "Returns all the load balancers for the given identifier.",
        "operationId": "ListLoadBalancers",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vpc",
            "description": "Virtual Private Cloud (VPC)",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "description": "Cloud region where access point is installed",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cloud_account_id",
            "description": "Connector ID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAccessPointResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Cloud Cost AutoStopping Load Balancers"
        ],
        "summary": "Update a load balancer",
        "description": "Updates a load balancer for the given identifier.",
        "operationId": "EditLoadBalancer",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AccessPoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccessPointResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "accessPoint"
      },
      "post": {
        "tags": [
          "Cloud Cost AutoStopping Load Balancers"
        ],
        "summary": "Create a load balancer",
        "description": "Creates a load balancer.",
        "operationId": "CreateLoadBalancer",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AccessPoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccessPointResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "accessPoint"
      },
      "delete": {
        "tags": [
          "Cloud Cost AutoStopping Load Balancers"
        ],
        "summary": "Delete load balancers and the associated resources",
        "description": "Deletes load balancers and the associated resources for the given identifier.",
        "operationId": "DeleteLoadBalancer",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAccessPointPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "accessPoint"
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/loadbalancers/{lb_id}": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Load Balancers"
        ],
        "summary": "Return details of a load balancer",
        "description": "Retuns details of a load balancer for the given identifier.",
        "operationId": "DescribeLoadBalancer",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lb_id",
            "description": "ID of the load balancer for which you want to fetch the details",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccessPointResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/loadbalancers/{lb_id}/rules": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Load Balancers"
        ],
        "summary": "Return all the AutoStopping Rules in a load balancer",
        "description": "Returns all the AutoStopping Rules for the given load balancer identifier.",
        "operationId": "AccessPointRules",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lb_id",
            "description": "ID of the load balancer for which you want to fetch the list of AutoStopping Rules",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/autostopping/loadbalancers/{lb_id}/last_active_at": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Load Balancers"
        ],
        "summary": "Return last activity details of a load balancer",
        "description": "Returns the last activity details for the given load balancer identifier.",
        "operationId": "LoadBalancerActivity",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lb_id",
            "description": "ID of the load balancer for which you want to fetch the most recent activity details",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPointActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/lw/api/accounts/{account_id}/schedules": {
      "get": {
        "tags": [
          "Cloud Cost AutoStopping Fixed Schedules"
        ],
        "summary": "Return all the AutoStopping Rule fixed schedules",
        "description": "Returns all the AutoStopping Rule fixed schedules for the given identifier.",
        "operationId": "listAutoStoppingSchedules",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cloud_account_id",
            "description": "Connector ID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "res_id",
            "description": "IDs of resources whose fixed schedules are to be fetched. This can be an AutoStopping rule ID if the res_type is \"autostop_rule\"",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "res_type",
            "description": "Type of resource to which schedules are attached",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "autostop_rule"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedSchedulesListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Cloud Cost AutoStopping Fixed Schedules"
        ],
        "summary": "Create a fixed schedule for an AutoStopping Rule",
        "description": "Creates an AutoStopping rule to run resources based on the schedule.",
        "operationId": "createAutoStoppingSchedules",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cloud_account_id",
            "description": "Connector ID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Fixed schedule payload",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SaveStaticSchedulesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedSchedule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/lw/api/accounts/{account_id}/schedules/{schedule_id}": {
      "delete": {
        "tags": [
          "Cloud Cost AutoStopping Fixed Schedules"
        ],
        "summary": "Delete a fixed schedule for AutoStopping Rule.",
        "description": "Deletes a fixed schedule for the given AutoStopping Rule.",
        "operationId": "deleteAutoStoppingSchedule",
        "parameters": [
          {
            "name": "account_id",
            "description": "Account Identifier for the Entity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schedule_id",
            "description": "ID of a fixed schedule added to an AutoStopping rule",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/audit/api/auditFilters": {
      "get": {
        "tags": [
          "AuditFilters"
        ],
        "summary": "Get the list of Filters of type Audit satisfying the criteria (if any) in the request",
        "operationId": "getAuditFilterList",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. If left empty, default value of 0 is assumed",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. If left empty, default value of 100 is assumed",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Filters of type Audit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AuditFilters"
        ],
        "summary": "Updates the Filter of type Audit",
        "operationId": "updateAuditFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated Filter. This should have all the fields not just the updated ones",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AuditFilters"
        ],
        "summary": "Creates a Filter",
        "operationId": "postAuditFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Filter to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      }
    },
    "/audit/api/auditFilters/{identifier}": {
      "get": {
        "tags": [
          "AuditFilters"
        ],
        "summary": "Gets a Filter of type Audit by identifier",
        "operationId": "getAuditFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              }
            }
          },
          "default": {
            "description": "Returns Filter of type Audit and having filterIdentifier as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AuditFilters"
        ],
        "summary": "Delete a Filter of type Audit by identifier",
        "operationId": "deleteAuditFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              }
            }
          },
          "default": {
            "description": "Boolean status whether request was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/audit/api/audits/list": {
      "post": {
        "tags": [
          "Audit"
        ],
        "summary": "List Audit Events",
        "operationId": "getAuditEventList",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page(max 100)Default Value: 50",
            "schema": {
              "maximum": 100,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortOrders",
            "in": "query",
            "description": "Sort criteria for the elements.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortOrder"
              }
            }
          }
        ],
        "requestBody": {
          "description": "This has the filter attributes for listing Audit Events",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditFilterProperties"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/AuditFilterProperties"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditFailure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AuditError"
                }
              }
            }
          },
          "default": {
            "description": "This has a paginated list of Audit Events.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseAuditEvent"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseAuditEvent"
                }
              }
            }
          }
        }
      }
    },
    "/template/api/filters": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "List Filters",
        "description": "Lists Filters for the given criteria.",
        "operationId": "TemplategetConnectorListV2",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number of navigation. If left empty, default value of 0 is assumed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of entries per page. If left empty, default value of 100 is assumed",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the list of Filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseFilter"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Filter"
        ],
        "summary": "Update a Filter",
        "description": "Updates the filter for the given ID.",
        "operationId": "TemplateupdateFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This is the updated Filter. This should have all the fields not just the updated ones",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Create a Filter",
        "description": "Creates a Filter.",
        "operationId": "TemplatepostFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Connector to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/yaml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns created Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      }
    },
    "/template/api/filters/{identifier}": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Return Filter Details",
        "description": "Returns the settings of a filter for the given ID.",
        "operationId": "TemplategetFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns Filter having filterIdentifier as specified in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOFilter"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Filter"
        ],
        "summary": "Delete a Filter",
        "description": "Deletes a filter for the given ID.",
        "operationId": "TemplatedeleteFilter",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Filter Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of Filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Connector",
                "DelegateProfile",
                "Delegate",
                "PipelineSetup",
                "PipelineExecution",
                "Deployment",
                "Audit",
                "Template",
                "EnvironmentGroup",
                "FileStore",
                "CCMRecommendation",
                "Anomaly",
                "Environment",
                "RuleExecution"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Boolean status whether request was successful or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/template/api/templates": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Create a Template",
        "operationId": "createTemplate",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isNewBranch",
            "in": "query",
            "description": "Checks the new branch",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeType",
            "in": "query",
            "description": "Tells whether the Entity is to be saved on Git or not",
            "schema": {
              "type": "string",
              "enum": [
                "INLINE",
                "REMOTE"
              ]
            }
          },
          {
            "name": "repoName",
            "in": "query",
            "description": "Name of the repository.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setDefaultTemplate",
            "in": "query",
            "description": "Specify true if Default Template is to be set",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "comments",
            "in": "query",
            "description": "Comments",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Template YAML",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the created Template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTemplateWrapperResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTemplateWrapperResponse"
                }
              }
            }
          }
        }
      }
    },
    "/template/api/templates/{templateIdentifier}/{versionLabel}": {
      "delete": {
        "tags": [
          "Templates"
        ],
        "summary": "Delete Template Version",
        "operationId": "deleteTemplateVersion",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateIdentifier",
            "in": "path",
            "description": "Template Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionLabel",
            "in": "path",
            "description": "Version Label",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "File Path of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comments",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceDelete",
            "in": "query",
            "description": "If true, the Entity will be forced delete, without checking any references/usages",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the Template is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/template/api/templates/{templateIdentifier}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get Template",
        "operationId": "getTemplate",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateIdentifier",
            "in": "path",
            "description": "Template Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionLabel",
            "in": "query",
            "description": "Version Label",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Specifies whether Template is deleted or not",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Load-From-Cache",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "false"
            }
          },
          {
            "name": "loadFromFallbackBranch",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the saved Template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTemplateResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTemplateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/template/api/templates/update/{templateIdentifier}/{versionLabel}": {
      "put": {
        "tags": [
          "Templates"
        ],
        "summary": "Update Template Version",
        "operationId": "updateExistingTemplateVersion",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateIdentifier",
            "in": "path",
            "description": "Template Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionLabel",
            "in": "path",
            "description": "Version Label",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootFolder",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filePath",
            "in": "query",
            "description": "Path to the root folder of the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitMsg",
            "in": "query",
            "description": "Commit Message to use for the merge commit.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastObjectId",
            "in": "query",
            "description": "Last Object Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolvedConflictCommitId",
            "in": "query",
            "description": "If the entity is git-synced, this parameter represents the commit id against which file conflicts are resolved",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baseBranch",
            "in": "query",
            "description": "Name of the default branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connectorRef",
            "in": "query",
            "description": "Identifier of Connector needed for CRUD operations on the respective Entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setDefaultTemplate",
            "in": "query",
            "description": "Specify true if Default Template is to be set",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "comments",
            "in": "query",
            "description": "Comments",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Template YAML",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/yaml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Template Version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTemplateWrapperResponse"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOTemplateWrapperResponse"
                }
              }
            }
          }
        }
      }
    },
    "/template/api/templates/updateStableTemplate/{templateIdentifier}/{versionLabel}": {
      "put": {
        "tags": [
          "Templates"
        ],
        "summary": "Update Stable Template Version",
        "operationId": "updateStableTemplate",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateIdentifier",
            "in": "path",
            "description": "Template Identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionLabel",
            "in": "path",
            "description": "Version Label",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Name of the branch.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "description": "Git Sync Config Id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getDefaultFromOtherRepo",
            "in": "query",
            "description": "if true, return all the default entities",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "comments",
            "in": "query",
            "description": "Comments",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns the updated Template Version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOString"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/create-default": {
      "post": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "createDefaultMonitoredService",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{identifier}": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "summary": "Get monitored service data",
        "operationId": "getMonitoredService",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Get monitored service data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOMonitoredServiceResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Monitored Services"
        ],
        "summary": "Updates monitored service data",
        "operationId": "updateMonitoredService",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/MonitoredService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Updates monitored service data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMonitoredServiceResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Monitored Services"
        ],
        "summary": "Delete monitored service data",
        "operationId": "deleteMonitoredService",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Delete monitored service data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/all/time-series-health-sources": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getAllMonitoredServicesWithHealthSources",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{identifier}/anomaliesCount": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "CvgetAnomaliesSummary",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/count-of-services": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getCountOfServices",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/environments": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getEnvironments",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/health-sources": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getHealthSources",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{monitoredServiceIdentifier}/health-sources": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getHealthSourcesForMonitoredServiceIdentifier",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/list": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getList",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifiers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{monitoredServiceIdentifier}/change-details": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getMonitoredServiceChangeDetails",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sloIdentifiers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{monitoredServiceIdentifier}/service-details": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getMonitoredServiceDetails",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/service-details": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getMonitoredServiceDetails_1",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/cv/api/monitored-service/service-environment": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getMonitoredServiceFromServiceAndEnvironment",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{monitoredServiceIdentifier}/logs": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getMonitoredServiceLogs",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "logType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApiCallLog",
                "ExecutionLog"
              ]
            }
          },
          {
            "name": "errorLogsOnly",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "healthSources",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{identifier}/scores": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getMonitoredServiceScore",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{identifier}/notification-rules": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "summary": "Get notification rules for MonitoredService",
        "operationId": "getNotificationRulesForMonitoredService",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Get notification rules for MonitoredService",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseNotificationRuleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{identifier}/overall-health-score": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getOverAllHealthScore",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "FOUR_HOURS",
                "TWENTY_FOUR_HOURS",
                "THREE_DAYS",
                "SEVEN_DAYS",
                "THIRTY_DAYS"
              ]
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{monitoredServiceIdentifier}/health-source/{healthSourceIdentifier}/slo-metrics": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "getSloMetrics",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "healthSourceIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "list",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentIdentifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "servicesAtRiskFilter",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Monitored Services"
        ],
        "summary": "Saves monitored service data",
        "operationId": "saveMonitoredService",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/MonitoredService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Saves monitored service data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMonitoredServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/template-input": {
      "post": {
        "tags": [
          "Monitored Services"
        ],
        "summary": "Saves monitored service from template input",
        "operationId": "saveMonitoredServiceFromTemplateInput",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Template input yaml for the monitored service creation from given template",
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Saves monitored service from template input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMonitoredServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/yaml": {
      "post": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "saveMonitoredServiceFromYaml",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{identifier}/health-monitoring-flag": {
      "put": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "setHealthMonitoringFlag",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{identifier}/template-input": {
      "put": {
        "tags": [
          "Monitored Services"
        ],
        "summary": "Update monitored service from yaml or template",
        "operationId": "updateMonitoredServiceFromTemplateInput",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Template input yaml for the monitored service creation from given template",
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Update monitored service from yaml or template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseMonitoredServiceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/{identifier}/yaml": {
      "put": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "updateMonitoredServiceFromYaml",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/monitored-service/yaml-template": {
      "get": {
        "tags": [
          "Monitored Services"
        ],
        "operationId": "yamlTemplate",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "Application",
                "Infrastructure"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo-dashboard/monitored-services": {
      "get": {
        "tags": [
          "SLOs dashboard"
        ],
        "operationId": "getSLOAssociatedMonitoredServices",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo-dashboard/risk-count": {
      "get": {
        "tags": [
          "SLOs dashboard"
        ],
        "summary": "Get all SLOs count by risk",
        "operationId": "getServiceLevelObjectivesRiskCount",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userJourneyIdentifiers",
            "in": "query",
            "description": "For filtering on the basis of user journeys' identifiers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "description": "For filtering on the basis of monitored services' identifiers",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sliTypes",
            "in": "query",
            "description": "For filtering on the basis of SLI types",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Availability",
                  "Latency"
                ]
              }
            }
          },
          {
            "name": "targetTypes",
            "in": "query",
            "description": "For filtering on the basis of target types",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Rolling",
                  "Calender"
                ]
              }
            }
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "description": "For filtering on the basis of error budget risks",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXHAUSTED",
                  "UNHEALTHY",
                  "NEED_ATTENTION",
                  "OBSERVE",
                  "HEALTHY"
                ]
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For filtering on the basis of name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Get the risk count for all SLOs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSLORiskCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo-dashboard/widget/{identifier}/consumption": {
      "get": {
        "tags": [
          "SLOs dashboard"
        ],
        "summary": "Get SLO consumption breakdown",
        "operationId": "getSloConsumptionBreakdownView",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLO's details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSLOConsumptionBreakdown"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo-dashboard/widget/{identifier}": {
      "get": {
        "tags": [
          "SLOs dashboard"
        ],
        "summary": "Get SLO dashboard details",
        "operationId": "getSLODetails",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLO's details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOSLODashboardDetail"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo-dashboard/widgets": {
      "get": {
        "tags": [
          "SLOs dashboard"
        ],
        "summary": "Get widget list",
        "operationId": "getSLODashboardWidgets",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userJourneyIdentifiers",
            "in": "query",
            "description": "For filtering on the basis of user journeys' identifiers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "description": "For filtering on the basis of monitored services' identifiers",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sliTypes",
            "in": "query",
            "description": "For filtering on the basis of SLI types",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Availability",
                  "Latency"
                ]
              }
            }
          },
          {
            "name": "targetTypes",
            "in": "query",
            "description": "For filtering on the basis of target types",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Rolling",
                  "Calender"
                ]
              }
            }
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "description": "For filtering on the basis of error budget risks",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXHAUSTED",
                  "UNHEALTHY",
                  "NEED_ATTENTION",
                  "OBSERVE",
                  "HEALTHY"
                ]
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For filtering on the basis of name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLOs for dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSLODashboardWidget"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/cv/api/slo-dashboard/widgets/list": {
      "get": {
        "tags": [
          "SLOs dashboard"
        ],
        "summary": "Get SLO list view",
        "operationId": "getSLOHealthListView",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userJourneyIdentifiers",
            "in": "query",
            "description": "For filtering on the basis of user journeys' identifiers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "monitoredServiceIdentifier",
            "in": "query",
            "description": "For filtering on the basis of monitored services' identifiers",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sliTypes",
            "in": "query",
            "description": "For filtering on the basis of SLI types",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Availability",
                  "Latency"
                ]
              }
            }
          },
          {
            "name": "targetTypes",
            "in": "query",
            "description": "For filtering on the basis of target types",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Rolling",
                  "Calender"
                ]
              }
            }
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "description": "For filtering on the basis of error budget risks",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXHAUSTED",
                  "UNHEALTHY",
                  "NEED_ATTENTION",
                  "OBSERVE",
                  "HEALTHY"
                ]
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For filtering on the basis of name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLOs for list view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSLOHealthListView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SLOs dashboard"
        ],
        "summary": "Get SLO list view",
        "operationId": "getSLOHealthListViewV2",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SLODashboardApiFilter"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLOs for list view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSLOHealthListView"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/slo/v2/identifier/{identifier}": {
      "get": {
        "tags": [
          "NG SLOs"
        ],
        "summary": "Get SLO data",
        "operationId": "getServiceLevelObjectiveNg",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLO's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseServiceLevelObjectiveV2Response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "NG SLOs"
        ],
        "summary": "Update SLO data",
        "operationId": "updateSLODataNg",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the SLO to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractServiceLevelObjective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the updated SLO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseServiceLevelObjectiveV2Response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "NG SLOs"
        ],
        "summary": "Delete SLO data",
        "operationId": "deleteSLODataNg",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the SLO is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/slo/v2/composite-slo/onboarding-graph": {
      "post": {
        "tags": [
          "NG SLOs"
        ],
        "summary": "Get onBoarding graph for composite slo",
        "operationId": "getOnboardingGraphNg",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Composite SLO spec which consists of list of SLO details",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CompositeServiceLevelObjectiveSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the time series data points for composite slo onBoarding graph",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseTimeGraphResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/slo/v2/status-list": {
      "post": {
        "tags": [
          "NG SLOs"
        ],
        "summary": "Get SLO list view",
        "operationId": "getSLOHealthListViewNg",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SLODashboardApiFilter"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLOs for list view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseSLOHealthListView"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/account/{accountIdentifier}/org/{orgIdentifier}/project/{projectIdentifier}/slo/v2": {
      "get": {
        "tags": [
          "NG SLOs"
        ],
        "summary": "Get all SLOs",
        "operationId": "getServiceLevelObjectivesNg",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userJourneys",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sliTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Availability",
                  "Latency"
                ]
              }
            }
          },
          {
            "name": "targetTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Rolling",
                  "Calender"
                ]
              }
            }
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXHAUSTED",
                  "UNHEALTHY",
                  "NEED_ATTENTION",
                  "OBSERVE",
                  "HEALTHY"
                ]
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLOs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceLevelObjectiveV2Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "NG SLOs"
        ],
        "summary": "Saves SLO data",
        "operationId": "saveSLODataNg",
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "path",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "path",
            "description": "Organization Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "path",
            "description": "Project Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the SLO to be saved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractServiceLevelObjective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the saved SLO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseServiceLevelObjectiveV2Response"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo/{identifier}": {
      "get": {
        "tags": [
          "SLOs"
        ],
        "summary": "Get SLO data",
        "operationId": "getServiceLevelObjective",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLO's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseServiceLevelObjectiveResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SLOs"
        ],
        "summary": "Update SLO data",
        "operationId": "updateSLOData",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the SLO to be updated",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ServiceLevelObjective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the updated SLO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseServiceLevelObjectiveResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SLOs"
        ],
        "summary": "Delete SLO data",
        "operationId": "deleteSLOData",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Returns true if the SLO is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo/{identifier}/errorBudgetResetHistory": {
      "get": {
        "tags": [
          "SLOs"
        ],
        "summary": "Get Error budget reset history",
        "operationId": "getErrorBudgetResetHistory",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the error budget reset history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseListSLOErrorBudgetReset"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo/{identifier}/notification-rules": {
      "get": {
        "tags": [
          "SLOs"
        ],
        "summary": "Get notification rules for SLO",
        "operationId": "getNotificationRulesForSLO",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the notification rules for SLO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseNotificationRuleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo/{identifier}/logs": {
      "get": {
        "tags": [
          "SLOs"
        ],
        "summary": "Get SLO logs",
        "operationId": "getServiceLevelObjectiveLogs",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "logType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ApiCallLog",
                "ExecutionLog"
              ]
            }
          },
          {
            "name": "errorLogsOnly",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLO's logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponsePageResponseCVNGLog"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo": {
      "get": {
        "tags": [
          "SLOs"
        ],
        "summary": "Get all SLOs",
        "operationId": "getServiceLevelObjectives",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Page Index of the results to fetch.Default Value: 0",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Results per page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userJourneys",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sliTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Availability",
                  "Latency"
                ]
              }
            }
          },
          {
            "name": "targetTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Rolling",
                  "Calender"
                ]
              }
            }
          },
          {
            "name": "errorBudgetRisks",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXHAUSTED",
                  "UNHEALTHY",
                  "NEED_ATTENTION",
                  "OBSERVE",
                  "HEALTHY"
                ]
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the SLOs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDTOPageResponseServiceLevelObjectiveResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SLOs"
        ],
        "summary": "Saves SLO data",
        "operationId": "saveSLOData",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the SLO to be saved",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ServiceLevelObjective"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Gets the saved SLO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseServiceLevelObjectiveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cv/api/slo/{identifier}/resetErrorBudget": {
      "post": {
        "tags": [
          "SLOs"
        ],
        "summary": "Reset Error budget history",
        "operationId": "resetErrorBudget",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account Identifier for the Entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "description": "Organization Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "description": "Project Identifier for the Entity.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "SLO identifier for the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details needed to reset error budget",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SLOErrorBudgetReset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Failure"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Reset Error budget history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponseSLOErrorBudgetReset"
                }
              }
            }
          }
        }
      }
    },
    "/gitops/api/v1/agents": {
      "get": {
        "description": "List agents.",
        "operationId": "AgentServiceForServer_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1AgentList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "AGENT_TYPE_UNSET",
                "CONNECTED_ARGO_PROVIDER",
                "MANAGED_ARGO_PROVIDER"
              ],
              "default": "AGENT_TYPE_UNSET"
            },
            "description": "MANAGED_ARGO_PROVIDER"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AGENT_SCOPE_UNSET",
                "ACCOUNT",
                "ORG",
                "PROJECT"
              ],
              "default": "AGENT_SCOPE_UNSET"
            }
          }
        ],
        "tags": [
          "Agents"
        ]
      },
      "post": {
        "description": "Create agent.",
        "operationId": "AgentServiceForServer_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Agent"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/v1Agent"
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/gitops/api/v1/agents/{agent.identifier}": {
      "put": {
        "description": "Update agents.",
        "operationId": "AgentServiceForServer_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Agent"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agent.identifier",
            "description": "The gitops-server generated ID for this gitops-agent",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/v1Agent"
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications": {
      "get": {
        "summary": "List returns list of applications for a specific agent",
        "description": "List returns list of applications for a specific agent.",
        "operationId": "AgentApplicationService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "description": "the application's name.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.refresh",
            "description": "forces application reconciliation if set to true.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.project",
            "description": "the project names to restrict returned list applications.",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query.resourceVersion",
            "description": "when specified with a watch call, shows changes that occur after that particular version of a resource.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.selector",
            "description": "the selector to to restrict returned list to applications only with matched labels.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "description": "the repoURL to restrict returned list applications.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "post": {
        "summary": "Create creates an application",
        "description": "Creates application in project.",
        "operationId": "AgentApplicationService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Application"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clusterIdentifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationsApplicationCreateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.applicationName}/managed-resources": {
      "get": {
        "summary": "ManagedResources returns list of managed resources",
        "description": "ManagedResources returns list of managed resources.",
        "operationId": "AgentApplicationService_ManagedResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsManagedResourcesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.applicationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.name}": {
      "get": {
        "summary": "Get returns an application by name",
        "description": " Get returns an application by name",
        "operationId": "AgentApplicationService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Application"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "description": "the application's name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.refresh",
            "description": "forces application reconciliation if set to true.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.project",
            "description": "the project names to restrict returned list applications.",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query.resourceVersion",
            "description": "when specified with a watch call, shows changes that occur after that particular version of a resource.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.selector",
            "description": "the selector to to restrict returned list to applications only with matched labels.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "description": "the repoURL to restrict returned list applications.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.name}/events": {
      "get": {
        "summary": "ListResourceEvents returns a list of event resources",
        "description": "ListResourceEvents returns list of event resources.",
        "operationId": "AgentApplicationService_ListResourceEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1EventList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.resourceNamespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.resourceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.resourceUID",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.name}/logs": {
      "get": {
        "summary": "PodLogs returns stream of log entries for the specified pod(s).",
        "description": "PodLogs returns stream of log entries for the specified pod(s).",
        "operationId": "AgentApplicationService_PodLogs2",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/applicationsLogEntry"
                    },
                    "error": {
                      "$ref": "#/components/schemas/runtimeStreamError"
                    }
                  },
                  "title": "Stream result of applicationsLogEntry"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.podName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.container",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.sinceSeconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query.sinceTime.seconds",
            "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query.sinceTime.nanos",
            "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query.tailLines",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query.follow",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.untilTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.resourceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.previous",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.name}/manifests": {
      "get": {
        "summary": "GetManifests returns application manifests",
        "description": "GetManifests returns application manifests.",
        "operationId": "AgentApplicationService_GetManifests",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repositoriesManifestResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.revision",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.name}/pods/{query.podName}/logs": {
      "get": {
        "summary": "PodLogs returns stream of log entries for the specified pod(s).",
        "description": "PodLogs returns stream of log entries for the specified pod(s).",
        "operationId": "AgentApplicationService_PodLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/applicationsLogEntry"
                    },
                    "error": {
                      "$ref": "#/components/schemas/runtimeStreamError"
                    }
                  },
                  "title": "Stream result of applicationsLogEntry"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.podName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.container",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.sinceSeconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query.sinceTime.seconds",
            "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query.sinceTime.nanos",
            "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query.tailLines",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query.follow",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.untilTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.resourceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.previous",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.name}/resource-tree": {
      "get": {
        "summary": "ResourceTree returns resource tree",
        "description": "ResourceTree returns resource tree.",
        "operationId": "AgentApplicationService_ResourceTree",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationTree"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.applicationName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.name}/revisions/{query.revision}/metadata": {
      "get": {
        "summary": "Get the meta-data (author, date, tags, message) for a specific revision of the application",
        "description": "RevisionMetadata returns metadata for a specific revision of the application.",
        "operationId": "AgentApplicationService_RevisionMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repositoriesRevisionMetadata"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "description": "the application's name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.revision",
            "description": "the revision of the app",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{query.name}/syncwindows": {
      "get": {
        "summary": "Get returns sync windows of the application",
        "description": "GetApplicationSyncWindows returns sync windows of the application.",
        "operationId": "AgentApplicationService_GetApplicationSyncWindows",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationSyncWindowsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{request.application.metadata.name}": {
      "put": {
        "summary": "Update updates an application",
        "description": "Update updates an application.",
        "operationId": "AgentApplicationService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Application"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.application.metadata.name",
            "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clusterIdentifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoIdentifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationsApplicationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{request.name}": {
      "delete": {
        "summary": "Delete deletes an application",
        "description": "Delete deletes an application.",
        "operationId": "AgentApplicationService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.cascade",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.propagationPolicy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "options.removeExistingFinalizers",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "patch": {
        "summary": "Patch patch an application",
        "description": "Patch applys a patches to an application.",
        "operationId": "AgentApplicationService_Patch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Application"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/servicev1ApplicationPatchRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{request.name}/operation": {
      "delete": {
        "summary": "TerminateOperation terminates the currently running operation",
        "description": "TerminateOperation terminates the currently running operation.",
        "operationId": "AgentApplicationService_TerminateOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsOperationTerminateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{request.name}/resource": {
      "get": {
        "summary": "GetResource returns single application resource",
        "description": "GetResource returns single application resource.",
        "operationId": "AgentApplicationService_GetResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationResourceResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.resourceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "delete": {
        "summary": "DeleteResource deletes a single application resource",
        "description": "DeleteResource deletes a single application resource.",
        "operationId": "AgentApplicationService_DeleteResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.resourceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request.orphan",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "post": {
        "summary": "PatchResource patch single application resource",
        "description": "PatchResource patch single application resource.",
        "operationId": "AgentApplicationService_PatchResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationResourceResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationsApplicationResourcePatchRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{request.name}/resource/actions": {
      "get": {
        "summary": "ListResourceActions returns list of resource actions",
        "description": "ListResourceActions returns list of resource actions.",
        "operationId": "AgentApplicationService_ListResourceActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsResourceActionsListResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.resourceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "post": {
        "summary": "RunResourceAction run resource action",
        "description": "RunResourceAction run resource action.",
        "operationId": "AgentApplicationService_RunResourceAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationsResourceActionRunRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{request.name}/rollback": {
      "post": {
        "summary": "Rollback syncs an application to its target state\nHarness Event type (rollback)",
        "description": "Rollback syncs an application to its target state\nHarness Event type (rollback).",
        "operationId": "AgentApplicationService_Rollback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Application"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationsApplicationRollbackRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{request.name}/spec": {
      "put": {
        "summary": "UpdateSpec updates an application spec",
        "description": "UpdateSpec updates an application spec.",
        "operationId": "AgentApplicationService_UpdateSpec",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsApplicationSpec"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationsApplicationUpdateSpecRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/applications/{request.name}/sync": {
      "post": {
        "summary": "Sync syncs an application to its target state\nHarness Event type (deploy)",
        "description": "Delete deletes an application.",
        "operationId": "AgentApplicationService_Sync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Application"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationsApplicationSyncRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/appprojectsmapping": {
      "get": {
        "description": "Retrieves Harness-Argo project mappings list by agent.",
        "operationId": "AppProjectMappingService_GetAppProjectMappingListByAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1AppProjectMapping"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Project mappings"
        ]
      },
      "post": {
        "summary": "CreateAppProjectMapping creates a new mapping between Harness Project and argo project",
        "description": "Creates Harness-Argo project mappings.",
        "operationId": "AppProjectMappingService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Empty"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/servicev1AppProjectMapping"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Project mappings"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/appprojectsmapping/{name}": {
      "delete": {
        "summary": "Delete an argo project to harness project mapping",
        "description": "Delete Harness-Argo project mappings.",
        "operationId": "AppProjectMappingService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Empty"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Project mappings"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/certificates": {
      "get": {
        "summary": "List all available repository certificates",
        "description": "List repository certificates.",
        "operationId": "AgentCertificateService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificatesRepositoryCertificateList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.hostNamePattern",
            "description": "A file-glob pattern (not regular expression) the host name has to match.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.certType",
            "description": "The type of the certificate to match (ssh or https).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.certSubType",
            "description": "The sub type of the certificate to match (protocol dependent, usually only used for ssh certs).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repository Certificates"
        ]
      },
      "delete": {
        "summary": "Delete the certificates that match the RepositoryCertificateQuery",
        "description": "Delete repository certificates.",
        "operationId": "AgentCertificateService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificatesRepositoryCertificateList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.hostNamePattern",
            "description": "A file-glob pattern (not regular expression) the host name has to match.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.certType",
            "description": "The type of the certificate to match (ssh or https).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.certSubType",
            "description": "The sub type of the certificate to match (protocol dependent, usually only used for ssh certs).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repository Certificates"
        ]
      },
      "post": {
        "summary": "Creates repository certificates on the server",
        "description": "Create repository certificates.",
        "operationId": "AgentCertificateService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificatesRepositoryCertificateList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificateRepositoryCertificateCreateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repository Certificates"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/clusters": {
      "get": {
        "summary": "List returns list of clusters",
        "description": "List clusters.",
        "operationId": "AgentClusterService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clustersClusterList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.server",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.id.type",
            "description": "type is the type of the specified cluster identifier ( \"server\" - default, \"name\" ).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.id.value",
            "description": "value holds the cluster server URL or cluster name.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Clusters"
        ]
      },
      "post": {
        "summary": "Create creates a cluster",
        "description": "Create clusters.",
        "operationId": "AgentClusterService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Cluster"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clustersClusterCreateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Clusters"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/clusters/{identifier}": {
      "get": {
        "summary": "Get returns a cluster by identifier",
        "description": "Get cluster.",
        "operationId": "AgentClusterService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Cluster"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.server",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.id.type",
            "description": "type is the type of the specified cluster identifier ( \"server\" - default, \"name\" ).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.id.value",
            "description": "value holds the cluster server URL or cluster name.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Clusters"
        ]
      },
      "delete": {
        "summary": "Delete deletes a cluster",
        "description": "Delete cluster.",
        "operationId": "AgentClusterService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clustersClusterResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.server",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.id.type",
            "description": "type is the type of the specified cluster identifier ( \"server\" - default, \"name\" ).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.id.value",
            "description": "value holds the cluster server URL or cluster name.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Clusters"
        ]
      },
      "put": {
        "summary": "Update updates a cluster",
        "description": "Update cluster.",
        "operationId": "AgentClusterService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Cluster"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clustersClusterUpdateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Clusters"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/deploy.yaml": {
      "get": {
        "description": "GetDeployYaml returns depoyment yamls for agents.",
        "operationId": "AgentServiceForServer_GetDeployYaml",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/x-yml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/x-yml": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Agents"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/gpgkeys": {
      "get": {
        "summary": "List all available repository certificates",
        "description": "List all available repository certificates.",
        "operationId": "AgentGPGKeyService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gpgkeysGnuPGPublicKeyList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.keyID",
            "description": "The GPG key ID to query for.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Clusters"
        ]
      },
      "post": {
        "summary": "Create one or more GPG public keys in the server's configuration",
        "description": "Create one or more GPG public keys in the server's configuration.",
        "operationId": "AgentGPGKeyService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gpgkeysGnuPGPublicKeyCreateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gpgkeysGnuPGPublicKeyCreateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "GnuPGP Keys"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/gpgkeys/{query.keyID}": {
      "get": {
        "summary": "Get information about specified GPG public key from the server",
        "description": "Get information about specified GPG public key from the server.",
        "operationId": "AgentGPGKeyService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gpgkeysGnuPGPublicKey"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.keyID",
            "description": "The GPG key ID to query for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "GnuPGP Keys"
        ]
      },
      "delete": {
        "summary": "Delete specified GPG public key from the server's configuration",
        "description": "Delete specified GPG public key from the server's configuration.",
        "operationId": "AgentGPGKeyService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gpgkeysGnuPGPublicKeyResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.keyID",
            "description": "The GPG key ID to query for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "GnuPGP Keys"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/projects": {
      "get": {
        "summary": "List returns list of projects",
        "description": "Lists lists argo projects.",
        "operationId": "AgentProjectService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appprojectsAppProjectList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "post": {
        "summary": "Create a new project",
        "description": "Create a new project",
        "operationId": "AgentProjectService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appprojectsAppProject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectsProjectCreateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Projects"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/projects/{query.name}": {
      "get": {
        "summary": "Get returns a project by name",
        "description": "Get returns an argo project by name.",
        "operationId": "AgentProjectService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appprojectsAppProject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "summary": "Delete deletes a project",
        "description": "Delete deletes a project.",
        "operationId": "AgentProjectService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectsEmptyResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/projects/{request.project.metadata.name}": {
      "put": {
        "summary": "Update updates a project",
        "description": "Update updates a project.",
        "operationId": "AgentProjectService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appprojectsAppProject"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request.project.metadata.name",
            "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectsProjectUpdateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Projects"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/reconcile/counts": {
      "post": {
        "summary": "Returns number of entities that exist in the cluster on the agent.\nFilter can be used to count only global entities (with empty project) and those specified by the filter.",
        "description": "Returns number of entities that exist in the cluster on the agent.\nFilter can be used to count only global entities (with empty project) and those specified by the filter.",
        "operationId": "ReconcilerService_CollectCounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reconcilerReconcileCountsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/servicev1ReconcilerFilter"
        },
        "tags": [
          "Reconciler"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/reconcile/import": {
      "post": {
        "summary": "Imports data from cluster via agent. There must be at least one project mapping in the database.\nReturns number of entities imported.",
        "description": "Imports data from cluster via agent. There must be at least one project mapping in the database.\nReturns number of entities imported.",
        "operationId": "ReconcilerService_ImportData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reconcilerReconcileCountsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/servicev1ReconcilerFilter"
        },
        "tags": [
          "Reconciler"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repocreds": {
      "post": {
        "summary": "Create creates a new repository credential",
        "description": "Create creates a new repository credential.",
        "operationId": "AgentRepositoryCredentialsService_CreateRepositoryCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1RepositoryCredentials"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hrepocredsRepoCredsCreateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repository credentials"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repocreds/get": {
      "post": {
        "summary": "Get returns a repository credential given its url",
        "description": "Get returns a repository credential given its url.",
        "operationId": "AgentRepositoryCredentialsService_GetCredentialsForRepositoryUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1RepositoryCredentials"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hrepocredsRepoCredsQuery"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repository credentials"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repocreds/{identifier}": {
      "get": {
        "summary": "Get returns a repository credential given its identifier",
        "description": "Get returns a repository credential given its identifier.",
        "operationId": "AgentRepositoryCredentialsService_GetRepositoryCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1RepositoryCredentials"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.url",
            "description": "Repo URL for query.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repoCredsType",
            "description": "RepoCreds type - git or helm.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repository credentials"
        ]
      },
      "delete": {
        "summary": "Delete deletes a repository credential",
        "description": " Delete deletes a repository credential.",
        "operationId": "AgentRepositoryCredentialsService_DeleteRepositoryCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hrepocredsRepoCredsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.url",
            "description": "Repo URL for query.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repoCredsType",
            "description": "RepoCreds type - git or helm.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repository credentials"
        ]
      },
      "put": {
        "summary": "Update updates a repository credential",
        "description": "Update updates a repository credential.",
        "operationId": "AgentRepositoryCredentialsService_UpdateRepositoryCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1RepositoryCredentials"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hrepocredsRepoCredsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repository credentials"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repositories": {
      "get": {
        "summary": "ListRepositories gets a list of all configured repositories",
        "description": "ListRepositories gets a list of all configured repositories.",
        "operationId": "AgentRepositoryService_ListRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repositoriesRepositoryList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "description": "Repo URL for query.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.forceRefresh",
            "description": "Whether to force a cache refresh on repo's connection state.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.project",
            "description": "The associated project project.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repositories"
        ]
      },
      "post": {
        "summary": "CreateRepository creates a new repository configuration",
        "description": "CreateRepository creates a new repository configuration.",
        "operationId": "AgentRepositoryService_CreateRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Repository"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repoCredsId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/repositoriesRepoCreateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repositories"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repositories/validate": {
      "post": {
        "summary": "ValidateAccess gets connection state for a repository",
        "description": "ValidateAccess gets connection state for a repository.",
        "operationId": "AgentRepositoryService_ValidateAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commonsConnectionState"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/repositoriesRepoAccessQuery"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repositories"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repositories/{identifier}": {
      "get": {
        "summary": "Get returns a repository or its credentials",
        "description": "Get returns a repository or its credentials.",
        "operationId": "AgentRepositoryService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Repository"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "description": "Repo URL for query.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.forceRefresh",
            "description": "Whether to force a cache refresh on repo's connection state.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.project",
            "description": "The associated project project.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repositories"
        ]
      },
      "delete": {
        "summary": "DeleteRepository deletes a repository from the configuration",
        "description": "DeleteRepository deletes a repository from the configuration.",
        "operationId": "AgentRepositoryService_DeleteRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repositoriesRepoResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "description": "Repo URL for query.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.forceRefresh",
            "description": "Whether to force a cache refresh on repo's connection state.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.project",
            "description": "The associated project project.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repositories"
        ]
      },
      "put": {
        "summary": "UpdateRepository updates a repository configuration",
        "description": "UpdateRepository updates a repository configuration.",
        "operationId": "AgentRepositoryService_UpdateRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Repository"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/repositoriesRepoUpdateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repositories"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repositories/{identifier}/appdetails": {
      "get": {
        "summary": "GetAppDetails returns application details by given path",
        "description": "GetAppDetails returns application details by given path.",
        "operationId": "AgentRepositoryService_GetAppDetails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repositoriesRepoAppDetailsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.repoURL",
            "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.path",
            "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.targetRevision",
            "description": "TargetRevision defines the revision of the source to sync the application to.\nIn case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.\nIn case of Helm, this is a semver tag for the Chart's version.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.helm.valueFiles",
            "description": "ValuesFiles is a list of Helm value files to use when generating a template.",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query.source.helm.releaseName",
            "description": "ReleaseName is the Helm release name to use. If omitted it will use the application name.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.helm.values",
            "description": "Values specifies Helm values to be passed to helm template, typically defined as a block.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.helm.version",
            "description": "Version is the Helm version to use for templating (either \"2\" or \"3\").",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.helm.passCredentials",
            "description": "PassCredentials pass credentials to all domains (Helm's --pass-credentials).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.source.kustomize.namePrefix",
            "description": "NamePrefix is a prefix appended to resources for Kustomize apps.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.kustomize.nameSuffix",
            "description": "NameSuffix is a suffix appended to resources for Kustomize apps.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.kustomize.images",
            "description": "Images is a list of Kustomize image override specifications.",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query.source.kustomize.version",
            "description": "Version controls which version of Kustomize to use for rendering manifests.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.kustomize.forceCommonLabels",
            "description": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.source.kustomize.forceCommonAnnotations",
            "description": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.source.ksonnet.environment",
            "description": "Environment is a ksonnet application environment name.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.directory.recurse",
            "description": "Recurse specifies whether to scan a directory recursively for manifests.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.source.directory.jsonnet.libs",
            "description": "Additional library search dirs.",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query.source.directory.exclude",
            "description": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.directory.include",
            "description": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.plugin.name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.source.chart",
            "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.appName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.appProject",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repositories/{identifier}/apps": {
      "get": {
        "summary": "ListApps returns list of apps in the repo",
        "description": "ListApps returns list of apps in the repo.",
        "operationId": "AgentRepositoryService_ListApps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repositoriesRepoAppsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.revision",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.appName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.appProject",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repositories/{identifier}/helmcharts": {
      "get": {
        "summary": "GetHelmCharts returns list of helm charts in the specified repository",
        "description": "GetHelmCharts returns list of helm charts in the specified repository.",
        "operationId": "AgentRepositoryService_GetHelmCharts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repositoriesHelmChartsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "description": "Repo URL for query.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.forceRefresh",
            "description": "Whether to force a cache refresh on repo's connection state.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.project",
            "description": "The associated project project.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/repositories/{identifier}/refs": {
      "get": {
        "summary": "Returns a list of refs (e.g. branches and tags) in the repo",
        "description": "Returns a list of refs (e.g. branches and tags) in the repo.",
        "operationId": "AgentRepositoryService_ListRefs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repositoriesRefs"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "description": "Repo URL for query.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.forceRefresh",
            "description": "Whether to force a cache refresh on repo's connection state.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "query.project",
            "description": "The associated project project.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/stream/applications": {
      "get": {
        "summary": "Watch returns stream of application change events",
        "description": "Watch returns stream of application change events.",
        "operationId": "AgentApplicationService_Watch",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/applicationsApplicationWatchEvent"
                    },
                    "error": {
                      "$ref": "#/components/schemas/runtimeStreamError"
                    }
                  },
                  "title": "Stream result of applicationsApplicationWatchEvent"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "description": "the application's name.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.refresh",
            "description": "forces application reconciliation if set to true.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.project",
            "description": "the project names to restrict returned list applications.",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "query.resourceVersion",
            "description": "when specified with a watch call, shows changes that occur after that particular version of a resource.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.selector",
            "description": "the selector to to restrict returned list to applications only with matched labels.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.repo",
            "description": "the repoURL to restrict returned list applications.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{agentIdentifier}/stream/applications/{query.applicationName}/resource-tree": {
      "get": {
        "summary": "WatchResourceTree returns stream of application resource tree",
        "description": "WatchResourceTree returns stream of application resource tree.",
        "operationId": "AgentApplicationService_WatchResourceTree",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/applicationsApplicationTree"
                    },
                    "error": {
                      "$ref": "#/components/schemas/runtimeStreamError"
                    }
                  },
                  "title": "Stream result of applicationsApplicationTree"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.applicationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query.kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/agents/{identifier}": {
      "get": {
        "description": "Get agents.",
        "operationId": "AgentServiceForServer_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Agent"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AGENT_TYPE_UNSET",
                "CONNECTED_ARGO_PROVIDER",
                "MANAGED_ARGO_PROVIDER"
              ],
              "default": "AGENT_TYPE_UNSET"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AGENT_SCOPE_UNSET",
                "ACCOUNT",
                "ORG",
                "PROJECT"
              ],
              "default": "AGENT_SCOPE_UNSET"
            }
          }
        ],
        "tags": [
          "Agents"
        ]
      },
      "delete": {
        "description": "Delete agents.",
        "operationId": "AgentServiceForServer_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Agent"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AGENT_TYPE_UNSET",
                "CONNECTED_ARGO_PROVIDER",
                "MANAGED_ARGO_PROVIDER"
              ],
              "default": "AGENT_TYPE_UNSET"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AGENT_SCOPE_UNSET",
                "ACCOUNT",
                "ORG",
                "PROJECT"
              ],
              "default": "AGENT_SCOPE_UNSET"
            }
          }
        ],
        "tags": [
          "Agents"
        ]
      }
    },
    "/gitops/api/v1/agents/{identifier}/credentials": {
      "post": {
        "description": "Regenerate credentials for agents.",
        "operationId": "AgentServiceForServer_RegenerateCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Agent"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Agents"
        ]
      }
    },
    "/gitops/api/v1/agents/{identifier}/unique": {
      "get": {
        "description": "Unique returns unique agents.",
        "operationId": "AgentServiceForServer_Unique",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1UniqueMessage"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AGENT_TYPE_UNSET",
                "CONNECTED_ARGO_PROVIDER",
                "MANAGED_ARGO_PROVIDER"
              ],
              "default": "AGENT_TYPE_UNSET"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AGENT_SCOPE_UNSET",
                "ACCOUNT",
                "ORG",
                "PROJECT"
              ],
              "default": "AGENT_SCOPE_UNSET"
            }
          }
        ],
        "tags": [
          "Agents"
        ]
      }
    },
    "/gitops/api/v1/applications": {
      "post": {
        "description": "List returns list of apps",
        "operationId": "ApplicationService_ListApps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1Applicationlist"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/servicev1ApplicationQuery"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Application"
        ]
      }
    },
    "/gitops/api/v1/applications/sync": {
      "post": {
        "summary": "List returns list of application sync status",
        "description": "List returns list of application sync status",
        "operationId": "ApplicationService_ListAppSync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ApplicationSyncStatuslist"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1ApplicationSyncStatusQuery"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/applications/{name}/exists": {
      "get": {
        "summary": "Checks whether an app with the given name exists",
        "description": "Checks whether an app with the given name exists",
        "operationId": "ApplicationService_Exists",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/gitops/api/v1/appprojectsmapping": {
      "get": {
        "description": "Retrieves Harness-Argo project mappings list.",
        "operationId": "AppProjectMappingService_GetAppProjectMappingList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1AppProjectMapping"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Project mappings"
        ]
      }
    },
    "/gitops/api/v1/certificates": {
      "get": {
        "summary": "List returns list of certificates",
        "description": "List returns list of certificates",
        "operationId": "CertificateService_ListCerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Certificatelist"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/gitops/api/v1/clusters": {
      "post": {
        "summary": "List returns list of Clusters",
        "description": "List returns list of Clusters",
        "operationId": "ClusterService_ListClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Clusterlist"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/servicev1ClusterQuery"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Clusters"
        ]
      }
    },
    "/gitops/api/v1/clusters/exists": {
      "get": {
        "summary": "Checks for whether the cluster exists",
        "description": "Checks for whether the cluster exists",
        "operationId": "ClusterService_Exists",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Clusters"
        ]
      }
    },
    "/gitops/api/v1/dashboard/activity": {
      "post": {
        "summary": "Returns aggregate statistics of recent deployments",
        "description": "Returns aggregate statistics of recent deployments",
        "operationId": "DashboardService_RecentDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RecentDeploymentsDetailsList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1RecentDeploymentQuery"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Dashboard Aggregates"
        ]
      }
    },
    "/gitops/api/v1/dashboard/counts": {
      "get": {
        "summary": "List count of Cluster, Repos and Apps created within a time series",
        "description": "List count of Cluster, Repos and Apps created within a time series.",
        "operationId": "DashboardService_RecentlyCreatedCounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RecentlyCreatedOverview"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Dashboards"
        ]
      }
    },
    "/gitops/api/v1/dashboard/overview": {
      "get": {
        "summary": "GetDashboradOverview gets dashboard overview",
        "description": "Gets dashboard overview",
        "operationId": "DashboardService_GetDashboardOverview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1DashboardOverview"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Dashboards"
        ]
      }
    },
    "/gitops/api/v1/dashboard/topapps": {
      "get": {
        "summary": "List phase status counts for top 5 most deployed apps",
        "description": "List phase status counts for top 5 most deployed apps",
        "operationId": "DashboardService_TopApplicationPhaseStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1TopApplicationPhaseStatsList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Dashboard Aggregates"
        ]
      }
    },
    "/gitops/api/v1/gpgkeys": {
      "get": {
        "summary": "List all available repository certificates",
        "description": "List all available repository certificates",
        "operationId": "GnuPGKeyService_ListGPGKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1GnuPGPublicKeyList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gnuPG",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "GPG Keys"
        ]
      }
    },
    "/gitops/api/v1/repocreds": {
      "post": {
        "summary": "List repository credentials",
        "description": "List repository credentials.",
        "operationId": "AgentRepositoryCredentialsService_ListRepositoryCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servicev1RepositoryCredentialsList"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1RepositoryCredentialsQuery"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repository credentials"
        ]
      }
    },
    "/gitops/api/v1/repositories": {
      "post": {
        "summary": "List returns list of Repositories",
        "description": "List returns list of Repositories",
        "operationId": "RepositoryService_ListRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Repositorylist"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1RepositoryQuery"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Repositories"
        ]
      }
    },
    "/gitops/api/v1/repositories/exists": {
      "get": {
        "summary": "Checks whether a repository with the given name exists",
        "description": "Checks whether a repository with the given name exists.",
        "operationId": "RepositoryService_Exists",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gatewayruntimeError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "accountIdentifier",
            "description": "Account Identifier for the Entity.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgIdentifier",
            "description": "Organization Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectIdentifier",
            "description": "Project Identifier for the Entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentIdentifier",
            "description": "Agent identifier for entity.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Repositories"
        ]
      }
    },
    "/dashboard/api/dashboards/{dashboard_id}/download": {
      "get": {
        "description": "Download the data of all tiles within a Dashboard.",
        "operationId": "get_dashboard_data",
        "parameters": [
          {
            "in": "path",
            "name": "dashboard_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "file_type",
            "required": true,
            "schema": {
              "enum": [
                "csv"
              ],
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "filters"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardDownloadResponse"
                }
              }
            },
            "description": "Returns files of a specified type within a ZIP file for each tile within a Dashboard."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Please specify a valid File Type."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Dashboard not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error."
          }
        },
        "summary": "Download data within a Dashboard",
        "tags": [
          "Custom Dashboards"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Failure": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "description": "This is Failure entity as defied in Harness"
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "detailedMessage": {
            "type": "string"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/ErrorMetadata"
          }
        },
        "description": "This is Error entity as defined in Harness"
      },
      "ErrorMetadata": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "This implements different error meta data objects",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ResponseMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "INFO",
              "ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "exception": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "moduleVersion": {
                      "type": "string"
                    },
                    "methodName": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": {
                      "type": "string"
                    },
                    "nativeMethod": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "suppressed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "stackTrace": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "classLoaderName": {
                            "type": "string"
                          },
                          "moduleName": {
                            "type": "string"
                          },
                          "moduleVersion": {
                            "type": "string"
                          },
                          "methodName": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "lineNumber": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "className": {
                            "type": "string"
                          },
                          "nativeMethod": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "localizedMessage": {
                      "type": "string"
                    }
                  }
                }
              },
              "localizedMessage": {
                "type": "string"
              }
            }
          },
          "failureTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXPIRED",
                "DELEGATE_PROVISIONING",
                "CONNECTIVITY",
                "AUTHENTICATION",
                "VERIFICATION_FAILURE",
                "APPLICATION_ERROR",
                "AUTHORIZATION_ERROR",
                "TIMEOUT_ERROR",
                "POLICY_EVALUATION_FAILURE",
                "INPUT_TIMEOUT_FAILURE",
                "APPROVAL_REJECTION",
                "DELEGATE_RESTART"
              ]
            }
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Account Identifier."
          },
          "name": {
            "type": "string",
            "description": "Name of the Account."
          },
          "companyName": {
            "type": "string",
            "description": "Name of the Company."
          },
          "cluster": {
            "type": "string",
            "description": "Name of the cluster associated with this Account."
          },
          "defaultExperience": {
            "type": "string",
            "description": "Default experience of the Account.",
            "enum": [
              "NG",
              "CG"
            ]
          },
          "authenticationMechanism": {
            "type": "string",
            "description": "Authentication mechanism associated with the account.",
            "enum": [
              "USER_PASSWORD",
              "SAML",
              "LDAP",
              "OAUTH"
            ]
          },
          "serviceAccountConfig": {
            "$ref": "#/components/schemas/ServiceAccountConfig"
          },
          "twoFactorAdminEnforced": {
            "type": "boolean"
          },
          "nextGenEnabled": {
            "type": "boolean"
          },
          "productLed": {
            "type": "boolean"
          }
        },
        "description": "Account details defined in Harness."
      },
      "ResponseDTOAccount": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Account"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceAccountConfig": {
        "type": "object",
        "properties": {
          "apiKeyLimit": {
            "type": "integer",
            "format": "int64"
          },
          "tokenLimit": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Service Account configuration associated with this Account."
      },
      "ResponseDTOBoolean": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "boolean"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "EntityGitDetails": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Indicates if the Entity is valid"
          },
          "invalidYaml": {
            "type": "string",
            "description": "This has the Git File content if the entity is invalid"
          }
        },
        "description": "This contains Validity Details of the Entity"
      },
      "EnvironmentGroup": {
        "type": "object",
        "properties": {
          "envGroup": {
            "$ref": "#/components/schemas/EnvironmentGroupResponse"
          },
          "createdAt": {
            "type": "integer",
            "description": "Time at which the entity was created",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "Time at which the entity was last updated",
            "format": "int64"
          }
        },
        "description": "This is the view of Environment Group Entity defined in Harness"
      },
      "EnvironmentGroupResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier for the Entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the Entity"
          },
          "description": {
            "type": "string",
            "description": "Description of the entity"
          },
          "color": {
            "type": "string",
            "description": "Color Code for the Entity"
          },
          "deleted": {
            "type": "boolean",
            "description": "Deletion status for Entity"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          },
          "envIdentifiers": {
            "type": "array",
            "description": "Environment Identifiers linked with Environment Group Identity",
            "items": {
              "type": "string",
              "description": "Environment Identifiers linked with Environment Group Identity"
            }
          },
          "envResponse": {
            "type": "array",
            "description": "Info of Environments linked with Entity",
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            }
          },
          "gitDetails": {
            "$ref": "#/components/schemas/EntityGitDetails"
          }
        },
        "description": "This is the Environment Group Entity defined in Harness"
      },
      "EnvironmentResponse": {
        "type": "object",
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/EnvironmentResponseDetails"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EnvironmentResponseDetails": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PreProduction",
              "Production"
            ]
          },
          "deleted": {
            "type": "boolean"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "yaml": {
            "type": "string"
          }
        },
        "description": "This is the Environment entity defined in Harness"
      },
      "ResponseDTOEnvironmentGroup": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/EnvironmentGroup"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "EnvironmentGroupRequest": {
        "required": [
          "yaml"
        ],
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,63}$",
            "type": "string",
            "description": "Identifier of the Environment Group."
          },
          "color": {
            "type": "string",
            "description": "Color of the Environment Group."
          },
          "yaml": {
            "type": "string",
            "description": "Yaml of the Environment Group."
          }
        },
        "description": "This is the EnvironmentGroupRequest entity defined in Harness"
      },
      "EnvironmentGroupDelete": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "description": "Value true, when the Entity is deleted"
          },
          "accountId": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier for the Entity."
          }
        },
        "description": "This is the view of Environment Group Delete Response defined in Harness"
      },
      "ResponseDTOEnvironmentGroupDelete": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/EnvironmentGroupDelete"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseEnvironmentGroup": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentGroup"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseEnvironmentGroup": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseEnvironmentGroup"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "FilterProperties": {
        "required": [
          "filterType"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Filter tags as a key-value pair."
            },
            "description": "Filter tags as a key-value pair."
          },
          "filterType": {
            "type": "string",
            "description": "This specifies the corresponding Entity of the filter.",
            "enum": [
              "Connector",
              "DelegateProfile",
              "Delegate",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit",
              "Template",
              "EnvironmentGroup",
              "FileStore",
              "CCMRecommendation",
              "Anomaly",
              "Environment",
              "RuleExecution"
            ]
          }
        },
        "description": "Properties of the Filter entity defined in Harness.",
        "discriminator": {
          "propertyName": "filterType"
        }
      },
      "AppDynamicsConnectorDTO": {
        "required": [
          "accountname",
          "controllerUrl"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "accountname": {
                "type": "string"
              },
              "controllerUrl": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "passwordRef": {
                "type": "string"
              },
              "clientSecretRef": {
                "type": "string"
              },
              "clientId": {
                "type": "string"
              },
              "authType": {
                "type": "string",
                "enum": [
                  "UsernamePassword",
                  "ApiClientToken"
                ]
              }
            }
          }
        ]
      },
      "ArtifactoryAuthCredentials": {
        "type": "object",
        "description": "This entity contains the details of credentials for Artifactory Authentication"
      },
      "ArtifactoryAuthentication": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UsernamePassword",
              "Anonymous"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/ArtifactoryAuthCredentials"
          }
        },
        "description": "This entity contains the details for Artifactory Authentication"
      },
      "ArtifactoryConnector": {
        "required": [
          "artifactoryServerUrl"
        ],
        "type": "object",
        "description": "This entity contains the details of the Artifactory Connectors",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "artifactoryServerUrl": {
                "type": "string"
              },
              "auth": {
                "$ref": "#/components/schemas/ArtifactoryAuthentication"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ArtifactoryUsernamePasswordAuth": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This entity contains the details of the Artifactory Username and Password",
        "allOf": [
          {
            "$ref": "#/components/schemas/ArtifactoryAuthCredentials"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AwsCodeCommitAuthentication": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "HTTPS"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AwsCodeCommitCredentials"
          }
        },
        "description": "This contains details of the AWS Code Commit credentials"
      },
      "AwsCodeCommitConnector": {
        "required": [
          "authentication",
          "type",
          "url"
        ],
        "type": "object",
        "description": "This contains details of the AWS Code Commit connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "authentication": {
                "$ref": "#/components/schemas/AwsCodeCommitAuthentication"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "Repo",
                  "Region"
                ]
              }
            }
          }
        ]
      },
      "AwsCodeCommitCredentials": {
        "type": "object",
        "description": "This interface for details of the AWS Code Commit credentials"
      },
      "AwsCodeCommitHttpsCredentials": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "description": "This contains details of the AWS Code Commit credentials used via HTTPS connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsCodeCommitCredentials"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "AWSCredentials"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/AwsCodeCommitHttpsCredentialsSpec"
              }
            }
          }
        ]
      },
      "AwsCodeCommitHttpsCredentialsSpec": {
        "type": "object",
        "description": "This contains details of the AWS Code Commit credentials specs such as references of username and password used via HTTPS connections"
      },
      "AwsCodeCommitSecretKeyAccessKey": {
        "required": [
          "secretKeyRef"
        ],
        "type": "object",
        "description": "This contains details of the AWS Code Commit secret references",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsCodeCommitHttpsCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "accessKey": {
                "type": "string"
              },
              "accessKeyRef": {
                "type": "string"
              },
              "secretKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AwsConnector": {
        "required": [
          "credential"
        ],
        "type": "object",
        "description": "This contains details of the AWS connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "$ref": "#/components/schemas/AwsCredential"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AwsCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "crossAccountAccess": {
            "$ref": "#/components/schemas/CrossAccountAccess"
          },
          "type": {
            "type": "string",
            "enum": [
              "InheritFromDelegate",
              "ManualConfig",
              "Irsa"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AwsCredentialSpec"
          },
          "region": {
            "type": "string"
          }
        },
        "description": "This contains details of the AWS connector credential"
      },
      "AwsCredentialSpec": {
        "type": "object",
        "description": "This contains AWS connector credential spec"
      },
      "AwsCurAttributes": {
        "required": [
          "reportName",
          "s3BucketName"
        ],
        "type": "object",
        "properties": {
          "reportName": {
            "type": "string"
          },
          "s3BucketName": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "s3Prefix": {
            "type": "string"
          }
        },
        "description": "This contains AWS cost and usage reports attributes"
      },
      "AwsKmsConnector": {
        "required": [
          "credential",
          "kmsArn",
          "region"
        ],
        "type": "object",
        "description": "This has configuration details for the AWS KMS Secret Manager.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "$ref": "#/components/schemas/AwsKmsConnectorCredential"
              },
              "kmsArn": {
                "type": "string",
                "description": "ARN for AWS KMS."
              },
              "region": {
                "type": "string",
                "description": "Region for AWS KMS."
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.",
                "items": {
                  "type": "string",
                  "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager."
                }
              },
              "default": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AwsKmsConnectorCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This indicates AWS credential types, Manual Credential, Assume IAM Role, Assume STS Role.",
            "enum": [
              "AssumeIAMRole",
              "AssumeSTSRole",
              "ManualConfig"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AwsKmsCredentialSpec"
          }
        },
        "description": "Returns the configuration details for the AWS KMS Secret Manager."
      },
      "AwsKmsCredentialSpec": {
        "type": "object",
        "description": "This is interface that returns credentials specific to all roles for the AWS KMS Secret Manager."
      },
      "AwsKmsCredentialSpecAssumeIAM": {
        "required": [
          "delegateSelectors"
        ],
        "type": "object",
        "description": "Returns the Delegate Selectors used by this AWS KMS Secret Manager Connector.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsKmsCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "maxItems": 2147483647,
                "minItems": 1,
                "uniqueItems": true,
                "type": "array",
                "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.",
                "items": {
                  "type": "string",
                  "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager."
                }
              }
            }
          }
        ]
      },
      "AwsKmsCredentialSpecAssumeSTS": {
        "required": [
          "delegateSelectors",
          "roleArn"
        ],
        "type": "object",
        "description": "Returns Delegate selectors, Role ARN and STS role duration used by AWS KMS Secret Manager.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsKmsCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "maxItems": 2147483647,
                "minItems": 1,
                "uniqueItems": true,
                "type": "array",
                "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.",
                "items": {
                  "type": "string",
                  "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager."
                }
              },
              "roleArn": {
                "type": "string",
                "description": "Role ARN for the Delegate with STS Role."
              },
              "externalName": {
                "type": "string",
                "description": "External Name."
              },
              "assumeStsRoleDuration": {
                "type": "integer",
                "description": "This is the time duration for STS Role.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AwsKmsCredentialSpecManualConfig": {
        "required": [
          "accessKey",
          "secretKey"
        ],
        "type": "object",
        "description": "This contains the AWS KMS Secret Manager's secret reference access key and secret key.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsKmsCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "accessKey": {
                "type": "string",
                "description": "Access Key for AWS authentication."
              },
              "secretKey": {
                "type": "string",
                "description": "Secret Key for AWS authentication."
              }
            }
          }
        ]
      },
      "AwsManualConfigSpec": {
        "required": [
          "secretKeyRef"
        ],
        "type": "object",
        "description": "This contains AWS manual credentials connector spec",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "accessKey": {
                "type": "string"
              },
              "accessKeyRef": {
                "type": "string"
              },
              "secretKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AwsSMCredentialSpecAssumeIAM": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsSecretManagerCredentialSpec"
          }
        ]
      },
      "AwsSMCredentialSpecAssumeSTS": {
        "required": [
          "roleArn"
        ],
        "type": "object",
        "description": "Returns credentials for the AWS Secret Manager for the IAM role.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsSecretManagerCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "roleArn": {
                "type": "string",
                "description": "Role ARN for the Delegate with STS Role."
              },
              "externalId": {
                "type": "string",
                "description": "External Name."
              },
              "assumeStsRoleDuration": {
                "type": "integer",
                "description": "This is the time duration for STS Role.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AwsSMCredentialSpecManualConfig": {
        "required": [
          "accessKey",
          "secretKey"
        ],
        "type": "object",
        "description": "Returns secret reference access key and secret key of AWS Secret Manager.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AwsSecretManagerCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "accessKey": {
                "type": "string",
                "description": "Access Key for AWS authentication."
              },
              "secretKey": {
                "type": "string",
                "description": "Secret Key for AWS authentication."
              }
            }
          }
        ]
      },
      "AwsSecretManager": {
        "required": [
          "credential",
          "region"
        ],
        "type": "object",
        "description": "Returns AWS Secret Manager configuration details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "$ref": "#/components/schemas/AwsSecretManagerCredential"
              },
              "region": {
                "type": "string",
                "description": "Region for AWS SM."
              },
              "secretNamePrefix": {
                "type": "string",
                "description": "Text that is prepended to the Secret name as a prefix."
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.",
                "items": {
                  "type": "string",
                  "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager."
                }
              },
              "default": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AwsSecretManagerCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This indicates AWS credential types, Manual Credential, Assume IAM Role, Assume STS Role.",
            "enum": [
              "AssumeIAMRole",
              "AssumeSTSRole",
              "ManualConfig"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AwsSecretManagerCredentialSpec"
          }
        },
        "description": "This contains the credential type and configuration of the AWS Secret Manager."
      },
      "AwsSecretManagerCredentialSpec": {
        "type": "object",
        "description": "This is interface that returns credentials specific to all roles for the AWS Secret Manager."
      },
      "AzureArtifactsAuthentication": {
        "required": [
          "spec"
        ],
        "type": "object",
        "properties": {
          "spec": {
            "$ref": "#/components/schemas/AzureArtifactsHttpCredentials"
          }
        },
        "description": "This contains details of the information needed for Azure DevOps access"
      },
      "AzureArtifactsConnector": {
        "required": [
          "auth",
          "azureArtifactsUrl"
        ],
        "type": "object",
        "description": "This contains details of AzureArtifacts connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "azureArtifactsUrl": {
                "type": "string",
                "description": "HTTP URL for Azure Artifacts Registry"
              },
              "auth": {
                "$ref": "#/components/schemas/AzureArtifactsAuthentication"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "description": "Selected Connectivity Modes",
                "items": {
                  "type": "string",
                  "description": "Selected Connectivity Modes"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AzureArtifactsHttpCredentials": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PersonalAccessToken"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AzureArtifactsUsernameToken"
          }
        },
        "description": "This contains details of the AzureArtifacts credentials used via HTTP connections"
      },
      "AzureArtifactsUsernameToken": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "properties": {
          "tokenRef": {
            "type": "string"
          }
        },
        "description": "This contains details of the AzureArtifacts credentials Specs such as references of username and token"
      },
      "AzureAuth": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Secret",
              "Certificate"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AzureAuthCredential"
          }
        },
        "description": "This contains azure auth details"
      },
      "AzureAuthCredential": {
        "type": "object",
        "description": "This contains azure auth credentials"
      },
      "AzureClientKeyCert": {
        "required": [
          "certificateRef"
        ],
        "type": "object",
        "description": "This contains azure client key certificate details",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureAuthCredential"
          },
          {
            "type": "object",
            "properties": {
              "certificateRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureClientSecretKey": {
        "required": [
          "secretRef"
        ],
        "type": "object",
        "description": "This contains azure client secret key details",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureAuthCredential"
          },
          {
            "type": "object",
            "properties": {
              "secretRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureConnector": {
        "required": [
          "azureEnvironmentType",
          "credential"
        ],
        "type": "object",
        "description": "This contains details of the Azure connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "$ref": "#/components/schemas/AzureCredential"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "azureEnvironmentType": {
                "type": "string",
                "description": "This specifies the Azure Environment type, which is AZURE by default.",
                "enum": [
                  "AZURE",
                  "AZURE_US_GOVERNMENT"
                ]
              },
              "executeOnDelegate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AzureCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "InheritFromDelegate",
              "ManualConfig"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AzureCredentialSpec"
          }
        },
        "description": "This contains Azure connector credentials"
      },
      "AzureCredentialSpec": {
        "type": "object",
        "description": "This contains Azure connector credentials spec"
      },
      "AzureInheritFromDelegateDetails": {
        "required": [
          "auth"
        ],
        "type": "object",
        "description": "This contains Azure inherit from delegate credentials connector details",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "auth": {
                "$ref": "#/components/schemas/AzureMSIAuth"
              }
            }
          }
        ]
      },
      "AzureKeyVaultConnector": {
        "required": [
          "clientId",
          "secretKey",
          "subscription",
          "tenantId",
          "vaultName"
        ],
        "type": "object",
        "description": "Returns configuration details for the Azure Key Vault Secret Manager.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "Application ID of the Azure App."
              },
              "secretKey": {
                "type": "string",
                "description": "This is the Harness text secret with the Azure authentication key as its value."
              },
              "tenantId": {
                "type": "string",
                "description": "The Azure Active Directory (AAD) directory ID where you created your application."
              },
              "vaultName": {
                "type": "string",
                "description": "The Azure Active Directory (AAD) directory ID where you created your application."
              },
              "subscription": {
                "type": "string",
                "description": "Azure Subscription ID."
              },
              "isDefault": {
                "type": "boolean",
                "writeOnly": true
              },
              "azureEnvironmentType": {
                "type": "string",
                "description": "This specifies the Azure Environment type, which is AZURE by default.",
                "enum": [
                  "AZURE",
                  "AZURE_US_GOVERNMENT"
                ]
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.",
                "items": {
                  "type": "string",
                  "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager."
                }
              },
              "default": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AzureMSIAuth": {
        "type": "object",
        "description": "This contains azure MSI auth details"
      },
      "AzureManualDetails": {
        "required": [
          "applicationId",
          "auth",
          "tenantId"
        ],
        "type": "object",
        "description": "This contains Azure manual credentials connector details",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "applicationId": {
                "type": "string",
                "description": "Application ID of the Azure App."
              },
              "tenantId": {
                "type": "string",
                "description": "The Azure Active Directory (AAD) directory ID where you created your application."
              },
              "auth": {
                "$ref": "#/components/schemas/AzureAuth"
              }
            }
          }
        ]
      },
      "AzureRepoApiAccess": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Token"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AzureRepoApiAccessSpec"
          }
        },
        "description": "This contains details of the information needed for Azure Repo API access"
      },
      "AzureRepoApiAccessSpec": {
        "type": "object",
        "description": "This contains details of the information such as references of username and password needed for Azure Repo API access"
      },
      "AzureRepoAuthentication": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Http",
              "Ssh"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/AzureRepoCredentials"
          }
        },
        "description": "This contains details of the information needed for Azure DevOps access"
      },
      "AzureRepoConfig": {
        "required": [
          "authentication",
          "type",
          "url"
        ],
        "type": "object",
        "description": "This contains details of AzureRepo connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "SSH | HTTP URL based on type of connection"
              },
              "validationRepo": {
                "type": "string",
                "description": "The repo to validate AzureRepo credentials. Only valid for Account type connector"
              },
              "authentication": {
                "$ref": "#/components/schemas/AzureRepoAuthentication"
              },
              "apiAccess": {
                "$ref": "#/components/schemas/AzureRepoApiAccess"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "description": "Selected Connectivity Modes",
                "items": {
                  "type": "string",
                  "description": "Selected Connectivity Modes"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "description": "Project | Repository connector type",
                "enum": [
                  "Project",
                  "Repo"
                ]
              }
            }
          }
        ]
      },
      "AzureRepoCredentials": {
        "type": "object",
        "description": "This is a interface for details of the Azure DevOps credentials"
      },
      "AzureRepoHttpCredentials": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "description": "This contains details of the AzureRepo credentials used via HTTP connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureRepoCredentials"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UsernameToken"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/AzureRepoHttpCredentialsSpec"
              }
            }
          }
        ]
      },
      "AzureRepoHttpCredentialsSpec": {
        "type": "object",
        "description": "This is a interface for details of the AzureRepo credentials Specs such as references of username and password"
      },
      "AzureRepoSshCredentials": {
        "required": [
          "sshKeyRef"
        ],
        "type": "object",
        "description": "This contains details of the AzureRepo credentials used via SSH connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureRepoCredentials"
          },
          {
            "type": "object",
            "properties": {
              "sshKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureRepoTokenSpec": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the information such as references of token needed for AzureRepo API access",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureRepoApiAccessSpec"
          },
          {
            "type": "object",
            "properties": {
              "tokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureRepoUsernameToken": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the AzureRepo credentials Specs such as references of username and token",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureRepoHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "tokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureSystemAssignedMSIAuth": {
        "type": "object",
        "description": "This contains azure SystemAssigned MSI auth details",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureAuthCredential"
          }
        ]
      },
      "AzureUserAssignedMSIAuth": {
        "required": [
          "clientId"
        ],
        "type": "object",
        "description": "This contains azure UserAssigned MSI auth details",
        "allOf": [
          {
            "$ref": "#/components/schemas/AzureAuthCredential"
          },
          {
            "type": "object",
            "properties": {
              "clientId": {
                "type": "string",
                "description": "Client Id of the ManagedIdentity resource"
              }
            }
          }
        ]
      },
      "BillingExportSpec": {
        "required": [
          "containerName",
          "directoryName",
          "reportName",
          "storageAccountName",
          "subscriptionId"
        ],
        "type": "object",
        "properties": {
          "storageAccountName": {
            "type": "string"
          },
          "containerName": {
            "type": "string"
          },
          "directoryName": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          }
        },
        "description": "Returns Billing details like StorageAccount's Name, container's Name, directory's Name, report Name and subscription Id"
      },
      "BitbucketApiAccess": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UsernameToken"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/BitbucketApiAccess"
          }
        },
        "description": "This contains details of the information needed for Bitbucket API access"
      },
      "BitbucketAuthentication": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Http",
              "Ssh"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/BitbucketCredentials"
          }
        },
        "description": "This contains details of the information needed for Bitbucket access"
      },
      "BitbucketConnector": {
        "required": [
          "authentication",
          "type",
          "url"
        ],
        "type": "object",
        "description": "This contains details of Bitbucket connectors",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "validationRepo": {
                "type": "string"
              },
              "authentication": {
                "$ref": "#/components/schemas/BitbucketAuthentication"
              },
              "apiAccess": {
                "$ref": "#/components/schemas/BitbucketApiAccess"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Account",
                  "Repo"
                ]
              }
            }
          }
        ]
      },
      "BitbucketCredentials": {
        "type": "object",
        "description": "This is a interface for details of the Bitbucket credentials"
      },
      "BitbucketHttpCredentials": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "description": "This contains details of the Bitbucket credentials used via HTTP connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/BitbucketCredentials"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UsernamePassword"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/BitbucketHttpCredentialsSpec"
              }
            }
          }
        ]
      },
      "BitbucketHttpCredentialsSpec": {
        "type": "object",
        "description": "This is a interface for details of the Bitbucket credentials Specs such as references of username and password"
      },
      "BitbucketSshCredentials": {
        "required": [
          "sshKeyRef"
        ],
        "type": "object",
        "description": "This contains details of the Bitbucket credentials used via SSH connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/BitbucketCredentials"
          },
          {
            "type": "object",
            "properties": {
              "sshKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "BitbucketUsernamePassword": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This contains details of the Bitbucket credentials Specs such as references of username and password",
        "allOf": [
          {
            "$ref": "#/components/schemas/BitbucketHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "BitbucketUsernameTokenApiAccess": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the Bitbucket API access credentials Specs such as references of username and token",
        "allOf": [
          {
            "$ref": "#/components/schemas/BitbucketApiAccess"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "tokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ByteString": {
        "type": "object",
        "properties": {
          "validUtf8": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "CEAwsConnector": {
        "required": [
          "crossAccountAccess",
          "featuresEnabled"
        ],
        "type": "object",
        "description": "This contains the cost explorer of AWS connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "crossAccountAccess": {
                "$ref": "#/components/schemas/CrossAccountAccess"
              },
              "curAttributes": {
                "$ref": "#/components/schemas/AwsCurAttributes"
              },
              "awsAccountId": {
                "type": "string"
              },
              "isAWSGovCloudAccount": {
                "type": "boolean"
              },
              "featuresEnabled": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "BILLING",
                    "OPTIMIZATION",
                    "VISIBILITY",
                    "GOVERNANCE",
                    "COMMITMENT_ORCHESTRATOR"
                  ]
                }
              }
            }
          }
        ]
      },
      "CEAzureConnector": {
        "required": [
          "featuresEnabled",
          "subscriptionId",
          "tenantId"
        ],
        "type": "object",
        "description": "This contains the cost explorer of Azure connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "featuresEnabled": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "BILLING",
                    "OPTIMIZATION",
                    "VISIBILITY",
                    "GOVERNANCE",
                    "COMMITMENT_ORCHESTRATOR"
                  ]
                }
              },
              "tenantId": {
                "type": "string"
              },
              "subscriptionId": {
                "type": "string"
              },
              "billingExportSpec": {
                "$ref": "#/components/schemas/BillingExportSpec"
              }
            }
          }
        ]
      },
      "CEKubernetesClusterConfigDTO": {
        "required": [
          "connectorRef",
          "featuresEnabled"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "featuresEnabled": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "BILLING",
                    "OPTIMIZATION",
                    "VISIBILITY",
                    "GOVERNANCE",
                    "COMMITMENT_ORCHESTRATOR"
                  ]
                }
              }
            }
          }
        ]
      },
      "ConnectorActivityDetails": {
        "type": "object",
        "properties": {
          "lastActivityTime": {
            "type": "integer",
            "description": "This specifies the time of the most recent activity on the Connector.",
            "format": "int64"
          }
        },
        "description": "This contains details of any kind of activities corresponding to the Connector."
      },
      "ConnectorConfig": {
        "required": [
          "connectorType"
        ],
        "type": "object",
        "properties": {
          "connectorType": {
            "type": "string"
          }
        },
        "description": "This is the view of the ConnectorConfig entity defined in Harness",
        "discriminator": {
          "propertyName": "connectorType"
        }
      },
      "ConnectorConnectivityDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Connectivity status of a Connector.",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "PARTIAL",
              "UNKNOWN"
            ]
          },
          "errorSummary": {
            "type": "string",
            "description": "Summary of errors."
          },
          "errors": {
            "type": "array",
            "description": "List of errors and their details.",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "testedAt": {
            "type": "integer",
            "description": "Time at which Test Connection was completed ",
            "format": "int64"
          },
          "lastTestedAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastConnectedAt": {
            "type": "integer",
            "description": "This is the last time at which the Connector was successfully connected.",
            "format": "int64"
          }
        },
        "description": "Details of the connectivity status of the Connector."
      },
      "ConnectorInfo": {
        "required": [
          "identifier",
          "name",
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Connector."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the Connector."
          },
          "description": {
            "type": "string",
            "description": "Description of the entity"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          },
          "type": {
            "type": "string",
            "description": "Type of the Connector.",
            "enum": [
              "K8sCluster",
              "Git",
              "Splunk",
              "AppDynamics",
              "Prometheus",
              "Dynatrace",
              "Vault",
              "AzureKeyVault",
              "DockerRegistry",
              "Local",
              "AwsKms",
              "GcpKms",
              "AwsSecretManager",
              "Gcp",
              "Aws",
              "Azure",
              "Artifactory",
              "Jira",
              "Nexus",
              "Github",
              "Gitlab",
              "Bitbucket",
              "Codecommit",
              "CEAws",
              "CEAzure",
              "GcpCloudCost",
              "CEK8sCluster",
              "HttpHelmRepo",
              "NewRelic",
              "Datadog",
              "SumoLogic",
              "PagerDuty",
              "CustomHealth",
              "ServiceNow",
              "ErrorTracking",
              "Pdc",
              "AzureRepo",
              "Jenkins",
              "OciHelmRepo",
              "CustomSecretManager",
              "ElasticSearch",
              "GcpSecretManager",
              "AzureArtifacts",
              "Tas",
              "Spot"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/ConnectorConfig"
          }
        },
        "description": "This has the Connector details defined in Harness"
      },
      "ConnectorResponse": {
        "type": "object",
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/ConnectorInfo"
          },
          "createdAt": {
            "type": "integer",
            "description": "This is the time at which the Connector was created.",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "This is the time at which the Connector was last modified.",
            "format": "int64"
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorConnectivityDetails"
          },
          "activityDetails": {
            "$ref": "#/components/schemas/ConnectorActivityDetails"
          },
          "harnessManaged": {
            "type": "boolean",
            "description": "This indicates if this Connector is managed by Harness or not. If True, Harness can manage and modify this Connector."
          },
          "gitDetails": {
            "$ref": "#/components/schemas/EntityGitDetails"
          },
          "entityValidityDetails": {
            "$ref": "#/components/schemas/EntityGitDetails"
          },
          "governanceMetadata": {
            "$ref": "#/components/schemas/GovernanceMetadata"
          }
        },
        "description": "This has the Connector details along with its metadata."
      },
      "CrossAccountAccess": {
        "required": [
          "crossAccountRoleArn"
        ],
        "type": "object",
        "properties": {
          "crossAccountRoleArn": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          }
        },
        "description": "This contains AWS connector cross account access details"
      },
      "CustomHealthConnectorDTO": {
        "required": [
          "baseURL",
          "method"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "baseURL": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomHealthKeyAndValue"
                }
              },
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomHealthKeyAndValue"
                }
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ]
              },
              "validationBody": {
                "type": "string"
              },
              "validationPath": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "CustomHealthKeyAndValue": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "isValueEncrypted": {
            "type": "boolean",
            "writeOnly": true
          },
          "encryptedValueRef": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "valueEncrypted": {
            "type": "boolean"
          }
        }
      },
      "CustomSecretManager": {
        "required": [
          "template"
        ],
        "type": "object",
        "description": "This contains details of Custom Secret Manager connectors",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "onDelegate": {
                "type": "boolean"
              },
              "isDefault": {
                "type": "boolean",
                "writeOnly": true
              },
              "connectorRef": {
                "type": "string",
                "description": "This is the authentication token used to connect underlying secret manager."
              },
              "host": {
                "type": "string"
              },
              "workingDirectory": {
                "type": "string"
              },
              "template": {
                "$ref": "#/components/schemas/TemplateLinkConfigForCustomSecretManager"
              },
              "default": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "DatadogConnectorDTO": {
        "required": [
          "apiKeyRef",
          "applicationKeyRef",
          "url"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "applicationKeyRef": {
                "type": "string"
              },
              "apiKeyRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Descriptor": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "proto": {
            "$ref": "#/components/schemas/DescriptorProto"
          },
          "fullName": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/FileDescriptor"
          },
          "containingType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "nestedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Descriptor"
            }
          },
          "enumTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDescriptor"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptor"
            }
          },
          "extensions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptor"
            }
          },
          "oneofs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OneofDescriptor"
            }
          },
          "options": {
            "$ref": "#/components/schemas/MessageOptions"
          },
          "realOneofs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OneofDescriptor"
            }
          },
          "extendable": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DescriptorProto": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "options": {
            "$ref": "#/components/schemas/MessageOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "fieldCount": {
            "type": "integer",
            "format": "int32"
          },
          "enumTypeCount": {
            "type": "integer",
            "format": "int32"
          },
          "extensionCount": {
            "type": "integer",
            "format": "int32"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/DescriptorProto"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserDescriptorProto"
          },
          "reservedRangeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedRange"
            }
          },
          "reservedNameList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "extensionRangeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionRange"
            }
          },
          "oneofDeclCount": {
            "type": "integer",
            "format": "int32"
          },
          "nestedTypeCount": {
            "type": "integer",
            "format": "int32"
          },
          "extensionRangeCount": {
            "type": "integer",
            "format": "int32"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "enumTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDescriptorProto"
            }
          },
          "enumTypeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDescriptorProtoOrBuilder"
            }
          },
          "extensionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProto"
            }
          },
          "extensionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
            }
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/MessageOptionsOrBuilder"
          },
          "reservedNameCount": {
            "type": "integer",
            "format": "int32"
          },
          "fieldList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProto"
            }
          },
          "fieldOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
            }
          },
          "nestedTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescriptorProto"
            }
          },
          "nestedTypeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescriptorProtoOrBuilder"
            }
          },
          "extensionRangeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionRangeOrBuilder"
            }
          },
          "oneofDeclList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OneofDescriptorProto"
            }
          },
          "oneofDeclOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OneofDescriptorProtoOrBuilder"
            }
          },
          "reservedRangeCount": {
            "type": "integer",
            "format": "int32"
          },
          "reservedRangeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedRangeOrBuilder"
            }
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "DescriptorProtoOrBuilder": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/MessageOptions"
          },
          "fieldCount": {
            "type": "integer",
            "format": "int32"
          },
          "enumTypeCount": {
            "type": "integer",
            "format": "int32"
          },
          "extensionCount": {
            "type": "integer",
            "format": "int32"
          },
          "reservedRangeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedRange"
            }
          },
          "reservedNameList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "extensionRangeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionRange"
            }
          },
          "oneofDeclCount": {
            "type": "integer",
            "format": "int32"
          },
          "nestedTypeCount": {
            "type": "integer",
            "format": "int32"
          },
          "extensionRangeCount": {
            "type": "integer",
            "format": "int32"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "enumTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDescriptorProto"
            }
          },
          "enumTypeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDescriptorProtoOrBuilder"
            }
          },
          "extensionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProto"
            }
          },
          "extensionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
            }
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/MessageOptionsOrBuilder"
          },
          "reservedNameCount": {
            "type": "integer",
            "format": "int32"
          },
          "fieldList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProto"
            }
          },
          "fieldOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
            }
          },
          "extensionRangeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionRangeOrBuilder"
            }
          },
          "oneofDeclList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OneofDescriptorProto"
            }
          },
          "oneofDeclOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OneofDescriptorProtoOrBuilder"
            }
          },
          "reservedRangeCount": {
            "type": "integer",
            "format": "int32"
          },
          "reservedRangeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedRangeOrBuilder"
            }
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "DockerAuthCredentials": {
        "type": "object",
        "description": "This contains details of credentials for Docker Authentication"
      },
      "DockerAuthentication": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UsernamePassword",
              "Anonymous"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/DockerAuthCredentials"
          }
        },
        "description": "This entity contains the details for Docker Authentication"
      },
      "DockerConnector": {
        "required": [
          "dockerRegistryUrl",
          "providerType"
        ],
        "type": "object",
        "description": "Docker Connector details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "dockerRegistryUrl": {
                "type": "string"
              },
              "providerType": {
                "type": "string",
                "description": "This entity contains the details of the Docker Registry",
                "enum": [
                  "DockerHub",
                  "Harbor",
                  "Quay",
                  "Other"
                ]
              },
              "auth": {
                "$ref": "#/components/schemas/DockerAuthentication"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "DockerUserNamePassword": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This entity contains the details of the Docker Username and Password",
        "allOf": [
          {
            "$ref": "#/components/schemas/DockerAuthCredentials"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DynatraceConnectorDTO": {
        "required": [
          "apiTokenRef",
          "url"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "apiTokenRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ELKConnectorDTO": {
        "required": [
          "url"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "username": {
                "type": "string"
              },
              "apiKeyId": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              },
              "apiKeyRef": {
                "type": "string"
              },
              "authType": {
                "type": "string",
                "enum": [
                  "UsernamePassword",
                  "ApiClientToken",
                  "None"
                ]
              }
            }
          }
        ]
      },
      "EnumDescriptor": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "proto": {
            "$ref": "#/components/schemas/EnumDescriptorProto"
          },
          "fullName": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/FileDescriptor"
          },
          "containingType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueDescriptor"
            }
          },
          "options": {
            "$ref": "#/components/schemas/EnumOptions"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "EnumDescriptorProto": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "options": {
            "$ref": "#/components/schemas/EnumOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/EnumDescriptorProto"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserEnumDescriptorProto"
          },
          "reservedRangeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumReservedRange"
            }
          },
          "reservedNameList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/EnumOptionsOrBuilder"
          },
          "valueList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueDescriptorProto"
            }
          },
          "valueCount": {
            "type": "integer",
            "format": "int32"
          },
          "valueOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueDescriptorProtoOrBuilder"
            }
          },
          "reservedNameCount": {
            "type": "integer",
            "format": "int32"
          },
          "reservedRangeCount": {
            "type": "integer",
            "format": "int32"
          },
          "reservedRangeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumReservedRangeOrBuilder"
            }
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "EnumDescriptorProtoOrBuilder": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/EnumOptions"
          },
          "reservedRangeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumReservedRange"
            }
          },
          "reservedNameList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/EnumOptionsOrBuilder"
          },
          "valueList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueDescriptorProto"
            }
          },
          "valueCount": {
            "type": "integer",
            "format": "int32"
          },
          "valueOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueDescriptorProtoOrBuilder"
            }
          },
          "reservedNameCount": {
            "type": "integer",
            "format": "int32"
          },
          "reservedRangeCount": {
            "type": "integer",
            "format": "int32"
          },
          "reservedRangeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumReservedRangeOrBuilder"
            }
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "EnumOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/EnumOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserEnumOptions"
          },
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "allowAlias": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "EnumOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "allowAlias": {
            "type": "boolean"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "EnumReservedRange": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/EnumReservedRange"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserEnumReservedRange"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "EnumReservedRangeOrBuilder": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "EnumValueDescriptor": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "proto": {
            "$ref": "#/components/schemas/EnumValueDescriptorProto"
          },
          "fullName": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EnumDescriptor"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/EnumValueOptions"
          },
          "name": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/FileDescriptor"
          }
        }
      },
      "EnumValueDescriptorProto": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/EnumValueOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/EnumValueDescriptorProto"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserEnumValueDescriptorProto"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/EnumValueOptionsOrBuilder"
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "EnumValueDescriptorProtoOrBuilder": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/EnumValueOptions"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/EnumValueOptionsOrBuilder"
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "EnumValueOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/EnumValueOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserEnumValueOptions"
          },
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "EnumValueOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Host error details"
      },
      "ErrorTrackingConnectorDTO": {
        "required": [
          "apiKeyRef",
          "url"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "apiKeyRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ExtensionRange": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/ExtensionRangeOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ExtensionRange"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserExtensionRange"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/ExtensionRangeOptionsOrBuilder"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExtensionRangeOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ExtensionRangeOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserExtensionRangeOptions"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExtensionRangeOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ExtensionRangeOrBuilder": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/ExtensionRangeOptions"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/ExtensionRangeOptionsOrBuilder"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "FieldDescriptor": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "proto": {
            "$ref": "#/components/schemas/FieldDescriptorProto"
          },
          "fullName": {
            "type": "string"
          },
          "jsonName": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/FileDescriptor"
          },
          "extensionScope": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "type": {
            "type": "string",
            "enum": [
              "DOUBLE",
              "FLOAT",
              "INT64",
              "UINT64",
              "INT32",
              "FIXED64",
              "FIXED32",
              "BOOL",
              "STRING",
              "GROUP",
              "MESSAGE",
              "BYTES",
              "UINT32",
              "ENUM",
              "SFIXED32",
              "SFIXED64",
              "SINT32",
              "SINT64"
            ]
          },
          "containingType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "messageType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "containingOneof": {
            "$ref": "#/components/schemas/OneofDescriptor"
          },
          "enumType": {
            "$ref": "#/components/schemas/EnumDescriptor"
          },
          "defaultValue": {
            "type": "object"
          },
          "optional": {
            "type": "boolean"
          },
          "javaType": {
            "type": "string",
            "enum": [
              "INT",
              "LONG",
              "FLOAT",
              "DOUBLE",
              "BOOLEAN",
              "STRING",
              "BYTE_STRING",
              "ENUM",
              "MESSAGE"
            ]
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/FieldOptions"
          },
          "required": {
            "type": "boolean"
          },
          "repeated": {
            "type": "boolean"
          },
          "mapField": {
            "type": "boolean"
          },
          "extension": {
            "type": "boolean"
          },
          "liteType": {
            "type": "string",
            "enum": [
              "DOUBLE",
              "FLOAT",
              "INT64",
              "UINT64",
              "INT32",
              "FIXED64",
              "FIXED32",
              "BOOL",
              "STRING",
              "GROUP",
              "MESSAGE",
              "BYTES",
              "UINT32",
              "ENUM",
              "SFIXED32",
              "SFIXED64",
              "SINT32",
              "SINT64"
            ]
          },
          "liteJavaType": {
            "type": "string",
            "enum": [
              "INT",
              "LONG",
              "FLOAT",
              "DOUBLE",
              "BOOLEAN",
              "STRING",
              "BYTE_STRING",
              "ENUM",
              "MESSAGE"
            ]
          },
          "packed": {
            "type": "boolean"
          },
          "packable": {
            "type": "boolean"
          },
          "realContainingOneof": {
            "$ref": "#/components/schemas/OneofDescriptor"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "FieldDescriptorProto": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "label": {
            "type": "string",
            "enum": [
              "LABEL_OPTIONAL",
              "LABEL_REQUIRED",
              "LABEL_REPEATED"
            ]
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/FieldOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/FieldDescriptorProto"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserFieldDescriptorProto"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/FieldOptionsOrBuilder"
          },
          "jsonName": {
            "type": "string"
          },
          "proto3Optional": {
            "type": "boolean"
          },
          "oneofIndex": {
            "type": "integer",
            "format": "int32"
          },
          "extendee": {
            "type": "string"
          },
          "typeNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "extendeeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "defaultValueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "jsonNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "name": {
            "type": "string"
          },
          "typeName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "TYPE_DOUBLE",
              "TYPE_FLOAT",
              "TYPE_INT64",
              "TYPE_UINT64",
              "TYPE_INT32",
              "TYPE_FIXED64",
              "TYPE_FIXED32",
              "TYPE_BOOL",
              "TYPE_STRING",
              "TYPE_GROUP",
              "TYPE_MESSAGE",
              "TYPE_BYTES",
              "TYPE_UINT32",
              "TYPE_ENUM",
              "TYPE_SFIXED32",
              "TYPE_SFIXED64",
              "TYPE_SINT32",
              "TYPE_SINT64"
            ]
          },
          "defaultValue": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "FieldDescriptorProtoOrBuilder": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "enum": [
              "LABEL_OPTIONAL",
              "LABEL_REQUIRED",
              "LABEL_REPEATED"
            ]
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/FieldOptions"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/FieldOptionsOrBuilder"
          },
          "jsonName": {
            "type": "string"
          },
          "proto3Optional": {
            "type": "boolean"
          },
          "oneofIndex": {
            "type": "integer",
            "format": "int32"
          },
          "extendee": {
            "type": "string"
          },
          "typeNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "extendeeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "defaultValueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "jsonNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "name": {
            "type": "string"
          },
          "typeName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "TYPE_DOUBLE",
              "TYPE_FLOAT",
              "TYPE_INT64",
              "TYPE_UINT64",
              "TYPE_INT32",
              "TYPE_FIXED64",
              "TYPE_FIXED32",
              "TYPE_BOOL",
              "TYPE_STRING",
              "TYPE_GROUP",
              "TYPE_MESSAGE",
              "TYPE_BYTES",
              "TYPE_UINT32",
              "TYPE_ENUM",
              "TYPE_SFIXED32",
              "TYPE_SFIXED64",
              "TYPE_SINT32",
              "TYPE_SINT64"
            ]
          },
          "defaultValue": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "FieldOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/FieldOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserFieldOptions"
          },
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "packed": {
            "type": "boolean"
          },
          "ctype": {
            "type": "string",
            "enum": [
              "STRING",
              "CORD",
              "STRING_PIECE"
            ]
          },
          "jstype": {
            "type": "string",
            "enum": [
              "JS_NORMAL",
              "JS_STRING",
              "JS_NUMBER"
            ]
          },
          "lazy": {
            "type": "boolean"
          },
          "unverifiedLazy": {
            "type": "boolean"
          },
          "weak": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "FieldOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "packed": {
            "type": "boolean"
          },
          "ctype": {
            "type": "string",
            "enum": [
              "STRING",
              "CORD",
              "STRING_PIECE"
            ]
          },
          "jstype": {
            "type": "string",
            "enum": [
              "JS_NORMAL",
              "JS_STRING",
              "JS_NUMBER"
            ]
          },
          "lazy": {
            "type": "boolean"
          },
          "unverifiedLazy": {
            "type": "boolean"
          },
          "weak": {
            "type": "boolean"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "FileDescriptor": {
        "type": "object",
        "properties": {
          "proto": {
            "$ref": "#/components/schemas/FileDescriptorProto"
          },
          "messageTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Descriptor"
            }
          },
          "enumTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDescriptor"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDescriptor"
            }
          },
          "extensions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptor"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDescriptor"
            }
          },
          "publicDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDescriptor"
            }
          },
          "fullName": {
            "type": "string"
          },
          "options": {
            "$ref": "#/components/schemas/FileOptions"
          },
          "syntax": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "PROTO2",
              "PROTO3"
            ]
          },
          "name": {
            "type": "string"
          },
          "package": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/FileDescriptor"
          }
        }
      },
      "FileDescriptorProto": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "options": {
            "$ref": "#/components/schemas/FileOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "syntax": {
            "type": "string"
          },
          "publicDependencyCount": {
            "type": "integer",
            "format": "int32"
          },
          "dependencyCount": {
            "type": "integer",
            "format": "int32"
          },
          "messageTypeCount": {
            "type": "integer",
            "format": "int32"
          },
          "enumTypeCount": {
            "type": "integer",
            "format": "int32"
          },
          "serviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "extensionCount": {
            "type": "integer",
            "format": "int32"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/FileDescriptorProto"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserFileDescriptorProto"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "packageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "dependencyList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "publicDependencyList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "weakDependencyList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "weakDependencyCount": {
            "type": "integer",
            "format": "int32"
          },
          "messageTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescriptorProto"
            }
          },
          "messageTypeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescriptorProtoOrBuilder"
            }
          },
          "enumTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDescriptorProto"
            }
          },
          "enumTypeOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDescriptorProtoOrBuilder"
            }
          },
          "serviceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDescriptorProto"
            }
          },
          "serviceOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDescriptorProtoOrBuilder"
            }
          },
          "extensionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProto"
            }
          },
          "extensionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptorProtoOrBuilder"
            }
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/FileOptionsOrBuilder"
          },
          "sourceCodeInfo": {
            "$ref": "#/components/schemas/SourceCodeInfo"
          },
          "sourceCodeInfoOrBuilder": {
            "$ref": "#/components/schemas/SourceCodeInfoOrBuilder"
          },
          "syntaxBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "name": {
            "type": "string"
          },
          "package": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "FileOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/FileOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserFileOptions"
          },
          "javaPackage": {
            "type": "string"
          },
          "javaPackageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "javaOuterClassname": {
            "type": "string"
          },
          "javaOuterClassnameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "javaMultipleFiles": {
            "type": "boolean"
          },
          "javaGenerateEqualsAndHash": {
            "type": "boolean"
          },
          "javaStringCheckUtf8": {
            "type": "boolean"
          },
          "optimizeFor": {
            "type": "string",
            "enum": [
              "SPEED",
              "CODE_SIZE",
              "LITE_RUNTIME"
            ]
          },
          "goPackage": {
            "type": "string"
          },
          "goPackageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "ccGenericServices": {
            "type": "boolean"
          },
          "javaGenericServices": {
            "type": "boolean"
          },
          "pyGenericServices": {
            "type": "boolean"
          },
          "phpGenericServices": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "ccEnableArenas": {
            "type": "boolean"
          },
          "objcClassPrefix": {
            "type": "string"
          },
          "objcClassPrefixBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "csharpNamespace": {
            "type": "string"
          },
          "csharpNamespaceBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "swiftPrefix": {
            "type": "string"
          },
          "swiftPrefixBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "phpClassPrefix": {
            "type": "string"
          },
          "phpClassPrefixBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "phpNamespace": {
            "type": "string"
          },
          "phpNamespaceBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "phpMetadataNamespace": {
            "type": "string"
          },
          "phpMetadataNamespaceBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "rubyPackage": {
            "type": "string"
          },
          "rubyPackageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "FileOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "javaPackage": {
            "type": "string"
          },
          "javaPackageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "javaOuterClassname": {
            "type": "string"
          },
          "javaOuterClassnameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "javaMultipleFiles": {
            "type": "boolean"
          },
          "javaGenerateEqualsAndHash": {
            "type": "boolean"
          },
          "javaStringCheckUtf8": {
            "type": "boolean"
          },
          "optimizeFor": {
            "type": "string",
            "enum": [
              "SPEED",
              "CODE_SIZE",
              "LITE_RUNTIME"
            ]
          },
          "goPackage": {
            "type": "string"
          },
          "goPackageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "ccGenericServices": {
            "type": "boolean"
          },
          "javaGenericServices": {
            "type": "boolean"
          },
          "pyGenericServices": {
            "type": "boolean"
          },
          "phpGenericServices": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "ccEnableArenas": {
            "type": "boolean"
          },
          "objcClassPrefix": {
            "type": "string"
          },
          "objcClassPrefixBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "csharpNamespace": {
            "type": "string"
          },
          "csharpNamespaceBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "swiftPrefix": {
            "type": "string"
          },
          "swiftPrefixBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "phpClassPrefix": {
            "type": "string"
          },
          "phpClassPrefixBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "phpNamespace": {
            "type": "string"
          },
          "phpNamespaceBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "phpMetadataNamespace": {
            "type": "string"
          },
          "phpMetadataNamespaceBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "rubyPackage": {
            "type": "string"
          },
          "rubyPackageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "GcpBillingExportSpecDTO": {
        "required": [
          "datasetId",
          "tableId"
        ],
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string"
          },
          "tableId": {
            "type": "string"
          }
        }
      },
      "GcpCloudCostConnectorDTO": {
        "required": [
          "featuresEnabled",
          "projectId",
          "serviceAccountEmail"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "featuresEnabled": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "BILLING",
                    "OPTIMIZATION",
                    "VISIBILITY",
                    "GOVERNANCE",
                    "COMMITMENT_ORCHESTRATOR"
                  ]
                }
              },
              "projectId": {
                "type": "string"
              },
              "serviceAccountEmail": {
                "type": "string"
              },
              "billingExportSpec": {
                "$ref": "#/components/schemas/GcpBillingExportSpecDTO"
              }
            }
          }
        ]
      },
      "GcpConnector": {
        "required": [
          "credential"
        ],
        "type": "object",
        "description": "This contains GCP connector details",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "$ref": "#/components/schemas/GcpConnectorCredential"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "GcpConnectorCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "InheritFromDelegate",
              "ManualConfig"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/GcpCredentialSpec"
          }
        },
        "description": "This contains GCP connector credentials"
      },
      "GcpCredentialSpec": {
        "type": "object",
        "description": "This contains GCP connector credentials spec"
      },
      "GcpKmsConnector": {
        "required": [
          "credentials",
          "keyName",
          "keyRing",
          "projectId",
          "region"
        ],
        "type": "object",
        "description": "This contains GCP KMS SecretManager configuration.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "ID of the project on GCP."
              },
              "region": {
                "type": "string",
                "description": "Region for GCP KMS"
              },
              "keyRing": {
                "type": "string",
                "description": "Name of the Key Ring where Google Cloud Symmetric Key is created."
              },
              "keyName": {
                "type": "string",
                "description": "Name of the Google Cloud Symmetric Key."
              },
              "credentials": {
                "type": "string",
                "description": "File Secret which is Service Account Key."
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.",
                "items": {
                  "type": "string",
                  "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager."
                }
              },
              "default": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "GcpManualDetails": {
        "required": [
          "secretKeyRef"
        ],
        "type": "object",
        "description": "This contains GCP manual credentials details",
        "allOf": [
          {
            "$ref": "#/components/schemas/GcpCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "secretKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GcpSecretManager": {
        "required": [
          "credentialsRef"
        ],
        "type": "object",
        "description": "This contains details of GCP Secret Manager",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "isDefault": {
                "type": "boolean",
                "writeOnly": true
              },
              "credentialsRef": {
                "type": "string",
                "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.",
                "items": {
                  "type": "string",
                  "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager."
                }
              },
              "default": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "GitAuthentication": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "This is a interface for details of the Generic Git authentication information",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "GitConfig": {
        "required": [
          "connectionType",
          "spec",
          "type",
          "url"
        ],
        "type": "object",
        "description": "This contains details of the Generic Git connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "validationRepo": {
                "type": "string"
              },
              "branchName": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Http",
                  "Ssh"
                ]
              },
              "connectionType": {
                "type": "string",
                "enum": [
                  "Account",
                  "Repo",
                  "Project"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/GitAuthentication"
              }
            }
          }
        ]
      },
      "GitHTTPAuthenticationDTO": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This contains details of the Generic Git authentication information used via HTTP connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitAuthentication"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GitSSHAuthentication": {
        "required": [
          "sshKeyRef"
        ],
        "type": "object",
        "description": "This contains details of the Generic Git authentication information used via SSH connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitAuthentication"
          },
          {
            "type": "object",
            "properties": {
              "sshKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GithubApiAccess": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "GithubApp",
              "Token",
              "OAuth"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/GithubApiAccessSpec"
          }
        },
        "description": "This contains details of the information needed for Github API access"
      },
      "GithubApiAccessSpec": {
        "type": "object",
        "description": "This contains details of the information such as references of username and password needed for Github API access"
      },
      "GithubAppSpec": {
        "required": [
          "applicationId",
          "installationId",
          "privateKeyRef"
        ],
        "type": "object",
        "description": "This contains details of the Github API access credentials Specs such as references of private key",
        "allOf": [
          {
            "$ref": "#/components/schemas/GithubApiAccessSpec"
          },
          {
            "type": "object",
            "properties": {
              "installationId": {
                "type": "string"
              },
              "applicationId": {
                "type": "string"
              },
              "privateKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GithubAuthentication": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Http",
              "Ssh"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/GithubCredentials"
          }
        },
        "description": "This contains details of the information needed for Github access"
      },
      "GithubConnector": {
        "required": [
          "authentication",
          "type",
          "url"
        ],
        "type": "object",
        "description": "This contains details of Github connectors",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "validationRepo": {
                "type": "string"
              },
              "authentication": {
                "$ref": "#/components/schemas/GithubAuthentication"
              },
              "apiAccess": {
                "$ref": "#/components/schemas/GithubApiAccess"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Account",
                  "Repo"
                ]
              }
            }
          }
        ]
      },
      "GithubCredentials": {
        "type": "object",
        "description": "This is a interface for details of the Github credentials"
      },
      "GithubHttpCredentials": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "description": "This contains details of the Github credentials used via HTTP connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/GithubCredentials"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UsernamePassword",
                  "UsernameToken",
                  "OAuth"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/GithubHttpCredentialsSpec"
              }
            }
          }
        ]
      },
      "GithubHttpCredentialsSpec": {
        "type": "object",
        "description": "This is a interface for details of the Github credentials Specs such as references of username and password"
      },
      "GithubOauth": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the Github credentials Specs for oauth",
        "allOf": [
          {
            "$ref": "#/components/schemas/GithubHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "tokenRef": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/GithubApiAccessSpec"
          }
        ]
      },
      "GithubSshCredentials": {
        "required": [
          "sshKeyRef"
        ],
        "type": "object",
        "description": "This contains details of the Github credentials used via SSH connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/GithubCredentials"
          },
          {
            "type": "object",
            "properties": {
              "sshKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GithubTokenSpec": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the information such as references of token needed for Github API access",
        "allOf": [
          {
            "$ref": "#/components/schemas/GithubApiAccessSpec"
          },
          {
            "type": "object",
            "properties": {
              "tokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GithubUsernamePassword": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This contains details of the Github credentials Specs such as references of username and password",
        "allOf": [
          {
            "$ref": "#/components/schemas/GithubHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GithubUsernameToken": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the Github credentials Specs such as references of username and token",
        "allOf": [
          {
            "$ref": "#/components/schemas/GithubHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "tokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GitlabApiAccess": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Token",
              "OAuth"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/GitlabApiAccessSpec"
          }
        },
        "description": "This contains details of the information needed for Gitlab API access"
      },
      "GitlabApiAccessSpec": {
        "type": "object",
        "description": "This contains details of the information such as references of username and password needed for Gitlab API access"
      },
      "GitlabAuthentication": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Http",
              "Ssh"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/GitlabCredentials"
          }
        },
        "description": "This contains details of the information needed for Gitlab access"
      },
      "GitlabConnector": {
        "required": [
          "authentication",
          "type",
          "url"
        ],
        "type": "object",
        "description": "This contains details of Gitlab connectors",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "validationRepo": {
                "type": "string"
              },
              "authentication": {
                "$ref": "#/components/schemas/GitlabAuthentication"
              },
              "apiAccess": {
                "$ref": "#/components/schemas/GitlabApiAccess"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Account",
                  "Repo",
                  "Project"
                ]
              }
            }
          }
        ]
      },
      "GitlabCredentials": {
        "type": "object",
        "description": "This is a interface for details of the Gitlab credentials"
      },
      "GitlabHttpCredentials": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "description": "This contains details of the Gitlab credentials used via HTTP connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitlabCredentials"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "UsernamePassword",
                  "UsernameToken",
                  "Kerberos",
                  "OAuth"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/GitlabHttpCredentialsSpec"
              }
            }
          }
        ]
      },
      "GitlabHttpCredentialsSpec": {
        "type": "object",
        "description": "This is a interface for details of the Gitlab credentials Specs such as references of username and password"
      },
      "GitlabKerberos": {
        "required": [
          "kerberosKeyRef"
        ],
        "type": "object",
        "description": "This contains details of the Gitlab credentials Specs such as references of Keberos key",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitlabHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "kerberosKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GitlabOauth": {
        "required": [
          "refreshTokenRef",
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the information such as references of tokens needed for Gitlab API access",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitlabHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "tokenRef": {
                "type": "string"
              },
              "refreshTokenRef": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/GitlabApiAccessSpec"
          }
        ]
      },
      "GitlabSshCredentials": {
        "required": [
          "sshKeyRef"
        ],
        "type": "object",
        "description": "This contains details of the Gitlab credentials used via SSH connections",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitlabCredentials"
          },
          {
            "type": "object",
            "properties": {
              "sshKeyRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GitlabTokenSpec": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the information such as references of token needed for Gitlab API access",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitlabApiAccessSpec"
          },
          {
            "type": "object",
            "properties": {
              "tokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GitlabUsernamePassword": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This contains details of the Gitlab credentials Specs such as references of username and password",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitlabHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GitlabUsernameToken": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This contains details of the Gitlab credentials Specs such as references of username and token",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitlabHttpCredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "tokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GovernanceMetadata": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "action": {
            "type": "string"
          },
          "entity": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/GovernanceMetadata"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserGovernanceMetadata"
          },
          "typeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "messageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "statusBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "accountId": {
            "type": "string"
          },
          "accountIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "orgId": {
            "type": "string"
          },
          "orgIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "projectId": {
            "type": "string"
          },
          "projectIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "deny": {
            "type": "boolean"
          },
          "idBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "detailsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicySetMetadata"
            }
          },
          "detailsCount": {
            "type": "integer",
            "format": "int32"
          },
          "detailsOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicySetMetadataOrBuilder"
            }
          },
          "entityBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "actionBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "message": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "HostDTO": {
        "required": [
          "hostname"
        ],
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string"
          },
          "hostAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "description": "This entity contains the Host details"
      },
      "HttpHelmAuthCredentials": {
        "type": "object",
        "description": "This contains http helm auth credentials"
      },
      "HttpHelmAuthentication": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UsernamePassword",
              "Anonymous"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/HttpHelmAuthCredentials"
          }
        },
        "description": "This contains http helm authentication details"
      },
      "HttpHelmConnector": {
        "required": [
          "helmRepoUrl"
        ],
        "type": "object",
        "description": "This contains http helm connector details",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "helmRepoUrl": {
                "type": "string"
              },
              "auth": {
                "$ref": "#/components/schemas/HttpHelmAuthentication"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "HttpHelmUsernamePassword": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This contains http helm username password details",
        "allOf": [
          {
            "$ref": "#/components/schemas/HttpHelmAuthCredentials"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "JenkinsAuthCredentialsDTO": {
        "type": "object",
        "description": "This contains details of credentials for Docker Authentication"
      },
      "JenkinsAuthentication": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UsernamePassword",
              "Anonymous",
              "Bearer Token(HTTP Header)"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/JenkinsAuthCredentialsDTO"
          }
        },
        "description": "This entity contains the details for Jenkins Authentication"
      },
      "JenkinsBearerTokenDTO": {
        "required": [
          "tokenRef"
        ],
        "type": "object",
        "description": "This entity contains the details of the Jenkins Bearer token",
        "allOf": [
          {
            "$ref": "#/components/schemas/JenkinsAuthCredentialsDTO"
          },
          {
            "type": "object",
            "properties": {
              "tokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "JenkinsConnector": {
        "required": [
          "jenkinsUrl"
        ],
        "type": "object",
        "description": "Jenkins Connector details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "jenkinsUrl": {
                "type": "string"
              },
              "auth": {
                "$ref": "#/components/schemas/JenkinsAuthentication"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "JenkinsUserNamePasswordDTO": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This entity contains the details of the Jenkins Username and Password",
        "allOf": [
          {
            "$ref": "#/components/schemas/JenkinsAuthCredentialsDTO"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "JiraConnector": {
        "required": [
          "jiraUrl",
          "passwordRef"
        ],
        "type": "object",
        "description": "JIRA Connector details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "jiraUrl": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "KubernetesAuth": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UsernamePassword",
              "ClientKeyCert",
              "ServiceAccount",
              "OpenIdConnect"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/KubernetesAuthCredential"
          }
        },
        "description": "This contains kubernetes auth details"
      },
      "KubernetesAuthCredential": {
        "type": "object",
        "description": "This contains kubernetes auth credentials"
      },
      "KubernetesClientKeyCert": {
        "required": [
          "clientCertRef",
          "clientKeyRef"
        ],
        "type": "object",
        "description": "This contains kubernetes client key certificate details",
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesAuthCredential"
          },
          {
            "type": "object",
            "properties": {
              "caCertRef": {
                "type": "string"
              },
              "clientCertRef": {
                "type": "string"
              },
              "clientKeyRef": {
                "type": "string"
              },
              "clientKeyPassphraseRef": {
                "type": "string"
              },
              "clientKeyAlgo": {
                "type": "string"
              }
            }
          }
        ]
      },
      "KubernetesClusterConfig": {
        "required": [
          "credential"
        ],
        "type": "object",
        "description": "This contains kubernetes cluster config details",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "$ref": "#/components/schemas/KubernetesCredential"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "KubernetesClusterDetails": {
        "required": [
          "auth",
          "masterUrl"
        ],
        "type": "object",
        "description": "This contains kubernetes cluster details",
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "masterUrl": {
                "type": "string"
              },
              "auth": {
                "$ref": "#/components/schemas/KubernetesAuth"
              }
            }
          }
        ]
      },
      "KubernetesCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "InheritFromDelegate",
              "ManualConfig"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/KubernetesCredentialSpec"
          }
        },
        "description": "This contains kubernetes credentials details"
      },
      "KubernetesCredentialSpec": {
        "type": "object",
        "description": "This contains kubernetes credentials spec details"
      },
      "KubernetesOpenIdConnect": {
        "required": [
          "oidcClientIdRef",
          "oidcIssuerUrl",
          "oidcPasswordRef"
        ],
        "type": "object",
        "description": "This contains kubernetes open id connect details",
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesAuthCredential"
          },
          {
            "type": "object",
            "properties": {
              "oidcIssuerUrl": {
                "type": "string"
              },
              "oidcUsername": {
                "type": "string"
              },
              "oidcUsernameRef": {
                "type": "string"
              },
              "oidcClientIdRef": {
                "type": "string"
              },
              "oidcPasswordRef": {
                "type": "string"
              },
              "oidcSecretRef": {
                "type": "string"
              },
              "oidcScopes": {
                "type": "string"
              }
            }
          }
        ]
      },
      "KubernetesServiceAccount": {
        "required": [
          "serviceAccountTokenRef"
        ],
        "type": "object",
        "description": "This contains kubernetes service account details",
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesAuthCredential"
          },
          {
            "type": "object",
            "properties": {
              "serviceAccountTokenRef": {
                "type": "string"
              },
              "caCertRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "KubernetesUserNamePassword": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This contains kubernetes username password details",
        "allOf": [
          {
            "$ref": "#/components/schemas/KubernetesAuthCredential"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "LocalConnector": {
        "type": "object",
        "description": "This contains the local connector information.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "default": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "pathList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "pathCount": {
            "type": "integer",
            "format": "int32"
          },
          "spanList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "spanCount": {
            "type": "integer",
            "format": "int32"
          },
          "leadingComments": {
            "type": "string"
          },
          "leadingCommentsBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "trailingComments": {
            "type": "string"
          },
          "trailingCommentsBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "leadingDetachedCommentsList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "leadingDetachedCommentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Location"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserLocation"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "LocationOrBuilder": {
        "type": "object",
        "properties": {
          "pathList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "pathCount": {
            "type": "integer",
            "format": "int32"
          },
          "spanList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "spanCount": {
            "type": "integer",
            "format": "int32"
          },
          "leadingComments": {
            "type": "string"
          },
          "leadingCommentsBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "trailingComments": {
            "type": "string"
          },
          "trailingCommentsBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "leadingDetachedCommentsList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "leadingDetachedCommentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "parserForType": {
            "$ref": "#/components/schemas/ParserMessage"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/MessageLite"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          }
        }
      },
      "MessageLite": {
        "type": "object",
        "properties": {
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserMessageLite"
          },
          "initialized": {
            "type": "boolean"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/MessageLite"
          }
        }
      },
      "MessageOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/MessageOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserMessageOptions"
          },
          "messageSetWireFormat": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "mapEntry": {
            "type": "boolean"
          },
          "noStandardDescriptorAccessor": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "MessageOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "messageSetWireFormat": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "mapEntry": {
            "type": "boolean"
          },
          "noStandardDescriptorAccessor": {
            "type": "boolean"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "MethodDescriptor": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "proto": {
            "$ref": "#/components/schemas/MethodDescriptorProto"
          },
          "fullName": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/FileDescriptor"
          },
          "service": {
            "$ref": "#/components/schemas/ServiceDescriptor"
          },
          "inputType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "outputType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "options": {
            "$ref": "#/components/schemas/MethodOptions"
          },
          "clientStreaming": {
            "type": "boolean"
          },
          "serverStreaming": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "MethodDescriptorProto": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "inputTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "outputTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "options": {
            "$ref": "#/components/schemas/MethodOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "outputType": {
            "type": "string"
          },
          "inputType": {
            "type": "string"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/MethodDescriptorProto"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserMethodDescriptorProto"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/MethodOptionsOrBuilder"
          },
          "clientStreaming": {
            "type": "boolean"
          },
          "serverStreaming": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "MethodDescriptorProtoOrBuilder": {
        "type": "object",
        "properties": {
          "inputTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "outputTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "options": {
            "$ref": "#/components/schemas/MethodOptions"
          },
          "outputType": {
            "type": "string"
          },
          "inputType": {
            "type": "string"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/MethodOptionsOrBuilder"
          },
          "clientStreaming": {
            "type": "boolean"
          },
          "serverStreaming": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "MethodOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "idempotencyLevel": {
            "type": "string",
            "enum": [
              "IDEMPOTENCY_UNKNOWN",
              "NO_SIDE_EFFECTS",
              "IDEMPOTENT"
            ]
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/MethodOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserMethodOptions"
          },
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "MethodOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "idempotencyLevel": {
            "type": "string",
            "enum": [
              "IDEMPOTENCY_UNKNOWN",
              "NO_SIDE_EFFECTS",
              "IDEMPOTENT"
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "NamePart": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "namePart": {
            "type": "string"
          },
          "namePartBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "isExtension": {
            "type": "boolean"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/NamePart"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserNamePart"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "NamePartOrBuilder": {
        "type": "object",
        "properties": {
          "namePart": {
            "type": "string"
          },
          "namePartBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "isExtension": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "NameValuePairWithDefault": {
        "required": [
          "name",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "useAsDefault": {
            "type": "boolean"
          }
        }
      },
      "NewRelicConnectorDTO": {
        "required": [
          "apiKeyRef",
          "newRelicAccountId",
          "url"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "newRelicAccountId": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "apiKeyRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "NexusAuthCredentials": {
        "type": "object",
        "description": "This entity contains the details of credentials for Nexus Authentication"
      },
      "NexusAuthentication": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This entity contains the details of Nexus Authentication Type",
            "enum": [
              "UsernamePassword",
              "Anonymous"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/NexusAuthCredentials"
          }
        },
        "description": "This entity contains the details for Nexus Authentication"
      },
      "NexusConnector": {
        "required": [
          "nexusServerUrl",
          "version"
        ],
        "type": "object",
        "description": "Nexus Connector details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "nexusServerUrl": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "auth": {
                "$ref": "#/components/schemas/NexusAuthentication"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "NexusUsernamePasswordAuth": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This entity contains the details of the Nexus Username and Password",
        "allOf": [
          {
            "$ref": "#/components/schemas/NexusAuthCredentials"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "OciHelmAuthCredentials": {
        "type": "object",
        "description": "This contains oci helm auth credentials"
      },
      "OciHelmAuthentication": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UsernamePassword",
              "Anonymous"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/OciHelmAuthCredentials"
          }
        },
        "description": "This contains oci helm authentication details"
      },
      "OciHelmConnector": {
        "required": [
          "helmRepoUrl"
        ],
        "type": "object",
        "description": "This contains Oci helm connector details",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "helmRepoUrl": {
                "type": "string"
              },
              "auth": {
                "$ref": "#/components/schemas/OciHelmAuthentication"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "OciHelmUsernamePassword": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This contains oci helm username password details",
        "allOf": [
          {
            "$ref": "#/components/schemas/OciHelmAuthCredentials"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "OneofDescriptor": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "proto": {
            "$ref": "#/components/schemas/OneofDescriptorProto"
          },
          "fullName": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/FileDescriptor"
          },
          "containingType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "fieldCount": {
            "type": "integer",
            "format": "int32"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptor"
            }
          },
          "options": {
            "$ref": "#/components/schemas/OneofOptions"
          },
          "name": {
            "type": "string"
          },
          "synthetic": {
            "type": "boolean"
          }
        }
      },
      "OneofDescriptorProto": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "options": {
            "$ref": "#/components/schemas/OneofOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/OneofDescriptorProto"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserOneofDescriptorProto"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/OneofOptionsOrBuilder"
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "OneofDescriptorProtoOrBuilder": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/OneofOptions"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/OneofOptionsOrBuilder"
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "OneofOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/OneofOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserOneofOptions"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "OneofOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "PageResponseCcmK8sConnectorResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ccmK8sConnectorResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PagerDutyConnectorDTO": {
        "required": [
          "apiTokenRef"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "apiTokenRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Parser": {
        "type": "object"
      },
      "ParserDescriptorProto": {
        "type": "object"
      },
      "ParserEnumDescriptorProto": {
        "type": "object"
      },
      "ParserEnumOptions": {
        "type": "object"
      },
      "ParserEnumReservedRange": {
        "type": "object"
      },
      "ParserEnumValueDescriptorProto": {
        "type": "object"
      },
      "ParserEnumValueOptions": {
        "type": "object"
      },
      "ParserExtensionRange": {
        "type": "object"
      },
      "ParserExtensionRangeOptions": {
        "type": "object"
      },
      "ParserFieldDescriptorProto": {
        "type": "object"
      },
      "ParserFieldOptions": {
        "type": "object"
      },
      "ParserFileDescriptorProto": {
        "type": "object"
      },
      "ParserFileOptions": {
        "type": "object"
      },
      "ParserGovernanceMetadata": {
        "type": "object"
      },
      "ParserLocation": {
        "type": "object"
      },
      "ParserMessage": {
        "type": "object"
      },
      "ParserMessageLite": {
        "type": "object"
      },
      "ParserMessageOptions": {
        "type": "object"
      },
      "ParserMethodDescriptorProto": {
        "type": "object"
      },
      "ParserMethodOptions": {
        "type": "object"
      },
      "ParserNamePart": {
        "type": "object"
      },
      "ParserOneofDescriptorProto": {
        "type": "object"
      },
      "ParserOneofOptions": {
        "type": "object"
      },
      "ParserPolicyMetadata": {
        "type": "object"
      },
      "ParserPolicySetMetadata": {
        "type": "object"
      },
      "ParserReservedRange": {
        "type": "object"
      },
      "ParserServiceDescriptorProto": {
        "type": "object"
      },
      "ParserServiceOptions": {
        "type": "object"
      },
      "ParserSourceCodeInfo": {
        "type": "object"
      },
      "ParserUninterpretedOption": {
        "type": "object"
      },
      "PhysicalDataCenterConnectorDTO": {
        "type": "object",
        "description": "This contains Physical Data Center connector details",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "hosts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HostDTO"
                }
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "PolicyMetadata": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "error": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "updated": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/PolicyMetadata"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserPolicyMetadata"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "policyIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "policyNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "severityBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "denyMessagesList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "denyMessagesCount": {
            "type": "integer",
            "format": "int32"
          },
          "statusBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "accountId": {
            "type": "string"
          },
          "accountIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "orgId": {
            "type": "string"
          },
          "orgIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "projectId": {
            "type": "string"
          },
          "projectIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "errorBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "PolicyMetadataOrBuilder": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "updated": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "policyId": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "policyIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "policyNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "severityBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "denyMessagesList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denyMessagesCount": {
            "type": "integer",
            "format": "int32"
          },
          "statusBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "accountId": {
            "type": "string"
          },
          "accountIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "orgId": {
            "type": "string"
          },
          "orgIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "projectId": {
            "type": "string"
          },
          "projectIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "errorBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "PolicySetMetadata": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/PolicySetMetadata"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserPolicySetMetadata"
          },
          "policySetId": {
            "type": "string"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "statusBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "accountId": {
            "type": "string"
          },
          "accountIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "orgId": {
            "type": "string"
          },
          "orgIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "projectId": {
            "type": "string"
          },
          "projectIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "policySetIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "deny": {
            "type": "boolean"
          },
          "policyMetadataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyMetadata"
            }
          },
          "policyMetadataCount": {
            "type": "integer",
            "format": "int32"
          },
          "policyMetadataOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyMetadataOrBuilder"
            }
          },
          "policySetName": {
            "type": "string"
          },
          "policySetNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "PolicySetMetadataOrBuilder": {
        "type": "object",
        "properties": {
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "policySetId": {
            "type": "string"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "statusBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "accountId": {
            "type": "string"
          },
          "accountIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "orgId": {
            "type": "string"
          },
          "orgIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "projectId": {
            "type": "string"
          },
          "projectIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "policySetIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "deny": {
            "type": "boolean"
          },
          "policyMetadataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyMetadata"
            }
          },
          "policyMetadataCount": {
            "type": "integer",
            "format": "int32"
          },
          "policyMetadataOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyMetadataOrBuilder"
            }
          },
          "policySetName": {
            "type": "string"
          },
          "policySetNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "PrometheusConnectorDTO": {
        "required": [
          "url"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomHealthKeyAndValue"
                }
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ProtocolStringList": {
        "type": "array",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "items": {
          "type": "string"
        }
      },
      "ReservedRange": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ReservedRange"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserReservedRange"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ReservedRangeOrBuilder": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "end": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseCcmK8sConnectorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseCcmK8sConnectorResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceDescriptor": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "proto": {
            "$ref": "#/components/schemas/ServiceDescriptorProto"
          },
          "fullName": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/FileDescriptor"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodDescriptor"
            }
          },
          "options": {
            "$ref": "#/components/schemas/ServiceOptions"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ServiceDescriptorProto": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "methodList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodDescriptorProto"
            }
          },
          "options": {
            "$ref": "#/components/schemas/ServiceOptions"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ServiceDescriptorProto"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserServiceDescriptorProto"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/ServiceOptionsOrBuilder"
          },
          "methodCount": {
            "type": "integer",
            "format": "int32"
          },
          "methodOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodDescriptorProtoOrBuilder"
            }
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ServiceDescriptorProtoOrBuilder": {
        "type": "object",
        "properties": {
          "methodList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodDescriptorProto"
            }
          },
          "options": {
            "$ref": "#/components/schemas/ServiceOptions"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "optionsOrBuilder": {
            "$ref": "#/components/schemas/ServiceOptionsOrBuilder"
          },
          "methodCount": {
            "type": "integer",
            "format": "int32"
          },
          "methodOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodDescriptorProtoOrBuilder"
            }
          },
          "name": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ServiceNowADFS": {
        "required": [
          "adfsUrl",
          "certificateRef",
          "clientIdRef",
          "privateKeyRef",
          "resourceIdRef"
        ],
        "type": "object",
        "description": "This entity contains the details of the Service Now ADFS",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceNowAuthCredentials"
          },
          {
            "type": "object",
            "properties": {
              "certificateRef": {
                "type": "string"
              },
              "privateKeyRef": {
                "type": "string"
              },
              "clientIdRef": {
                "type": "string"
              },
              "resourceIdRef": {
                "type": "string"
              },
              "adfsUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ServiceNowAuthCredentials": {
        "type": "object",
        "description": "This contains details of credentials for Service Now Authentication"
      },
      "ServiceNowAuthentication": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UsernamePassword",
              "AdfsClientCredentialsWithCertificate"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/ServiceNowAuthCredentials"
          }
        },
        "description": "This entity contains the details for Service Now Authentication"
      },
      "ServiceNowConnector": {
        "required": [
          "auth",
          "serviceNowUrl"
        ],
        "type": "object",
        "description": "ServiceNow Connector details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "serviceNowUrl": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "auth": {
                "$ref": "#/components/schemas/ServiceNowAuthentication"
              }
            }
          }
        ]
      },
      "ServiceNowUserNamePassword": {
        "required": [
          "passwordRef"
        ],
        "type": "object",
        "description": "This entity contains the details of the Service Now Username and Password",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceNowAuthCredentials"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ServiceOptions": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ServiceOptions"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserServiceOptions"
          },
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "allFieldsRaw": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ServiceOptionsOrBuilder": {
        "type": "object",
        "properties": {
          "deprecated": {
            "type": "boolean"
          },
          "uninterpretedOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOption"
            }
          },
          "uninterpretedOptionCount": {
            "type": "integer",
            "format": "int32"
          },
          "uninterpretedOptionOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UninterpretedOptionOrBuilder"
            }
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "SourceCodeInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/SourceCodeInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserSourceCodeInfo"
          },
          "locationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "locationCount": {
            "type": "integer",
            "format": "int32"
          },
          "locationOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "SourceCodeInfoOrBuilder": {
        "type": "object",
        "properties": {
          "locationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "locationCount": {
            "type": "integer",
            "format": "int32"
          },
          "locationOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "SplunkConnector": {
        "required": [
          "accountId",
          "passwordRef",
          "splunkUrl"
        ],
        "type": "object",
        "description": "This contains the Splunk Connector configuration",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "splunkUrl": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "accountId": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SpotConnector": {
        "required": [
          "credential"
        ],
        "type": "object",
        "description": "This contains details of the Spot connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "$ref": "#/components/schemas/SpotCredential"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SpotCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PermanentTokenConfig"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/SpotCredentialSpec"
          }
        },
        "description": "This contains details of the Spot connector credential"
      },
      "SpotCredentialSpec": {
        "type": "object",
        "description": "This contains Spot connector credential spec"
      },
      "SpotPermanentTokenConfigSpec": {
        "required": [
          "apiTokenRef"
        ],
        "type": "object",
        "description": "This contains Spot permanent token connector spec",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpotCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "spotAccountId": {
                "type": "string"
              },
              "spotAccountIdRef": {
                "type": "string"
              },
              "apiTokenRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SumoLogicConnectorDTO": {
        "required": [
          "accessIdRef",
          "accessKeyRef",
          "url"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "accessIdRef": {
                "type": "string"
              },
              "accessKeyRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "TasConnector": {
        "required": [
          "credential"
        ],
        "type": "object",
        "description": "This contains details of the Tas connector",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "$ref": "#/components/schemas/TasCredential"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executeOnDelegate": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "TasCredential": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ManualConfig"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/TasCredentialSpec"
          }
        },
        "description": "This contains Tas connector credentials"
      },
      "TasCredentialSpec": {
        "type": "object",
        "description": "This contains Tas connector credentials spec"
      },
      "TasManualDetails": {
        "required": [
          "endpointUrl",
          "passwordRef"
        ],
        "type": "object",
        "description": "This contains Tas manual credentials connector details",
        "allOf": [
          {
            "$ref": "#/components/schemas/TasCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "endpointUrl": {
                "type": "string",
                "description": "Endpoint URL of the TAS Cluster."
              },
              "usernameRef": {
                "type": "string"
              },
              "passwordRef": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TemplateLinkConfigForCustomSecretManager": {
        "required": [
          "templateRef",
          "versionLabel"
        ],
        "type": "object",
        "properties": {
          "templateRef": {
            "type": "string"
          },
          "versionLabel": {
            "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$",
            "type": "string"
          },
          "templateInputs": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NameValuePairWithDefault"
              }
            }
          }
        }
      },
      "UninterpretedOption": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "stringValue": {
            "$ref": "#/components/schemas/ByteString"
          },
          "nameCount": {
            "type": "integer",
            "format": "int32"
          },
          "doubleValue": {
            "type": "number",
            "format": "double"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/UninterpretedOption"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserUninterpretedOption"
          },
          "nameList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamePart"
            }
          },
          "nameOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamePartOrBuilder"
            }
          },
          "identifierValue": {
            "type": "string"
          },
          "identifierValueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "positiveIntValue": {
            "type": "integer",
            "format": "int64"
          },
          "negativeIntValue": {
            "type": "integer",
            "format": "int64"
          },
          "aggregateValue": {
            "type": "string"
          },
          "aggregateValueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "UninterpretedOptionOrBuilder": {
        "type": "object",
        "properties": {
          "stringValue": {
            "$ref": "#/components/schemas/ByteString"
          },
          "nameCount": {
            "type": "integer",
            "format": "int32"
          },
          "doubleValue": {
            "type": "number",
            "format": "double"
          },
          "nameList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamePart"
            }
          },
          "nameOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamePartOrBuilder"
            }
          },
          "identifierValue": {
            "type": "string"
          },
          "identifierValueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "positiveIntValue": {
            "type": "integer",
            "format": "int64"
          },
          "negativeIntValue": {
            "type": "integer",
            "format": "int64"
          },
          "aggregateValue": {
            "type": "string"
          },
          "aggregateValueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "UnknownFieldSet": {
        "type": "object",
        "properties": {
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "parserForType": {
            "$ref": "#/components/schemas/Parser"
          },
          "serializedSizeAsMessageSet": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "VaultConnector": {
        "required": [
          "renewalIntervalMinutes",
          "vaultUrl"
        ],
        "type": "object",
        "description": "This contains the Vault Connector configuration.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "properties": {
              "authToken": {
                "type": "string",
                "description": "This is the authentication token for Vault."
              },
              "basePath": {
                "type": "string",
                "description": "This is the location of the Vault directory where Secret will be stored."
              },
              "vaultUrl": {
                "type": "string",
                "description": "URL of the HashiCorp Vault."
              },
              "isReadOnly": {
                "type": "boolean",
                "writeOnly": true
              },
              "renewalIntervalMinutes": {
                "type": "integer",
                "description": "This is the time interval for token renewal.",
                "format": "int64"
              },
              "secretEngineManuallyConfigured": {
                "type": "boolean",
                "description": "Manually entered Secret Engine."
              },
              "secretEngineName": {
                "type": "string",
                "description": "Name of the Secret Engine."
              },
              "appRoleId": {
                "type": "string",
                "description": "ID of App Role."
              },
              "secretId": {
                "type": "string",
                "description": "ID of the Secret."
              },
              "isDefault": {
                "type": "boolean",
                "writeOnly": true
              },
              "secretEngineVersion": {
                "type": "integer",
                "description": "Version of Secret Engine.",
                "format": "int32"
              },
              "delegateSelectors": {
                "uniqueItems": true,
                "type": "array",
                "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.",
                "items": {
                  "type": "string",
                  "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager."
                }
              },
              "namespace": {
                "type": "string",
                "description": "This is the Vault namespace where Secret will be created."
              },
              "sinkPath": {
                "type": "string",
                "description": "This is the location at which auth token is to be read from."
              },
              "useVaultAgent": {
                "type": "boolean",
                "description": "Boolean value to indicate if Vault Agent is used for authentication."
              },
              "useAwsIam": {
                "type": "boolean",
                "description": "Boolean value to indicate if Aws Iam is used for authentication."
              },
              "awsRegion": {
                "type": "string",
                "description": "This is the Aws region where aws iam auth will happen."
              },
              "vaultAwsIamRole": {
                "type": "string",
                "description": "This is the Vault role defined to bind to aws iam account/role being accessed."
              },
              "xvaultAwsIamServerId": {
                "type": "string",
                "description": "This is the Aws Iam Header Server ID that has been configured for this Aws Iam instance."
              },
              "useK8sAuth": {
                "type": "boolean",
                "description": "Boolean value to indicate if K8s Auth is used for authentication."
              },
              "vaultK8sAuthRole": {
                "type": "string",
                "description": "This is the role where K8s auth will happen."
              },
              "serviceAccountTokenPath": {
                "type": "string",
                "description": "This is the SA token path where the token is mounted in the K8s Pod."
              },
              "k8sAuthEndpoint": {
                "type": "string",
                "description": "This is the path where kubernetes auth is enabled in Vault."
              },
              "renewAppRoleToken": {
                "type": "boolean",
                "description": "Boolean value to indicate if appRole token renewal is enabled or not."
              },
              "default": {
                "type": "boolean"
              },
              "accessType": {
                "type": "string",
                "enum": [
                  "APP_ROLE",
                  "TOKEN",
                  "VAULT_AGENT",
                  "AWS_IAM",
                  "K8s_AUTH"
                ]
              },
              "readOnly": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ccmK8sConnectorResponse": {
        "type": "object",
        "properties": {
          "k8sConnector": {
            "$ref": "#/components/schemas/ConnectorResponse"
          },
          "ccmk8sConnector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorResponse"
            }
          }
        },
        "description": "This has the CCM K8s Connector details along with its metadata."
      },
      "ConnectorFilterProperties": {
        "type": "object",
        "properties": {
          "connectorNames": {
            "type": "array",
            "description": "This is the list of the Connector names on which the filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of the Connector names on which the filter will be applied."
            }
          },
          "connectorIdentifiers": {
            "type": "array",
            "description": "This is the list of the Connector identifiers on which the filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of the Connector identifiers on which the filter will be applied."
            }
          },
          "description": {
            "type": "string",
            "description": "Description of filter created."
          },
          "types": {
            "type": "array",
            "description": "This is the list of the Connector types on which the filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of the Connector types on which the filter will be applied.",
              "enum": [
                "K8sCluster",
                "Git",
                "Splunk",
                "AppDynamics",
                "Prometheus",
                "Dynatrace",
                "Vault",
                "AzureKeyVault",
                "DockerRegistry",
                "Local",
                "AwsKms",
                "GcpKms",
                "AwsSecretManager",
                "Gcp",
                "Aws",
                "Azure",
                "Artifactory",
                "Jira",
                "Nexus",
                "Github",
                "Gitlab",
                "Bitbucket",
                "Codecommit",
                "CEAws",
                "CEAzure",
                "GcpCloudCost",
                "CEK8sCluster",
                "HttpHelmRepo",
                "NewRelic",
                "Datadog",
                "SumoLogic",
                "PagerDuty",
                "CustomHealth",
                "ServiceNow",
                "ErrorTracking",
                "Pdc",
                "AzureRepo",
                "Jenkins",
                "OciHelmRepo",
                "CustomSecretManager",
                "ElasticSearch",
                "GcpSecretManager",
                "AzureArtifacts",
                "Tas",
                "Spot"
              ]
            }
          },
          "categories": {
            "type": "array",
            "description": "This is the list of the Connector category on which the filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of the Connector category on which the filter will be applied.",
              "enum": [
                "CLOUD_PROVIDER",
                "SECRET_MANAGER",
                "CLOUD_COST",
                "ARTIFACTORY",
                "CODE_REPO",
                "MONITORING",
                "TICKETING"
              ]
            }
          },
          "connectivityStatuses": {
            "type": "array",
            "description": "This is the list of the Connector status on which the filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of the Connector status on which the filter will be applied.",
              "enum": [
                "SUCCESS",
                "FAILURE",
                "PARTIAL",
                "UNKNOWN"
              ]
            }
          },
          "inheritingCredentialsFromDelegate": {
            "type": "boolean",
            "description": "Boolean value to indicate if the Connector is using credentials from the Delegate to connect."
          },
          "connectorConnectivityModes": {
            "type": "array",
            "description": "Connector connectivity mode on which the filter is applied",
            "items": {
              "type": "string",
              "description": "Connector connectivity mode on which the filter is applied",
              "enum": [
                "DELEGATE",
                "MANAGER"
              ]
            }
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Filter tags as a key-value pair."
            },
            "description": "Filter tags as a key-value pair."
          },
          "filterType": {
            "type": "string",
            "enum": [
              "Connector"
            ]
          }
        },
        "description": "Properties of the Connector Filter defined in Harness"
      },
      "ResponseDTOConnectorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ConnectorResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Connector": {
        "type": "object",
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/ConnectorInfo"
          }
        },
        "description": "This is the view of Connector entity as defined in Harness."
      },
      "FieldValues": {
        "type": "object",
        "properties": {
          "fieldValues": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "ResponseDTOFieldValues": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FieldValues"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOString": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "string"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ConnectorCatalogueItem": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of this Connector.",
            "enum": [
              "CLOUD_PROVIDER",
              "SECRET_MANAGER",
              "CLOUD_COST",
              "ARTIFACTORY",
              "CODE_REPO",
              "MONITORING",
              "TICKETING"
            ]
          },
          "connectors": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of Connector types corresponding to a specific category.",
            "items": {
              "type": "string",
              "description": "List of Connector types corresponding to a specific category.",
              "enum": [
                "K8sCluster",
                "Git",
                "Splunk",
                "AppDynamics",
                "Prometheus",
                "Dynatrace",
                "Vault",
                "AzureKeyVault",
                "DockerRegistry",
                "Local",
                "AwsKms",
                "GcpKms",
                "AwsSecretManager",
                "Gcp",
                "Aws",
                "Azure",
                "Artifactory",
                "Jira",
                "Nexus",
                "Github",
                "Gitlab",
                "Bitbucket",
                "Codecommit",
                "CEAws",
                "CEAzure",
                "GcpCloudCost",
                "CEK8sCluster",
                "HttpHelmRepo",
                "NewRelic",
                "Datadog",
                "SumoLogic",
                "PagerDuty",
                "CustomHealth",
                "ServiceNow",
                "ErrorTracking",
                "Pdc",
                "AzureRepo",
                "Jenkins",
                "OciHelmRepo",
                "CustomSecretManager",
                "ElasticSearch",
                "GcpSecretManager",
                "AzureArtifacts",
                "Tas",
                "Spot"
              ]
            }
          }
        },
        "description": "This has details of the Connector Catalogue in Harness."
      },
      "ConnectorCatalogueResponse": {
        "type": "object",
        "properties": {
          "catalogue": {
            "type": "array",
            "description": "List of Connector category and Connector types corresponding to a specific category.",
            "items": {
              "$ref": "#/components/schemas/ConnectorCatalogueItem"
            }
          }
        },
        "description": "This has details of the retrieved Connector Catalogue."
      },
      "ResponseDTOConnectorCatalogueResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ConnectorCatalogueResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ConnectorStatistics": {
        "type": "object",
        "properties": {
          "typeStats": {
            "type": "array",
            "description": "Count of Connectors grouped by type.",
            "items": {
              "$ref": "#/components/schemas/ConnectorTypeStats"
            }
          },
          "statusStats": {
            "type": "array",
            "description": "Count of Connectors grouped by status.",
            "items": {
              "$ref": "#/components/schemas/ConnectorStatusStats"
            }
          }
        },
        "description": "This has the count for all Connector Types and Status defined in Harness"
      },
      "ConnectorStatusStats": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "PARTIAL",
              "UNKNOWN"
            ]
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Count of Connectors grouped by status."
      },
      "ConnectorTypeStats": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "K8sCluster",
              "Git",
              "Splunk",
              "AppDynamics",
              "Prometheus",
              "Dynatrace",
              "Vault",
              "AzureKeyVault",
              "DockerRegistry",
              "Local",
              "AwsKms",
              "GcpKms",
              "AwsSecretManager",
              "Gcp",
              "Aws",
              "Azure",
              "Artifactory",
              "Jira",
              "Nexus",
              "Github",
              "Gitlab",
              "Bitbucket",
              "Codecommit",
              "CEAws",
              "CEAzure",
              "GcpCloudCost",
              "CEK8sCluster",
              "HttpHelmRepo",
              "NewRelic",
              "Datadog",
              "SumoLogic",
              "PagerDuty",
              "CustomHealth",
              "ServiceNow",
              "ErrorTracking",
              "Pdc",
              "AzureRepo",
              "Jenkins",
              "OciHelmRepo",
              "CustomSecretManager",
              "ElasticSearch",
              "GcpSecretManager",
              "AzureArtifacts",
              "Tas",
              "Spot"
            ]
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Count of Connectors grouped by type."
      },
      "ResponseDTOConnectorStatistics": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ConnectorStatistics"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseConnectorResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseConnectorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseConnectorResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListConnectorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorResponse"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ConnectorValidationResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Connectivity status of a Connector.",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "PARTIAL",
              "UNKNOWN"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors and their details.",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "errorSummary": {
            "type": "string",
            "description": "Summary of errors."
          },
          "testedAt": {
            "type": "integer",
            "description": "Time at which Test Connection was completed ",
            "format": "int64"
          },
          "delegateId": {
            "type": "string",
            "description": "ID of Delegate on which Test Connection is executed."
          }
        },
        "description": "This has validation details for the Connector defined in Harness."
      },
      "ResponseDTOConnectorValidationResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ConnectorValidationResult"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListString": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "EmbeddedUserDetailsDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "description": "Updated by user details"
      },
      "File": {
        "required": [
          "name",
          "parentIdentifier",
          "type"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the File or Folder"
          },
          "name": {
            "type": "string",
            "description": "Name of the File or Folder"
          },
          "fileUsage": {
            "type": "string",
            "description": "This specifies the file usage",
            "enum": [
              "MANIFEST_FILE",
              "CONFIG",
              "SCRIPT"
            ]
          },
          "type": {
            "type": "string",
            "description": "This specifies the type of the File",
            "enum": [
              "FILE",
              "FOLDER"
            ]
          },
          "parentIdentifier": {
            "type": "string",
            "description": "This specifies parent directory identifier. The value of Root directory identifier is Root."
          },
          "description": {
            "type": "string",
            "description": "Description of the File or Folder"
          },
          "tags": {
            "type": "array",
            "description": "Tags",
            "items": {
              "$ref": "#/components/schemas/NGTag"
            }
          },
          "mimeType": {
            "type": "string",
            "description": "Mime type of the File"
          },
          "path": {
            "type": "string",
            "description": "The path of the File or Folder",
            "readOnly": true
          },
          "draft": {
            "type": "boolean",
            "description": "Whether File is draft or not",
            "readOnly": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "Last modified time for the File or Folder",
            "format": "int64",
            "readOnly": true
          }
        },
        "description": "This is details of the File or Folder entity defined in Harness."
      },
      "NGTag": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Tag key"
          },
          "value": {
            "type": "string",
            "description": "Tag value"
          }
        },
        "description": "This is the view of the tags of the entity."
      },
      "ResponseDTOFile": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/File"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "FileStoreRequest": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/File"
          }
        }
      },
      "ResponseDTOSetEmbeddedUserDetailsDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "EntityDetail": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CreatePR",
              "MergePR",
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Http",
              "Email",
              "JiraCreate",
              "JiraUpdate",
              "JiraApproval",
              "HarnessApproval",
              "CustomApproval",
              "Barrier",
              "Queue",
              "FlagConfiguration",
              "ShellScript",
              "K8sCanaryDeploy",
              "K8sApply",
              "K8sBlueGreenDeploy",
              "K8sRollingDeploy",
              "K8sRollingRollback",
              "K8sScale",
              "K8sDelete",
              "K8sBGSwapServices",
              "K8sCanaryDelete",
              "TerraformApply",
              "TerraformPlan",
              "TerraformDestroy",
              "TerraformRollback",
              "HelmDeploy",
              "HelmRollback",
              "Connectors",
              "Secrets",
              "Files",
              "Service",
              "Environment",
              "EnvironmentGroup",
              "InputSets",
              "CvConfig",
              "Verify",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "SecurityStage",
              "SecuritySteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "PipelineStage",
              "FeatureFlagStage",
              "Template",
              "TemplateStage",
              "CustomDeployment",
              "Triggers",
              "MonitoredService",
              "GitRepositories",
              "FeatureFlags",
              "ServiceNowApproval",
              "ServiceNowCreate",
              "ServiceNowUpdate",
              "ServiceNowImportSet",
              "GovernancePolicies",
              "Policy",
              "Run",
              "RunTests",
              "Plugin",
              "RestoreCacheGCS",
              "RestoreCacheS3",
              "SaveCacheGCS",
              "SaveCacheS3",
              "Security",
              "AquaTrivy",
              "AWSECR",
              "Bandit",
              "BlackDuck",
              "Brakeman",
              "Burp",
              "Checkmarx",
              "Clair",
              "DataTheorem",
              "DockerContentTrust",
              "External",
              "FortifyOnDemand",
              "Grype",
              "JfrogXray",
              "Mend",
              "Metasploit",
              "Nessus",
              "NexusIQ",
              "Nikto",
              "Nmap",
              "Openvas",
              "Owasp",
              "PrismaCloud",
              "Prowler",
              "Qualys",
              "Reapsaw",
              "ShiftLeft",
              "Sniper",
              "Snyk",
              "Sonarqube",
              "Sysdig",
              "Tenable",
              "Veracode",
              "Zap",
              "GitClone",
              "ArtifactoryUpload",
              "GCSUpload",
              "S3Upload",
              "BuildAndPushGCR",
              "BuildAndPushECR",
              "BuildAndPushDockerRegistry",
              "CreateStack",
              "DeleteStack",
              "ServerlessAwsLambdaDeploy",
              "ServerlessAwsLambdaRollback",
              "CustomStage",
              "RollbackStack",
              "Infrastructure",
              "Command",
              "StrategyNode",
              "AzureSlotDeployment",
              "AzureTrafficShift",
              "FetchInstanceScript",
              "AzureSwapSlot",
              "AzureWebAppRollback",
              "JenkinsBuild",
              "EcsRollingDeploy",
              "EcsRollingRollback",
              "EcsCanaryDeploy",
              "EcsCanaryDelete",
              "AzureCreateARMResource",
              "BuildAndPushACR",
              "AzureCreateBPResource",
              "AzureARMRollback",
              "Background",
              "Wait",
              "ArtifactSource",
              "EcsBlueGreenCreateService",
              "EcsBlueGreenSwapTargetGroups",
              "EcsBlueGreenRollback",
              "ShellScriptProvision",
              "Freeze",
              "GitOpsUpdateReleaseRepo",
              "GitOpsFetchLinkedApps",
              "EcsRunTask",
              "Chaos",
              "ElastigroupDeploy",
              "ElastigroupRollback",
              "Action",
              "ElastigroupSetup",
              "Bitrise",
              "TerragruntPlan",
              "TerragruntApply",
              "TerragruntDestroy",
              "TerragruntRollback",
              "IACMStage",
              "IACMStep",
              "IACM",
              "Container",
              "IACMTerraformPlan",
              "IACMTemplate",
              "ElastigroupBGStageSetup",
              "ElastigroupSwapRoute",
              "AsgCanaryDeploy",
              "AsgCanaryDelete",
              "SwapRoutes",
              "SwapRollback",
              "AppResize",
              "AppRollback",
              "CanaryAppSetup",
              "BGAppSetup",
              "BasicAppSetup",
              "TanzuCommand",
              "AsgRollingDeploy",
              "AsgRollingRollback",
              "GovernanceRuleAWS",
              "TasRollingDeploy",
              "TasRollingRollback",
              "K8sDryRun",
              "AsgBlueGreenSwapService",
              "AsgBlueGreenDeploy",
              "AsgBlueGreenRollback"
            ]
          },
          "entityRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "EntityReference": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean"
          },
          "repoIdentifier": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean",
            "writeOnly": true
          },
          "branch": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "accountIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          }
        }
      },
      "EntityReferredByInfraSetupUsageDetail": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetupUsageDetail"
          },
          {
            "type": "object",
            "properties": {
              "environmentIdentifier": {
                "type": "string"
              },
              "environmentName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "EntityReferredByPipelineSetupUsageDetail": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetupUsageDetail"
          },
          {
            "type": "object",
            "properties": {
              "identifier": {
                "type": "string"
              },
              "referenceType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "EntitySetupUsage": {
        "required": [
          "referredByEntity"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "referredEntity": {
            "$ref": "#/components/schemas/EntityDetail"
          },
          "referredByEntity": {
            "$ref": "#/components/schemas/EntityDetail"
          },
          "detail": {
            "$ref": "#/components/schemas/SetupUsageDetail"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "This is the view of the Entity Setup Usage defined in Harness"
      },
      "PageEntitySetupUsage": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "first": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntitySetupUsage"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "last": {
            "type": "boolean"
          },
          "pageable": {
            "$ref": "#/components/schemas/Pageable"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ResponseDTOPageEntitySetupUsage": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageEntitySetupUsage"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SecretReferredByConnectorSetupUsageDetail": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SetupUsageDetail"
          },
          {
            "type": "object",
            "properties": {
              "fieldName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SetupUsageDetail": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Sort": {
        "type": "object",
        "properties": {
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOListEntityType": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CreatePR",
                "MergePR",
                "Projects",
                "Pipelines",
                "PipelineSteps",
                "Http",
                "Email",
                "JiraCreate",
                "JiraUpdate",
                "JiraApproval",
                "HarnessApproval",
                "CustomApproval",
                "Barrier",
                "Queue",
                "FlagConfiguration",
                "ShellScript",
                "K8sCanaryDeploy",
                "K8sApply",
                "K8sBlueGreenDeploy",
                "K8sRollingDeploy",
                "K8sRollingRollback",
                "K8sScale",
                "K8sDelete",
                "K8sBGSwapServices",
                "K8sCanaryDelete",
                "TerraformApply",
                "TerraformPlan",
                "TerraformDestroy",
                "TerraformRollback",
                "HelmDeploy",
                "HelmRollback",
                "Connectors",
                "Secrets",
                "Files",
                "Service",
                "Environment",
                "EnvironmentGroup",
                "InputSets",
                "CvConfig",
                "Verify",
                "Delegates",
                "DelegateConfigurations",
                "CvVerificationJob",
                "IntegrationStage",
                "IntegrationSteps",
                "SecurityStage",
                "SecuritySteps",
                "CvKubernetesActivitySource",
                "DeploymentSteps",
                "DeploymentStage",
                "ApprovalStage",
                "PipelineStage",
                "FeatureFlagStage",
                "Template",
                "TemplateStage",
                "CustomDeployment",
                "Triggers",
                "MonitoredService",
                "GitRepositories",
                "FeatureFlags",
                "ServiceNowApproval",
                "ServiceNowCreate",
                "ServiceNowUpdate",
                "ServiceNowImportSet",
                "GovernancePolicies",
                "Policy",
                "Run",
                "RunTests",
                "Plugin",
                "RestoreCacheGCS",
                "RestoreCacheS3",
                "SaveCacheGCS",
                "SaveCacheS3",
                "Security",
                "AquaTrivy",
                "AWSECR",
                "Bandit",
                "BlackDuck",
                "Brakeman",
                "Burp",
                "Checkmarx",
                "Clair",
                "DataTheorem",
                "DockerContentTrust",
                "External",
                "FortifyOnDemand",
                "Grype",
                "JfrogXray",
                "Mend",
                "Metasploit",
                "Nessus",
                "NexusIQ",
                "Nikto",
                "Nmap",
                "Openvas",
                "Owasp",
                "PrismaCloud",
                "Prowler",
                "Qualys",
                "Reapsaw",
                "ShiftLeft",
                "Sniper",
                "Snyk",
                "Sonarqube",
                "Sysdig",
                "Tenable",
                "Veracode",
                "Zap",
                "GitClone",
                "ArtifactoryUpload",
                "GCSUpload",
                "S3Upload",
                "BuildAndPushGCR",
                "BuildAndPushECR",
                "BuildAndPushDockerRegistry",
                "CreateStack",
                "DeleteStack",
                "ServerlessAwsLambdaDeploy",
                "ServerlessAwsLambdaRollback",
                "CustomStage",
                "RollbackStack",
                "Infrastructure",
                "Command",
                "StrategyNode",
                "AzureSlotDeployment",
                "AzureTrafficShift",
                "FetchInstanceScript",
                "AzureSwapSlot",
                "AzureWebAppRollback",
                "JenkinsBuild",
                "EcsRollingDeploy",
                "EcsRollingRollback",
                "EcsCanaryDeploy",
                "EcsCanaryDelete",
                "AzureCreateARMResource",
                "BuildAndPushACR",
                "AzureCreateBPResource",
                "AzureARMRollback",
                "Background",
                "Wait",
                "ArtifactSource",
                "EcsBlueGreenCreateService",
                "EcsBlueGreenSwapTargetGroups",
                "EcsBlueGreenRollback",
                "ShellScriptProvision",
                "Freeze",
                "GitOpsUpdateReleaseRepo",
                "GitOpsFetchLinkedApps",
                "EcsRunTask",
                "Chaos",
                "ElastigroupDeploy",
                "ElastigroupRollback",
                "Action",
                "ElastigroupSetup",
                "Bitrise",
                "TerragruntPlan",
                "TerragruntApply",
                "TerragruntDestroy",
                "TerragruntRollback",
                "IACMStage",
                "IACMStep",
                "IACM",
                "Container",
                "IACMTerraformPlan",
                "IACMTemplate",
                "ElastigroupBGStageSetup",
                "ElastigroupSwapRoute",
                "AsgCanaryDeploy",
                "AsgCanaryDelete",
                "SwapRoutes",
                "SwapRollback",
                "AppResize",
                "AppRollback",
                "CanaryAppSetup",
                "BGAppSetup",
                "BasicAppSetup",
                "TanzuCommand",
                "AsgRollingDeploy",
                "AsgRollingRollback",
                "GovernanceRuleAWS",
                "TasRollingDeploy",
                "TasRollingRollback",
                "K8sDryRun",
                "AsgBlueGreenSwapService",
                "AsgBlueGreenDeploy",
                "AsgBlueGreenRollback"
              ]
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageFile": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "first": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "last": {
            "type": "boolean"
          },
          "pageable": {
            "$ref": "#/components/schemas/Pageable"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageFile": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageFile"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SortOrder": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "orderType": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        }
      },
      "FilesFilterPropertiesDTO": {
        "required": [
          "filterType"
        ],
        "type": "object",
        "properties": {
          "fileUsage": {
            "type": "string",
            "description": "This specifies the file usage",
            "enum": [
              "MANIFEST_FILE",
              "CONFIG",
              "SCRIPT"
            ]
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
          },
          "referencedBy": {
            "$ref": "#/components/schemas/ReferencedByDTO"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Filter tags as a key-value pair."
            },
            "description": "Filter tags as a key-value pair."
          },
          "filterType": {
            "type": "string",
            "description": "This specifies the corresponding Entity of the filter.",
            "enum": [
              "Connector",
              "DelegateProfile",
              "Delegate",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit",
              "Template",
              "EnvironmentGroup",
              "FileStore",
              "CCMRecommendation",
              "Anomaly",
              "Environment",
              "RuleExecution"
            ]
          }
        },
        "description": "Properties of the Files Filter defined in Harness"
      },
      "ReferencedByDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CreatePR",
              "MergePR",
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Http",
              "Email",
              "JiraCreate",
              "JiraUpdate",
              "JiraApproval",
              "HarnessApproval",
              "CustomApproval",
              "Barrier",
              "Queue",
              "FlagConfiguration",
              "ShellScript",
              "K8sCanaryDeploy",
              "K8sApply",
              "K8sBlueGreenDeploy",
              "K8sRollingDeploy",
              "K8sRollingRollback",
              "K8sScale",
              "K8sDelete",
              "K8sBGSwapServices",
              "K8sCanaryDelete",
              "TerraformApply",
              "TerraformPlan",
              "TerraformDestroy",
              "TerraformRollback",
              "HelmDeploy",
              "HelmRollback",
              "Connectors",
              "Secrets",
              "Files",
              "Service",
              "Environment",
              "EnvironmentGroup",
              "InputSets",
              "CvConfig",
              "Verify",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "SecurityStage",
              "SecuritySteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "PipelineStage",
              "FeatureFlagStage",
              "Template",
              "TemplateStage",
              "CustomDeployment",
              "Triggers",
              "MonitoredService",
              "GitRepositories",
              "FeatureFlags",
              "ServiceNowApproval",
              "ServiceNowCreate",
              "ServiceNowUpdate",
              "ServiceNowImportSet",
              "GovernancePolicies",
              "Policy",
              "Run",
              "RunTests",
              "Plugin",
              "RestoreCacheGCS",
              "RestoreCacheS3",
              "SaveCacheGCS",
              "SaveCacheS3",
              "Security",
              "AquaTrivy",
              "AWSECR",
              "Bandit",
              "BlackDuck",
              "Brakeman",
              "Burp",
              "Checkmarx",
              "Clair",
              "DataTheorem",
              "DockerContentTrust",
              "External",
              "FortifyOnDemand",
              "Grype",
              "JfrogXray",
              "Mend",
              "Metasploit",
              "Nessus",
              "NexusIQ",
              "Nikto",
              "Nmap",
              "Openvas",
              "Owasp",
              "PrismaCloud",
              "Prowler",
              "Qualys",
              "Reapsaw",
              "ShiftLeft",
              "Sniper",
              "Snyk",
              "Sonarqube",
              "Sysdig",
              "Tenable",
              "Veracode",
              "Zap",
              "GitClone",
              "ArtifactoryUpload",
              "GCSUpload",
              "S3Upload",
              "BuildAndPushGCR",
              "BuildAndPushECR",
              "BuildAndPushDockerRegistry",
              "CreateStack",
              "DeleteStack",
              "ServerlessAwsLambdaDeploy",
              "ServerlessAwsLambdaRollback",
              "CustomStage",
              "RollbackStack",
              "Infrastructure",
              "Command",
              "StrategyNode",
              "AzureSlotDeployment",
              "AzureTrafficShift",
              "FetchInstanceScript",
              "AzureSwapSlot",
              "AzureWebAppRollback",
              "JenkinsBuild",
              "EcsRollingDeploy",
              "EcsRollingRollback",
              "EcsCanaryDeploy",
              "EcsCanaryDelete",
              "AzureCreateARMResource",
              "BuildAndPushACR",
              "AzureCreateBPResource",
              "AzureARMRollback",
              "Background",
              "Wait",
              "ArtifactSource",
              "EcsBlueGreenCreateService",
              "EcsBlueGreenSwapTargetGroups",
              "EcsBlueGreenRollback",
              "ShellScriptProvision",
              "Freeze",
              "GitOpsUpdateReleaseRepo",
              "GitOpsFetchLinkedApps",
              "EcsRunTask",
              "Chaos",
              "ElastigroupDeploy",
              "ElastigroupRollback",
              "Action",
              "ElastigroupSetup",
              "Bitrise",
              "TerragruntPlan",
              "TerragruntApply",
              "TerragruntDestroy",
              "TerragruntRollback",
              "IACMStage",
              "IACMStep",
              "IACM",
              "Container",
              "IACMTerraformPlan",
              "IACMTemplate",
              "ElastigroupBGStageSetup",
              "ElastigroupSwapRoute",
              "AsgCanaryDeploy",
              "AsgCanaryDelete",
              "SwapRoutes",
              "SwapRollback",
              "AppResize",
              "AppRollback",
              "CanaryAppSetup",
              "BGAppSetup",
              "BasicAppSetup",
              "TanzuCommand",
              "AsgRollingDeploy",
              "AsgRollingRollback",
              "GovernanceRuleAWS",
              "TasRollingDeploy",
              "TasRollingRollback",
              "K8sDryRun",
              "AsgBlueGreenSwapService",
              "AsgBlueGreenDeploy",
              "AsgBlueGreenRollback"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "description": "File referenced by other entity"
      },
      "FileNode": {
        "required": [
          "fileUsage",
          "identifier",
          "name",
          "type"
        ],
        "type": "object",
        "description": "This contains file details",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileStoreNode"
          },
          {
            "type": "object",
            "properties": {
              "fileUsage": {
                "type": "string",
                "description": "File usage of the File Store Node",
                "enum": [
                  "MANIFEST_FILE",
                  "CONFIG",
                  "SCRIPT"
                ]
              },
              "description": {
                "type": "string",
                "description": "Description of the File Store Node"
              },
              "tags": {
                "type": "array",
                "description": "Tags of the File Store Node",
                "items": {
                  "$ref": "#/components/schemas/NGTag"
                }
              },
              "mimeType": {
                "type": "string",
                "description": "Mime type of the File Store Node"
              },
              "content": {
                "type": "string",
                "description": "Content of the file"
              },
              "size": {
                "type": "integer",
                "description": "The size of the file",
                "format": "int64"
              }
            }
          }
        ]
      },
      "FileStoreNode": {
        "required": [
          "identifier",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the File Store Node"
          },
          "parentIdentifier": {
            "type": "string",
            "description": "Parent identifier of the File Store Node"
          },
          "name": {
            "type": "string",
            "description": "Name of the File Store Node"
          },
          "type": {
            "type": "string",
            "description": "Type of the File Store Node",
            "enum": [
              "FILE",
              "FOLDER"
            ]
          },
          "path": {
            "type": "string",
            "description": "Path of the file or folder",
            "readOnly": true
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "Last modified time for the File Store Node",
            "format": "int64",
            "readOnly": true
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
          }
        },
        "description": "This is the view of the file store node entity defined in Harness"
      },
      "FolderNode": {
        "required": [
          "identifier",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the File Store Node"
          },
          "parentIdentifier": {
            "type": "string",
            "description": "Parent identifier of the File Store Node"
          },
          "name": {
            "type": "string",
            "description": "Name of the File Store Node"
          },
          "type": {
            "type": "string",
            "description": "Type of the File Store Node",
            "enum": [
              "FILE",
              "FOLDER"
            ]
          },
          "path": {
            "type": "string",
            "description": "Path of the file or folder",
            "readOnly": true
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "Last modified time for the File Store Node",
            "format": "int64",
            "readOnly": true
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/EmbeddedUserDetailsDTO"
          },
          "children": {
            "type": "array",
            "description": "Node children",
            "items": {
              "$ref": "#/components/schemas/FileStoreNode"
            }
          }
        },
        "description": "This contains folder details"
      },
      "ResponseDTOFolderNode": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FolderNode"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Filter": {
        "required": [
          "filterProperties",
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Filter."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the Filter."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "filterProperties": {
            "$ref": "#/components/schemas/FilterProperties"
          },
          "filterVisibility": {
            "type": "string",
            "description": "This indicates visibility of Filter, by default it is Everyone.",
            "enum": [
              "EveryOne",
              "OnlyCreator"
            ]
          }
        },
        "description": "This has details of the Filter entity defined in Harness"
      },
      "ResponseDTOFilter": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Filter"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseFilter": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseFilter": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseFilter"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GitBranch": {
        "required": [
          "branchName",
          "branchSyncStatus"
        ],
        "type": "object",
        "properties": {
          "branchName": {
            "type": "string",
            "description": "Name of the branch."
          },
          "branchSyncStatus": {
            "type": "string",
            "description": "Sync Status of the Branch",
            "enum": [
              "SYNCED",
              "SYNCING",
              "UNSYNCED"
            ]
          }
        },
        "description": "This contains details of the Git branch"
      },
      "GitBranchList": {
        "type": "object",
        "properties": {
          "defaultBranch": {
            "$ref": "#/components/schemas/GitBranch"
          },
          "branches": {
            "$ref": "#/components/schemas/PageResponseGitBranch"
          }
        },
        "description": "This contains details of the default and other branch"
      },
      "PageResponseGitBranch": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitBranch"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        },
        "description": "This contains details of all the branches of given repo"
      },
      "ResponseDTOGitBranchList": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitBranchList"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GitFullSyncConfig": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "baseBranch": {
            "type": "string",
            "description": "Name of the branch from which the new branch will be forked out."
          },
          "branch": {
            "type": "string",
            "description": "Name of the branch. Entities were pushed to this branch, and a pull request was made from it."
          },
          "prTitle": {
            "type": "string",
            "description": "Title of the pull request."
          },
          "createPullRequest": {
            "type": "boolean",
            "description": "Determines if pull request was created."
          },
          "repoIdentifier": {
            "type": "string",
            "description": "Git Sync Config Id."
          },
          "isNewBranch": {
            "type": "boolean",
            "writeOnly": true
          },
          "targetBranch": {
            "type": "string",
            "description": "Name of the target branch of the pull request."
          },
          "rootFolder": {
            "type": "string",
            "description": "Path of the root folder inside which entities were pushed."
          },
          "newBranch": {
            "type": "boolean"
          }
        },
        "description": "This has config details specific to Git Full Sync with Harness."
      },
      "ResponseDTOGitFullSyncConfig": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitFullSyncConfig"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GitFullSyncConfigRequest": {
        "required": [
          "branch",
          "repoIdentifier",
          "rootFolder"
        ],
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "Name of the branch to which the entities will be pushed and from which pull request will be created."
          },
          "repoIdentifier": {
            "type": "string",
            "description": "Git Sync Config Id."
          },
          "rootFolder": {
            "type": "string",
            "description": "Path of the root folder inside which the entities will be pushed."
          },
          "isNewBranch": {
            "type": "boolean",
            "writeOnly": true
          },
          "baseBranch": {
            "type": "string",
            "description": "Name of the branch from which new branch will be forked out."
          },
          "createPullRequest": {
            "type": "boolean",
            "description": "If true a pull request will be created from branch to target branch.Default: false."
          },
          "targetBranch": {
            "type": "string",
            "description": "Name of the branch to which pull request will be merged."
          },
          "prTitle": {
            "type": "string",
            "description": "Title of the pull request."
          },
          "newBranch": {
            "type": "boolean"
          }
        },
        "description": "Details required to trigger Git Full Sync."
      },
      "GitFullSyncEntityInfo": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "filePath": {
            "type": "string",
            "description": "File Path of the Entity."
          },
          "entityType": {
            "type": "string",
            "description": "Entity Type.",
            "enum": [
              "CreatePR",
              "MergePR",
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Http",
              "Email",
              "JiraCreate",
              "JiraUpdate",
              "JiraApproval",
              "HarnessApproval",
              "CustomApproval",
              "Barrier",
              "Queue",
              "FlagConfiguration",
              "ShellScript",
              "K8sCanaryDeploy",
              "K8sApply",
              "K8sBlueGreenDeploy",
              "K8sRollingDeploy",
              "K8sRollingRollback",
              "K8sScale",
              "K8sDelete",
              "K8sBGSwapServices",
              "K8sCanaryDelete",
              "TerraformApply",
              "TerraformPlan",
              "TerraformDestroy",
              "TerraformRollback",
              "HelmDeploy",
              "HelmRollback",
              "Connectors",
              "Secrets",
              "Files",
              "Service",
              "Environment",
              "EnvironmentGroup",
              "InputSets",
              "CvConfig",
              "Verify",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "SecurityStage",
              "SecuritySteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "PipelineStage",
              "FeatureFlagStage",
              "Template",
              "TemplateStage",
              "CustomDeployment",
              "Triggers",
              "MonitoredService",
              "GitRepositories",
              "FeatureFlags",
              "ServiceNowApproval",
              "ServiceNowCreate",
              "ServiceNowUpdate",
              "ServiceNowImportSet",
              "GovernancePolicies",
              "Policy",
              "Run",
              "RunTests",
              "Plugin",
              "RestoreCacheGCS",
              "RestoreCacheS3",
              "SaveCacheGCS",
              "SaveCacheS3",
              "Security",
              "AquaTrivy",
              "AWSECR",
              "Bandit",
              "BlackDuck",
              "Brakeman",
              "Burp",
              "Checkmarx",
              "Clair",
              "DataTheorem",
              "DockerContentTrust",
              "External",
              "FortifyOnDemand",
              "Grype",
              "JfrogXray",
              "Mend",
              "Metasploit",
              "Nessus",
              "NexusIQ",
              "Nikto",
              "Nmap",
              "Openvas",
              "Owasp",
              "PrismaCloud",
              "Prowler",
              "Qualys",
              "Reapsaw",
              "ShiftLeft",
              "Sniper",
              "Snyk",
              "Sonarqube",
              "Sysdig",
              "Tenable",
              "Veracode",
              "Zap",
              "GitClone",
              "ArtifactoryUpload",
              "GCSUpload",
              "S3Upload",
              "BuildAndPushGCR",
              "BuildAndPushECR",
              "BuildAndPushDockerRegistry",
              "CreateStack",
              "DeleteStack",
              "ServerlessAwsLambdaDeploy",
              "ServerlessAwsLambdaRollback",
              "CustomStage",
              "RollbackStack",
              "Infrastructure",
              "Command",
              "StrategyNode",
              "AzureSlotDeployment",
              "AzureTrafficShift",
              "FetchInstanceScript",
              "AzureSwapSlot",
              "AzureWebAppRollback",
              "JenkinsBuild",
              "EcsRollingDeploy",
              "EcsRollingRollback",
              "EcsCanaryDeploy",
              "EcsCanaryDelete",
              "AzureCreateARMResource",
              "BuildAndPushACR",
              "AzureCreateBPResource",
              "AzureARMRollback",
              "Background",
              "Wait",
              "ArtifactSource",
              "EcsBlueGreenCreateService",
              "EcsBlueGreenSwapTargetGroups",
              "EcsBlueGreenRollback",
              "ShellScriptProvision",
              "Freeze",
              "GitOpsUpdateReleaseRepo",
              "GitOpsFetchLinkedApps",
              "EcsRunTask",
              "Chaos",
              "ElastigroupDeploy",
              "ElastigroupRollback",
              "Action",
              "ElastigroupSetup",
              "Bitrise",
              "TerragruntPlan",
              "TerragruntApply",
              "TerragruntDestroy",
              "TerragruntRollback",
              "IACMStage",
              "IACMStep",
              "IACM",
              "Container",
              "IACMTerraformPlan",
              "IACMTemplate",
              "ElastigroupBGStageSetup",
              "ElastigroupSwapRoute",
              "AsgCanaryDeploy",
              "AsgCanaryDelete",
              "SwapRoutes",
              "SwapRollback",
              "AppResize",
              "AppRollback",
              "CanaryAppSetup",
              "BGAppSetup",
              "BasicAppSetup",
              "TanzuCommand",
              "AsgRollingDeploy",
              "AsgRollingRollback",
              "GovernanceRuleAWS",
              "TasRollingDeploy",
              "TasRollingRollback",
              "K8sDryRun",
              "AsgBlueGreenSwapService",
              "AsgBlueGreenDeploy",
              "AsgBlueGreenRollback"
            ]
          },
          "syncStatus": {
            "type": "string",
            "description": "Sync Status of the Entity that may be QUEUED, SUCCESS or FAILED.",
            "enum": [
              "QUEUED",
              "SUCCESS",
              "FAILED",
              "OVERRIDDEN"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the Entity."
          },
          "branch": {
            "type": "string",
            "description": "Name of the branch."
          },
          "repoName": {
            "type": "string",
            "description": "Name of the repository."
          },
          "repoUrl": {
            "type": "string",
            "description": "URL of the repository."
          },
          "rootFolder": {
            "type": "string",
            "description": "Path to the root folder of the Entity."
          },
          "retryCount": {
            "type": "integer",
            "description": "This is the number of full sync retry attempts.",
            "format": "int64"
          },
          "errorMessage": {
            "type": "string",
            "description": "Contains the error details while syncing the entity to Git."
          }
        },
        "description": "This contains the details of a Git Full Sync Entity with its Sync status"
      },
      "PageResponseGitFullSyncEntityInfo": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitFullSyncEntityInfo"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseGitFullSyncEntityInfo": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseGitFullSyncEntityInfo"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GitFullSyncEntityInfoFilter": {
        "type": "object",
        "properties": {
          "entityTypes": {
            "type": "array",
            "description": "List of entity Types to filter on the entities.",
            "items": {
              "type": "string",
              "description": "List of entity Types to filter on the entities.",
              "enum": [
                "CreatePR",
                "MergePR",
                "Projects",
                "Pipelines",
                "PipelineSteps",
                "Http",
                "Email",
                "JiraCreate",
                "JiraUpdate",
                "JiraApproval",
                "HarnessApproval",
                "CustomApproval",
                "Barrier",
                "Queue",
                "FlagConfiguration",
                "ShellScript",
                "K8sCanaryDeploy",
                "K8sApply",
                "K8sBlueGreenDeploy",
                "K8sRollingDeploy",
                "K8sRollingRollback",
                "K8sScale",
                "K8sDelete",
                "K8sBGSwapServices",
                "K8sCanaryDelete",
                "TerraformApply",
                "TerraformPlan",
                "TerraformDestroy",
                "TerraformRollback",
                "HelmDeploy",
                "HelmRollback",
                "Connectors",
                "Secrets",
                "Files",
                "Service",
                "Environment",
                "EnvironmentGroup",
                "InputSets",
                "CvConfig",
                "Verify",
                "Delegates",
                "DelegateConfigurations",
                "CvVerificationJob",
                "IntegrationStage",
                "IntegrationSteps",
                "SecurityStage",
                "SecuritySteps",
                "CvKubernetesActivitySource",
                "DeploymentSteps",
                "DeploymentStage",
                "ApprovalStage",
                "PipelineStage",
                "FeatureFlagStage",
                "Template",
                "TemplateStage",
                "CustomDeployment",
                "Triggers",
                "MonitoredService",
                "GitRepositories",
                "FeatureFlags",
                "ServiceNowApproval",
                "ServiceNowCreate",
                "ServiceNowUpdate",
                "ServiceNowImportSet",
                "GovernancePolicies",
                "Policy",
                "Run",
                "RunTests",
                "Plugin",
                "RestoreCacheGCS",
                "RestoreCacheS3",
                "SaveCacheGCS",
                "SaveCacheS3",
                "Security",
                "AquaTrivy",
                "AWSECR",
                "Bandit",
                "BlackDuck",
                "Brakeman",
                "Burp",
                "Checkmarx",
                "Clair",
                "DataTheorem",
                "DockerContentTrust",
                "External",
                "FortifyOnDemand",
                "Grype",
                "JfrogXray",
                "Mend",
                "Metasploit",
                "Nessus",
                "NexusIQ",
                "Nikto",
                "Nmap",
                "Openvas",
                "Owasp",
                "PrismaCloud",
                "Prowler",
                "Qualys",
                "Reapsaw",
                "ShiftLeft",
                "Sniper",
                "Snyk",
                "Sonarqube",
                "Sysdig",
                "Tenable",
                "Veracode",
                "Zap",
                "GitClone",
                "ArtifactoryUpload",
                "GCSUpload",
                "S3Upload",
                "BuildAndPushGCR",
                "BuildAndPushECR",
                "BuildAndPushDockerRegistry",
                "CreateStack",
                "DeleteStack",
                "ServerlessAwsLambdaDeploy",
                "ServerlessAwsLambdaRollback",
                "CustomStage",
                "RollbackStack",
                "Infrastructure",
                "Command",
                "StrategyNode",
                "AzureSlotDeployment",
                "AzureTrafficShift",
                "FetchInstanceScript",
                "AzureSwapSlot",
                "AzureWebAppRollback",
                "JenkinsBuild",
                "EcsRollingDeploy",
                "EcsRollingRollback",
                "EcsCanaryDeploy",
                "EcsCanaryDelete",
                "AzureCreateARMResource",
                "BuildAndPushACR",
                "AzureCreateBPResource",
                "AzureARMRollback",
                "Background",
                "Wait",
                "ArtifactSource",
                "EcsBlueGreenCreateService",
                "EcsBlueGreenSwapTargetGroups",
                "EcsBlueGreenRollback",
                "ShellScriptProvision",
                "Freeze",
                "GitOpsUpdateReleaseRepo",
                "GitOpsFetchLinkedApps",
                "EcsRunTask",
                "Chaos",
                "ElastigroupDeploy",
                "ElastigroupRollback",
                "Action",
                "ElastigroupSetup",
                "Bitrise",
                "TerragruntPlan",
                "TerragruntApply",
                "TerragruntDestroy",
                "TerragruntRollback",
                "IACMStage",
                "IACMStep",
                "IACM",
                "Container",
                "IACMTerraformPlan",
                "IACMTemplate",
                "ElastigroupBGStageSetup",
                "ElastigroupSwapRoute",
                "AsgCanaryDeploy",
                "AsgCanaryDelete",
                "SwapRoutes",
                "SwapRollback",
                "AppResize",
                "AppRollback",
                "CanaryAppSetup",
                "BGAppSetup",
                "BasicAppSetup",
                "TanzuCommand",
                "AsgRollingDeploy",
                "AsgRollingRollback",
                "GovernanceRuleAWS",
                "TasRollingDeploy",
                "TasRollingRollback",
                "K8sDryRun",
                "AsgBlueGreenSwapService",
                "AsgBlueGreenDeploy",
                "AsgBlueGreenRollback"
              ]
            }
          },
          "syncStatus": {
            "type": "string",
            "description": "Sync Status of the Entity that may be QUEUED, SUCCESS or FAILED.",
            "enum": [
              "QUEUED",
              "SUCCESS",
              "FAILED",
              "OVERRIDDEN"
            ]
          }
        },
        "description": "Filter details for Git Full Sync."
      },
      "ResponseDTOTriggerGitFullSyncResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TriggerGitFullSyncResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TriggerGitFullSyncResponse": {
        "type": "object",
        "properties": {
          "isFullSyncTriggered": {
            "type": "boolean",
            "description": "Determines if Full Sync is triggered."
          }
        },
        "description": "This has details to trigger Git Full Sync."
      },
      "GitSyncSettings": {
        "required": [
          "executeOnDelegate",
          "orgIdentifier",
          "projectIdentifier"
        ],
        "type": "object",
        "properties": {
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "executeOnDelegate": {
            "type": "boolean",
            "description": "Specifies Connectivity Mode for Git Sync. If True, executes through Delegate, else executes through Platform. The default value is True"
          },
          "isGitSimplificationEnabled": {
            "type": "boolean",
            "writeOnly": true
          },
          "isEnabledOnlyForFF": {
            "type": "boolean",
            "writeOnly": true
          },
          "enabledOnlyForFF": {
            "type": "boolean"
          },
          "gitSimplificationEnabled": {
            "type": "boolean"
          }
        },
        "description": "This contains details of Git Sync Settings"
      },
      "ResponseDTOGitSyncSettings": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitSyncSettings"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PRDetails": {
        "type": "object",
        "properties": {
          "prNumber": {
            "type": "integer",
            "description": "PR Id",
            "format": "int32"
          }
        },
        "description": "This contains PR Id"
      },
      "ResponseDTOPRDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PRDetails"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GitPRCreateRequest": {
        "required": [
          "accountIdentifier",
          "sourceBranch",
          "targetBranch",
          "title"
        ],
        "type": "object",
        "properties": {
          "sourceBranch": {
            "type": "string",
            "description": "Source Branch for pull request"
          },
          "targetBranch": {
            "type": "string",
            "description": "Target Branch for pull request"
          },
          "title": {
            "type": "string",
            "description": "PR title"
          },
          "yamlGitConfigRef": {
            "type": "string",
            "description": "Git Sync Config Id"
          },
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "useUserFromToken": {
            "type": "boolean",
            "description": "Specifies which token to use. If True, the SCM token will be used, else the Git Connector token will be used"
          }
        }
      },
      "GitFileContent": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Git File Content"
          },
          "objectId": {
            "type": "string",
            "description": "Object Id of the Git File"
          }
        },
        "description": "This contains content of Git File"
      },
      "ResponseDTOGitFileContent": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitFileContent"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GitSyncConfig": {
        "required": [
          "branch",
          "gitConnectorRef",
          "gitConnectorType",
          "identifier",
          "name",
          "repo"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Git Sync Config Id."
          },
          "name": {
            "type": "string",
            "description": "Name of the repository. Any leading/trailing spaces will be removed."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "gitConnectorRef": {
            "type": "string",
            "description": "Id of the Connector referenced in Git"
          },
          "repo": {
            "type": "string",
            "description": "URL of the repository. Any leading/trailing spaces will be removed."
          },
          "branch": {
            "type": "string",
            "description": "Name of the branch. Any leading/trailing spaces will be removed."
          },
          "gitConnectorType": {
            "type": "string",
            "description": "Connector Type",
            "enum": [
              "K8sCluster",
              "Git",
              "Splunk",
              "AppDynamics",
              "Prometheus",
              "Dynatrace",
              "Vault",
              "AzureKeyVault",
              "DockerRegistry",
              "Local",
              "AwsKms",
              "GcpKms",
              "AwsSecretManager",
              "Gcp",
              "Aws",
              "Azure",
              "Artifactory",
              "Jira",
              "Nexus",
              "Github",
              "Gitlab",
              "Bitbucket",
              "Codecommit",
              "CEAws",
              "CEAzure",
              "GcpCloudCost",
              "CEK8sCluster",
              "HttpHelmRepo",
              "NewRelic",
              "Datadog",
              "SumoLogic",
              "PagerDuty",
              "CustomHealth",
              "ServiceNow",
              "ErrorTracking",
              "Pdc",
              "AzureRepo",
              "Jenkins",
              "OciHelmRepo",
              "CustomSecretManager",
              "ElasticSearch",
              "GcpSecretManager",
              "AzureArtifacts",
              "Tas",
              "Spot"
            ]
          },
          "gitSyncFolderConfigDTOs": {
            "type": "array",
            "description": "List of all Root Folder Details",
            "items": {
              "$ref": "#/components/schemas/GitSyncFolderConfig"
            }
          }
        },
        "description": "This contains details of Git Sync Config"
      },
      "GitSyncFolderConfig": {
        "required": [
          "rootFolder"
        ],
        "type": "object",
        "properties": {
          "rootFolder": {
            "type": "string",
            "description": "Root Folder Name"
          },
          "isDefault": {
            "type": "boolean",
            "description": "This checks if the folder is the default folder"
          }
        },
        "description": "This contains details of Root Folder"
      },
      "GitEnabled": {
        "type": "object",
        "properties": {
          "isGitSyncEnabled": {
            "type": "boolean",
            "writeOnly": true
          },
          "connectivityMode": {
            "type": "string",
            "description": "This is the Git Sync connectivity mode",
            "enum": [
              "MANAGER",
              "DELEGATE"
            ]
          },
          "isGitSimplificationEnabled": {
            "type": "boolean",
            "writeOnly": true
          },
          "isGitSyncEnabledOnlyForFF": {
            "type": "boolean",
            "writeOnly": true
          },
          "gitSimplificationEnabled": {
            "type": "boolean"
          },
          "gitSyncEnabledOnlyForFF": {
            "type": "boolean"
          },
          "gitSyncEnabled": {
            "type": "boolean"
          }
        },
        "description": "This contains details of connectivity mode and whether Git Sync is enabled"
      },
      "GitSyncErrorCount": {
        "type": "object",
        "properties": {
          "gitToHarnessErrorCount": {
            "type": "integer",
            "description": "This is the number of Git to Harness errors",
            "format": "int64"
          },
          "connectivityErrorCount": {
            "type": "integer",
            "description": "This is the number of connectivity errors",
            "format": "int64"
          }
        },
        "description": "This is the total number of Git sync and connectivity errors"
      },
      "ResponseDTOGitSyncErrorCount": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitSyncErrorCount"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GitSyncError": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "repoUrl": {
            "type": "string",
            "description": "URL of the repository."
          },
          "repoId": {
            "type": "string",
            "description": "Git Sync Config Id."
          },
          "branchName": {
            "type": "string",
            "description": "Name of the branch."
          },
          "scopes": {
            "type": "array",
            "description": "List of scope of the Git Sync Error",
            "items": {
              "$ref": "#/components/schemas/Scope"
            }
          },
          "changeType": {
            "type": "string",
            "description": "Type of operation done in file",
            "enum": [
              "ADD",
              "RENAME",
              "MODIFY",
              "DELETE",
              "NONE",
              "ADD_V2",
              "UPDATE_V2"
            ]
          },
          "completeFilePath": {
            "type": "string",
            "description": "Complete File Path of the Entity"
          },
          "entityType": {
            "type": "string",
            "description": "Entity Type.",
            "enum": [
              "CreatePR",
              "MergePR",
              "Projects",
              "Pipelines",
              "PipelineSteps",
              "Http",
              "Email",
              "JiraCreate",
              "JiraUpdate",
              "JiraApproval",
              "HarnessApproval",
              "CustomApproval",
              "Barrier",
              "Queue",
              "FlagConfiguration",
              "ShellScript",
              "K8sCanaryDeploy",
              "K8sApply",
              "K8sBlueGreenDeploy",
              "K8sRollingDeploy",
              "K8sRollingRollback",
              "K8sScale",
              "K8sDelete",
              "K8sBGSwapServices",
              "K8sCanaryDelete",
              "TerraformApply",
              "TerraformPlan",
              "TerraformDestroy",
              "TerraformRollback",
              "HelmDeploy",
              "HelmRollback",
              "Connectors",
              "Secrets",
              "Files",
              "Service",
              "Environment",
              "EnvironmentGroup",
              "InputSets",
              "CvConfig",
              "Verify",
              "Delegates",
              "DelegateConfigurations",
              "CvVerificationJob",
              "IntegrationStage",
              "IntegrationSteps",
              "SecurityStage",
              "SecuritySteps",
              "CvKubernetesActivitySource",
              "DeploymentSteps",
              "DeploymentStage",
              "ApprovalStage",
              "PipelineStage",
              "FeatureFlagStage",
              "Template",
              "TemplateStage",
              "CustomDeployment",
              "Triggers",
              "MonitoredService",
              "GitRepositories",
              "FeatureFlags",
              "ServiceNowApproval",
              "ServiceNowCreate",
              "ServiceNowUpdate",
              "ServiceNowImportSet",
              "GovernancePolicies",
              "Policy",
              "Run",
              "RunTests",
              "Plugin",
              "RestoreCacheGCS",
              "RestoreCacheS3",
              "SaveCacheGCS",
              "SaveCacheS3",
              "Security",
              "AquaTrivy",
              "AWSECR",
              "Bandit",
              "BlackDuck",
              "Brakeman",
              "Burp",
              "Checkmarx",
              "Clair",
              "DataTheorem",
              "DockerContentTrust",
              "External",
              "FortifyOnDemand",
              "Grype",
              "JfrogXray",
              "Mend",
              "Metasploit",
              "Nessus",
              "NexusIQ",
              "Nikto",
              "Nmap",
              "Openvas",
              "Owasp",
              "PrismaCloud",
              "Prowler",
              "Qualys",
              "Reapsaw",
              "ShiftLeft",
              "Sniper",
              "Snyk",
              "Sonarqube",
              "Sysdig",
              "Tenable",
              "Veracode",
              "Zap",
              "GitClone",
              "ArtifactoryUpload",
              "GCSUpload",
              "S3Upload",
              "BuildAndPushGCR",
              "BuildAndPushECR",
              "BuildAndPushDockerRegistry",
              "CreateStack",
              "DeleteStack",
              "ServerlessAwsLambdaDeploy",
              "ServerlessAwsLambdaRollback",
              "CustomStage",
              "RollbackStack",
              "Infrastructure",
              "Command",
              "StrategyNode",
              "AzureSlotDeployment",
              "AzureTrafficShift",
              "FetchInstanceScript",
              "AzureSwapSlot",
              "AzureWebAppRollback",
              "JenkinsBuild",
              "EcsRollingDeploy",
              "EcsRollingRollback",
              "EcsCanaryDeploy",
              "EcsCanaryDelete",
              "AzureCreateARMResource",
              "BuildAndPushACR",
              "AzureCreateBPResource",
              "AzureARMRollback",
              "Background",
              "Wait",
              "ArtifactSource",
              "EcsBlueGreenCreateService",
              "EcsBlueGreenSwapTargetGroups",
              "EcsBlueGreenRollback",
              "ShellScriptProvision",
              "Freeze",
              "GitOpsUpdateReleaseRepo",
              "GitOpsFetchLinkedApps",
              "EcsRunTask",
              "Chaos",
              "ElastigroupDeploy",
              "ElastigroupRollback",
              "Action",
              "ElastigroupSetup",
              "Bitrise",
              "TerragruntPlan",
              "TerragruntApply",
              "TerragruntDestroy",
              "TerragruntRollback",
              "IACMStage",
              "IACMStep",
              "IACM",
              "Container",
              "IACMTerraformPlan",
              "IACMTemplate",
              "ElastigroupBGStageSetup",
              "ElastigroupSwapRoute",
              "AsgCanaryDeploy",
              "AsgCanaryDelete",
              "SwapRoutes",
              "SwapRollback",
              "AppResize",
              "AppRollback",
              "CanaryAppSetup",
              "BGAppSetup",
              "BasicAppSetup",
              "TanzuCommand",
              "AsgRollingDeploy",
              "AsgRollingRollback",
              "GovernanceRuleAWS",
              "TasRollingDeploy",
              "TasRollingRollback",
              "K8sDryRun",
              "AsgBlueGreenSwapService",
              "AsgBlueGreenDeploy",
              "AsgBlueGreenRollback"
            ]
          },
          "failureReason": {
            "type": "string",
            "description": "Error Message"
          },
          "status": {
            "type": "string",
            "description": "Status of Git Sync Error",
            "enum": [
              "ACTIVE",
              "DISCARDED",
              "EXPIRED",
              "RESOLVED",
              "OVERRIDDEN"
            ]
          },
          "errorType": {
            "type": "string",
            "description": "Type of Git Sync Error",
            "enum": [
              "GIT_TO_HARNESS",
              "CONNECTIVITY_ISSUE",
              "FULL_SYNC"
            ]
          },
          "additionalErrorDetails": {
            "$ref": "#/components/schemas/GitSyncErrorDetails"
          },
          "createdAt": {
            "type": "integer",
            "description": "Time at which the Git Sync error was logged",
            "format": "int64"
          }
        },
        "description": "This contains Git Sync Error Details"
      },
      "GitSyncErrorDetails": {
        "type": "object",
        "description": "This contains Git Sync error details specific to Error Type"
      },
      "PageResponseGitSyncError": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitSyncError"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseGitSyncError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseGitSyncError"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Scope": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          }
        }
      },
      "GitSyncErrorAggregateByCommit": {
        "type": "object",
        "properties": {
          "gitCommitId": {
            "type": "string",
            "description": "Commit Id"
          },
          "failedCount": {
            "type": "integer",
            "description": "The number of active errors in a commit",
            "format": "int32"
          },
          "repoId": {
            "type": "string",
            "description": "Git Sync Config Id."
          },
          "branchName": {
            "type": "string",
            "description": "Name of the branch."
          },
          "commitMessage": {
            "type": "string",
            "description": "Commit Message to use for the merge commit."
          },
          "createdAt": {
            "type": "integer",
            "description": "This is the time at which the Git Sync error was logged",
            "format": "int64"
          },
          "errorsForSummaryView": {
            "type": "array",
            "description": "This has the list of Git Sync errors corresponding to a specific Commit Id",
            "items": {
              "$ref": "#/components/schemas/GitSyncError"
            }
          }
        },
        "description": "This contains a list of Git Sync Error details for a given Commit Id"
      },
      "PageResponseGitSyncErrorAggregateByCommit": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitSyncErrorAggregateByCommit"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseGitSyncErrorAggregateByCommit": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseGitSyncErrorAggregateByCommit"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "LdapResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RestResponseLdapResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/LdapResponse"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "LdapGroupResponse": {
        "required": [
          "dn",
          "name"
        ],
        "type": "object",
        "properties": {
          "dn": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "totalMembers": {
            "type": "integer",
            "format": "int32"
          },
          "selectable": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LdapUserResponse"
            }
          }
        }
      },
      "LdapUserResponse": {
        "required": [
          "dn",
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "dn": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "RestResponseCollectionLdapGroupResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LdapGroupResponse"
            }
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "CDModuleLicense": {
        "type": "object",
        "description": "This contains details of the Continuous Delivery License in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          {
            "type": "object",
            "properties": {
              "cdLicenseType": {
                "type": "string",
                "enum": [
                  "SERVICES",
                  "SERVICE_INSTANCES"
                ]
              },
              "workloads": {
                "type": "integer",
                "format": "int32"
              },
              "serviceInstances": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CEModuleLicense": {
        "type": "object",
        "description": "This contains details of the Cloud Cost Management License in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          {
            "type": "object",
            "properties": {
              "spendLimit": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "CFModuleLicense": {
        "type": "object",
        "description": "This contains details of the Feature Flags License in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          {
            "type": "object",
            "properties": {
              "numberOfUsers": {
                "type": "integer",
                "format": "int32"
              },
              "numberOfClientMAUs": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "CIModuleLicense": {
        "type": "object",
        "description": "This contains details of the Continuous Integration License in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          {
            "type": "object",
            "properties": {
              "numberOfCommitters": {
                "type": "integer",
                "format": "int32"
              },
              "hostingCredits": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CVModuleLicense": {
        "type": "object",
        "description": "This contains details of the CV License in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          {
            "type": "object",
            "properties": {
              "numberOfServices": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ChaosModuleLicense": {
        "type": "object",
        "description": "This contains details of the Chaos License in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          {
            "type": "object",
            "properties": {
              "totalChaosExperimentRuns": {
                "type": "integer",
                "format": "int32"
              },
              "totalChaosInfrastructures": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ModuleLicense": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accountIdentifier": {
            "type": "string"
          },
          "moduleType": {
            "type": "string",
            "enum": [
              "CD",
              "CI",
              "CV",
              "CF",
              "CE",
              "STO",
              "CHAOS",
              "SRM",
              "CODE",
              "CORE",
              "PMS",
              "TEMPLATESERVICE",
              "GOVERNANCE",
              "IACM"
            ]
          },
          "edition": {
            "type": "string",
            "enum": [
              "COMMUNITY",
              "FREE",
              "TEAM",
              "ENTERPRISE"
            ]
          },
          "licenseType": {
            "type": "string",
            "enum": [
              "TRIAL",
              "PAID"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "DELETED",
              "EXPIRED"
            ]
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "expiryTime": {
            "type": "integer",
            "format": "int64"
          },
          "premiumSupport": {
            "type": "boolean"
          },
          "selfService": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "trialExtended": {
            "type": "boolean"
          }
        },
        "description": "This contains details of the Module License defined in Harness",
        "discriminator": {
          "propertyName": "moduleType"
        }
      },
      "ResponseDTOModuleLicense": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SRMModuleLicense": {
        "type": "object",
        "description": "This contains details of the SRM License in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          {
            "type": "object",
            "properties": {
              "numberOfServices": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "STOModuleLicense": {
        "type": "object",
        "description": "This contains details of the Security Test Orchestration License in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleLicense"
          },
          {
            "type": "object",
            "properties": {
              "numberOfDevelopers": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "StartTrial": {
        "required": [
          "edition",
          "moduleType"
        ],
        "type": "object",
        "properties": {
          "moduleType": {
            "type": "string",
            "description": "Specifies the module type.",
            "enum": [
              "CD",
              "CI",
              "CV",
              "CF",
              "CE",
              "STO",
              "CHAOS",
              "SRM",
              "CODE",
              "CORE",
              "PMS",
              "TEMPLATESERVICE",
              "GOVERNANCE",
              "IACM"
            ]
          },
          "edition": {
            "type": "string",
            "description": "Specifies the type of the edition.",
            "enum": [
              "COMMUNITY",
              "FREE",
              "TEAM",
              "ENTERPRISE"
            ]
          }
        },
        "description": "This contains details of the Start Trial object defined in Harness"
      },
      "AccountLicense": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "moduleLicenses": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ModuleLicense"
            }
          },
          "allModuleLicenses": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModuleLicense"
              }
            }
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "This contains details of the Account License defined in Harness"
      },
      "ResponseDTOAccountLicense": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/AccountLicense"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "EditionAction": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "START_FREE",
              "START_TRIAL",
              "EXTEND_TRIAL",
              "SUBSCRIBE",
              "UPGRADE",
              "CONTACT_SALES",
              "CONTACT_SUPPORT",
              "MANAGE",
              "DISABLED_BY_TEAM",
              "DISABLED_BY_ENTERPRISE"
            ]
          },
          "reason": {
            "type": "string"
          }
        },
        "description": "This contains allowed Actions and Reason under the Edition"
      },
      "ResponseDTOMapEditionSetEditionAction": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EditionAction"
              }
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOMapModuleTypeLong": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CDLicenseSummary": {
        "type": "object",
        "description": "This contains details of the Continuous Delivery License Summary in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/LicensesWithSummary"
          },
          {
            "type": "object",
            "properties": {
              "totalWorkload": {
                "type": "integer",
                "format": "int32"
              },
              "totalServiceInstances": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CELicenseSummary": {
        "type": "object",
        "description": "This contains details of the Cloud Cost Management License Summary in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/LicensesWithSummary"
          },
          {
            "type": "object",
            "properties": {
              "totalSpendLimit": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "CFLicenseSummary": {
        "type": "object",
        "description": "This contains details of the Feature Flags License Summary in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/LicensesWithSummary"
          },
          {
            "type": "object",
            "properties": {
              "totalClientMAUs": {
                "type": "integer",
                "format": "int64"
              },
              "totalFeatureFlagUnits": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CILicenseSummary": {
        "type": "object",
        "description": "This contains details of the Continuous Integration License Summary in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/LicensesWithSummary"
          },
          {
            "type": "object",
            "properties": {
              "totalDevelopers": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CVLicenseSummary": {
        "type": "object",
        "description": "This contains details of the Test Intelligence License Summary in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/LicensesWithSummary"
          },
          {
            "type": "object",
            "properties": {
              "totalServices": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "LicensesWithSummary": {
        "type": "object",
        "properties": {
          "edition": {
            "type": "string",
            "enum": [
              "COMMUNITY",
              "FREE",
              "TEAM",
              "ENTERPRISE"
            ]
          },
          "licenseType": {
            "type": "string",
            "enum": [
              "TRIAL",
              "PAID"
            ]
          },
          "moduleType": {
            "type": "string",
            "enum": [
              "CD",
              "CI",
              "CV",
              "CF",
              "CE",
              "STO",
              "CHAOS",
              "SRM",
              "CODE",
              "CORE",
              "PMS",
              "TEMPLATESERVICE",
              "GOVERNANCE",
              "IACM"
            ]
          },
          "maxExpiryTime": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "This contains details of the License With Summary defined in Harness",
        "discriminator": {
          "propertyName": "moduleType"
        }
      },
      "ResponseDTOLicensesWithSummary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/LicensesWithSummary"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "STOLicenseSummary": {
        "type": "object",
        "description": "This contains details of the Security Test Orchestration License Summary in Harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/LicensesWithSummary"
          },
          {
            "type": "object",
            "properties": {
              "totalDevelopers": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ResponseDTOListModuleLicense": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleLicense"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ReferenceDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "accountIdentifier": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ResponseDTOServiceInstanceUsageDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ServiceInstanceUsageDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceInstanceUsageDTO": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "activeServices": {
            "$ref": "#/components/schemas/UsageDataDTO"
          },
          "activeServiceInstances": {
            "$ref": "#/components/schemas/UsageDataDTO"
          },
          "cdLicenseType": {
            "type": "string",
            "enum": [
              "SERVICES",
              "SERVICE_INSTANCES"
            ]
          }
        }
      },
      "UsageDataDTO": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "displayName": {
            "type": "string"
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceDTO"
            }
          }
        }
      },
      "ResponseDTOServiceUsageDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ServiceUsageDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceUsageDTO": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "activeServices": {
            "$ref": "#/components/schemas/UsageDataDTO"
          },
          "activeServiceInstances": {
            "$ref": "#/components/schemas/UsageDataDTO"
          },
          "cdLicenseType": {
            "type": "string",
            "enum": [
              "SERVICES",
              "SERVICE_INSTANCES"
            ]
          },
          "serviceLicenses": {
            "$ref": "#/components/schemas/UsageDataDTO"
          }
        }
      },
      "LicenseUsage": {
        "required": [
          "className"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "className": {
            "type": "string"
          }
        },
        "description": "This is the view of a License Usage object defined in Harness",
        "discriminator": {
          "propertyName": "className"
        }
      },
      "ResponseDTOLicenseUsage": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/LicenseUsage"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ActiveService": {
        "required": [
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Active Service identifier."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization identifier."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project identifier."
          },
          "name": {
            "type": "string",
            "description": "Active Service name."
          },
          "orgName": {
            "type": "string",
            "description": "Organization name."
          },
          "projectName": {
            "type": "string",
            "description": "Project name."
          },
          "instanceCount": {
            "type": "integer",
            "description": "Active Service instance count.",
            "format": "int64"
          },
          "lastDeployed": {
            "type": "integer",
            "description": "Last deployed timestamp.",
            "format": "int64"
          },
          "licensesConsumed": {
            "type": "integer",
            "description": "Licenses consumed.",
            "format": "int64"
          },
          "accountIdentifier": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "This is details of the Active Service entity defined in Harness."
      },
      "PageActiveService": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/Pageable"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActiveService"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageActiveService": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageActiveService"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ActiveServicesFilterParams": {
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string",
            "description": "Organization identifier of the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project identifier of the Entity."
          },
          "serviceIdentifier": {
            "type": "string",
            "description": "Service identifier of the Entity."
          }
        },
        "description": "Active Services Filter Params"
      },
      "LDAPSettings": {
        "required": [
          "connectionSettings",
          "displayName",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "connectionSettings": {
            "$ref": "#/components/schemas/LdapConnectionSettings"
          },
          "identifier": {
            "type": "string",
            "description": "This is the LDAP setting identifier."
          },
          "userSettingsList": {
            "type": "array",
            "description": "This is the user settings list in LDAP setting.",
            "items": {
              "$ref": "#/components/schemas/LdapUserSettings"
            }
          },
          "groupSettingsList": {
            "type": "array",
            "description": "This is the group settings list in LDAP setting.",
            "items": {
              "$ref": "#/components/schemas/LdapGroupSettings"
            }
          },
          "displayName": {
            "type": "string",
            "description": "This is the LDAP setting display name."
          },
          "cronExpression": {
            "type": "string",
            "description": "This is the cron expression in LDAP Settings."
          },
          "nextIterations": {
            "type": "array",
            "description": "This is the list of iterations for next LDAP sync job.",
            "items": {
              "type": "integer",
              "description": "This is the list of iterations for next LDAP sync job.",
              "format": "int64"
            }
          },
          "disabled": {
            "type": "boolean",
            "description": "This tells if LDAP Settings is disabled or not, LDAP sync won't happen in disabled state."
          },
          "settingsType": {
            "type": "string",
            "enum": [
              "USER_PASSWORD",
              "SAML",
              "LDAP",
              "OAUTH"
            ]
          }
        },
        "description": "This has the details of LDAP Settings supported in NG."
      },
      "LdapConnectionSettings": {
        "required": [
          "host"
        ],
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "sslEnabled": {
            "type": "boolean"
          },
          "referralsEnabled": {
            "type": "boolean"
          },
          "maxReferralHops": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "bindDN": {
            "type": "string"
          },
          "bindPassword": {
            "type": "string"
          },
          "passwordType": {
            "type": "string"
          },
          "bindSecret": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "connectTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "responseTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "useRecursiveGroupMembershipSearch": {
            "type": "boolean"
          },
          "settingType": {
            "type": "string",
            "enum": [
              "HOST_CONNECTION_ATTRIBUTES",
              "BASTION_HOST_CONNECTION_ATTRIBUTES",
              "SMTP",
              "SFTP",
              "JENKINS",
              "BAMBOO",
              "STRING",
              "SPLUNK",
              "ELK",
              "LOGZ",
              "SUMO",
              "DATA_DOG",
              "APM_VERIFICATION",
              "BUG_SNAG",
              "LOG_VERIFICATION",
              "APP_DYNAMICS",
              "NEW_RELIC",
              "DYNA_TRACE",
              "INSTANA",
              "DATA_DOG_LOG",
              "CLOUD_WATCH",
              "SCALYR",
              "ELB",
              "SLACK",
              "AWS",
              "GCS",
              "GCP",
              "AZURE",
              "PCF",
              "RANCHER",
              "DIRECT",
              "KUBERNETES_CLUSTER",
              "DOCKER",
              "ECR",
              "GCR",
              "ACR",
              "PHYSICAL_DATA_CENTER",
              "KUBERNETES",
              "NEXUS",
              "ARTIFACTORY",
              "SMB",
              "AMAZON_S3",
              "GIT",
              "SSH_SESSION_CONFIG",
              "SERVICE_VARIABLE",
              "CONFIG_FILE",
              "KMS",
              "GCP_KMS",
              "JIRA",
              "SERVICENOW",
              "SECRET_TEXT",
              "YAML_GIT_SYNC",
              "VAULT",
              "VAULT_SSH",
              "AWS_SECRETS_MANAGER",
              "WINRM_CONNECTION_ATTRIBUTES",
              "WINRM_SESSION_CONFIG",
              "PROMETHEUS",
              "INFRASTRUCTURE_MAPPING",
              "HTTP_HELM_REPO",
              "AMAZON_S3_HELM_REPO",
              "GCS_HELM_REPO",
              "SPOT_INST",
              "AZURE_ARTIFACTS_PAT",
              "CUSTOM",
              "CE_AWS",
              "CE_GCP",
              "CE_AZURE",
              "AZURE_VAULT",
              "KUBERNETES_CLUSTER_NG",
              "GIT_NG",
              "SSO_SAML",
              "LDAP",
              "GCP_SECRETS_MANAGER",
              "TRIGGER",
              "OCI_HELM_REPO"
            ]
          },
          "accountId": {
            "type": "string"
          }
        },
        "description": "This is the LDAP connection setting."
      },
      "LdapGroupSettings": {
        "required": [
          "baseDN",
          "descriptionAttr",
          "nameAttr",
          "referencedUserAttr",
          "searchFilter",
          "userMembershipAttr"
        ],
        "type": "object",
        "properties": {
          "baseDN": {
            "type": "string"
          },
          "searchFilter": {
            "type": "string"
          },
          "nameAttr": {
            "type": "string"
          },
          "descriptionAttr": {
            "type": "string"
          },
          "userMembershipAttr": {
            "type": "string"
          },
          "referencedUserAttr": {
            "type": "string"
          }
        },
        "description": "This is the group settings list in LDAP setting."
      },
      "LdapUserSettings": {
        "required": [
          "baseDN",
          "displayNameAttr",
          "emailAttr",
          "groupMembershipAttr",
          "samAccountNameAttr",
          "searchFilter",
          "uidAttr"
        ],
        "type": "object",
        "properties": {
          "baseDN": {
            "type": "string"
          },
          "searchFilter": {
            "type": "string"
          },
          "uidAttr": {
            "type": "string"
          },
          "samAccountNameAttr": {
            "type": "string"
          },
          "emailAttr": {
            "type": "string"
          },
          "displayNameAttr": {
            "type": "string"
          },
          "groupMembershipAttr": {
            "type": "string"
          }
        },
        "description": "This is the user settings list in LDAP setting."
      },
      "RestResponseLDAPSettings": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/LDAPSettings"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "RestResponseBoolean": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "boolean"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "EmbeddedUser": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "externalUserId": {
            "type": "string"
          }
        }
      },
      "RestResponseSSOConfig": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/SSOConfig"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "SSOConfig": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "ssoSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SSOSettings"
            }
          },
          "authenticationMechanism": {
            "type": "string",
            "enum": [
              "USER_PASSWORD",
              "SAML",
              "LDAP",
              "OAUTH"
            ]
          }
        }
      },
      "SSOSettings": {
        "required": [
          "appId",
          "displayName",
          "lastUpdatedAt",
          "type",
          "url",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "SAML",
              "LDAP",
              "OAUTH"
            ]
          },
          "displayName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "nextIteration": {
            "type": "integer",
            "format": "int64"
          },
          "nextIterations": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "accountId": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AuthenticationSettingsResponse": {
        "type": "object",
        "properties": {
          "ngAuthSettings": {
            "type": "array",
            "description": "List of Auth Settings configured for an Account.",
            "items": {
              "$ref": "#/components/schemas/NGAuthSettings"
            }
          },
          "whitelistedDomains": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of the whitelisted domains.",
            "items": {
              "type": "string",
              "description": "List of the whitelisted domains."
            }
          },
          "authenticationMechanism": {
            "type": "string",
            "description": "Indicates if the Authentication Mechanism is SSO or NON-SSO.",
            "enum": [
              "USER_PASSWORD",
              "SAML",
              "LDAP",
              "OAUTH"
            ]
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "If Two Factor Authentication is enabled, this value is true. Otherwise, it is false."
          }
        },
        "description": "This contains information on the Authentication Settings defined in Harness."
      },
      "NGAuthSettings": {
        "type": "object",
        "properties": {
          "settingsType": {
            "type": "string",
            "enum": [
              "USER_PASSWORD",
              "SAML",
              "LDAP",
              "OAUTH"
            ]
          }
        },
        "description": "This has the details of Authentication Settings supported in NG.",
        "discriminator": {
          "propertyName": "settingsType"
        }
      },
      "RestResponseAuthenticationSettingsResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/AuthenticationSettingsResponse"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "PasswordStrengthPolicy": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "This value is true if the password strength policy is enabled. Otherwise, it is false."
          },
          "minNumberOfCharacters": {
            "type": "integer",
            "description": "Minimum number of characters required in a password.",
            "format": "int32"
          },
          "minNumberOfUppercaseCharacters": {
            "type": "integer",
            "description": "Minimum number of uppercase characters required in a password.",
            "format": "int32"
          },
          "minNumberOfLowercaseCharacters": {
            "type": "integer",
            "description": "Minimum number of lower characters required in a password.",
            "format": "int32"
          },
          "minNumberOfSpecialCharacters": {
            "type": "integer",
            "description": "Minimum number of special characters required in a password.",
            "format": "int32"
          },
          "minNumberOfDigits": {
            "type": "integer",
            "description": "Minimum number of digits required in a password.",
            "format": "int32"
          }
        },
        "description": "This has information about the password strength policy in Harness."
      },
      "RestResponsePasswordStrengthPolicy": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/PasswordStrengthPolicy"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "LoginTypeResponse": {
        "type": "object",
        "properties": {
          "authenticationMechanism": {
            "type": "string",
            "enum": [
              "USER_PASSWORD",
              "SAML",
              "LDAP",
              "OAUTH"
            ]
          },
          "SSORequest": {
            "$ref": "#/components/schemas/SSORequest"
          },
          "isOauthEnabled": {
            "type": "boolean",
            "writeOnly": true
          },
          "showCaptcha": {
            "type": "boolean"
          },
          "defaultExperience": {
            "type": "string",
            "enum": [
              "NG",
              "CG"
            ]
          },
          "oauthEnabled": {
            "type": "boolean"
          },
          "ssorequest": {
            "$ref": "#/components/schemas/SSORequest"
          }
        }
      },
      "RestResponseLoginTypeResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/LoginTypeResponse"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "SSORequest": {
        "type": "object",
        "properties": {
          "oauthProviderType": {
            "type": "string",
            "enum": [
              "AZURE",
              "BITBUCKET",
              "GITHUB",
              "GITLAB",
              "GOOGLE",
              "LINKEDIN"
            ]
          },
          "idpRedirectUrl": {
            "type": "string"
          },
          "oauthProviderTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AZURE",
                "BITBUCKET",
                "GITHUB",
                "GITLAB",
                "GOOGLE",
                "LINKEDIN"
              ]
            }
          }
        }
      },
      "TwoFactorAdminOverrideSettings": {
        "type": "object",
        "properties": {
          "adminOverrideTwoFactorEnabled": {
            "type": "boolean",
            "description": "This value is true if Admin Override for Two Factor Authentication is enabled. Otherwise, it is false."
          }
        },
        "description": "This contains the information about the Two Factor Admin Override in Harness."
      },
      "OAuthSettings": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "Filter out the available OAuth providers."
          },
          "allowedProviders": {
            "uniqueItems": true,
            "type": "array",
            "description": "This is the list of OAuth Providers that are supported.",
            "items": {
              "type": "string",
              "description": "This is the list of OAuth Providers that are supported.",
              "enum": [
                "AZURE",
                "BITBUCKET",
                "GITHUB",
                "GITLAB",
                "GOOGLE",
                "LINKEDIN"
              ]
            }
          },
          "settingsType": {
            "type": "string",
            "enum": [
              "USER_PASSWORD",
              "SAML",
              "LDAP",
              "OAUTH"
            ]
          }
        },
        "description": "This contains the information about OAuth settings defined in Harness."
      },
      "FormDataContentDisposition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "fileName": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "readDate": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AccountSettingConfig": {
        "type": "object",
        "description": "Configuration of the Account Settings."
      },
      "AccountSettingResponse": {
        "type": "object",
        "properties": {
          "accountSettings": {
            "$ref": "#/components/schemas/AccountSettings"
          },
          "createdAt": {
            "type": "integer",
            "description": "This is the time at which account setting was created.",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "This is the time at which account setting was last modified.",
            "format": "int64"
          }
        },
        "description": "This has the Account Setting details along with its metadata."
      },
      "AccountSettings": {
        "required": [
          "accountIdentifier",
          "config",
          "type"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "config": {
            "$ref": "#/components/schemas/AccountSettingConfig"
          },
          "type": {
            "type": "string",
            "description": "This is the type of resource for which Account Setting is created.",
            "enum": [
              "Connector"
            ]
          }
        },
        "description": "This is the view of Account Settings in Harness."
      },
      "ConnectorSettings": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountSettingConfig"
          },
          {
            "type": "object",
            "properties": {
              "builtInSMDisabled": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ResponseDTOAccountSettingResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/AccountSettingResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListAccountSettings": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSettings"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AgentMtlsEndpointDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "fqdn": {
            "type": "string"
          },
          "caCertificates": {
            "type": "string"
          },
          "mode": {
            "type": "string",
            "enum": [
              "LOOSE",
              "STRICT"
            ]
          }
        }
      },
      "RestResponseAgentMtlsEndpointDetails": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/AgentMtlsEndpointDetails"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "AgentMtlsEndpointRequest": {
        "type": "object",
        "properties": {
          "domainPrefix": {
            "type": "string"
          },
          "caCertificates": {
            "type": "string"
          },
          "mode": {
            "type": "string",
            "enum": [
              "LOOSE",
              "STRICT"
            ]
          }
        }
      },
      "EntityDetailProtoDTO": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "inputSetRef": {
            "$ref": "#/components/schemas/InputSetReferenceProtoDTO"
          },
          "infraDefRef": {
            "$ref": "#/components/schemas/InfraDefinitionReferenceProtoDTO"
          },
          "typeValue": {
            "type": "integer",
            "format": "int32"
          },
          "identifierRefOrBuilder": {
            "$ref": "#/components/schemas/IdentifierRefProtoDTOOrBuilder"
          },
          "inputSetRefOrBuilder": {
            "$ref": "#/components/schemas/InputSetReferenceProtoDTOOrBuilder"
          },
          "templateRefOrBuilder": {
            "$ref": "#/components/schemas/TemplateReferenceProtoDTOOrBuilder"
          },
          "infraDefRefOrBuilder": {
            "$ref": "#/components/schemas/InfraDefinitionReferenceProtoDTOOrBuilder"
          },
          "entityRefCase": {
            "type": "string",
            "enum": [
              "IDENTIFIERREF",
              "INPUTSETREF",
              "TEMPLATEREF",
              "INFRADEFREF",
              "ENTITYREF_NOT_SET"
            ]
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PROJECTS",
              "PIPELINES",
              "CONNECTORS",
              "SECRETS",
              "SERVICE",
              "ENVIRONMENT",
              "INPUT_SETS",
              "CV_CONFIG",
              "DELEGATES",
              "DELEGATE_CONFIGURATIONS",
              "CV_VERIFICATION_JOB",
              "CV_KUBERNETES_ACTIVITY_SOURCE",
              "INTEGRATION_STEPS",
              "INTEGRATION_STAGE",
              "DEPLOYMENT_STAGE",
              "DEPLOYMENT_STEPS",
              "PIPELINE_STEPS",
              "APPROVAL_STAGE",
              "TRIGGERS",
              "FEATURE_FLAG_STAGE",
              "MONITORED_SERVICE",
              "TEMPLATE",
              "GIT_REPOSITORIES",
              "FEATURE_FLAGS",
              "HTTP_STEP",
              "SHELL_SCRIPT_STEP",
              "K8S_CANARY_DEPLOY_STEP",
              "JIRA_CREATE_STEP",
              "SERVICENOW_APPROVAL_STEP",
              "JIRA_UPDATE_STEP",
              "JIRA_APPROVAL_STEP",
              "HARNESS_APPROVAL_STEP",
              "BARRIER_STEP",
              "VERIFY_STEP",
              "OPAPOLICIES",
              "POLICY_STEP",
              "ARTIFACTORY_UPLOAD",
              "GCS_UPLOAD",
              "S3_UPLOAD",
              "BUILD_AND_PUSH_GCR",
              "BUILD_AND_PUSH_ECR",
              "BUILD_AND_PUSH_DOCKER_REGISTRY",
              "RUN_STEP",
              "RUN_TEST",
              "PLUGIN",
              "RESTORE_CACHE_GCS",
              "RESTORE_CACHE_S3",
              "SAVE_CACHE_GCS",
              "SAVE_CACHE_S3",
              "FLAG_CONFIGURATION",
              "SECURITY",
              "K8S_APPLY_STEP",
              "K8S_BLUE_GREEN_DEPLOY_STEP",
              "K8S_ROLLING_DEPLOY_STEP",
              "K8S_ROLLING_ROLLBACK_STEP",
              "K8S_SCALE_STEP",
              "K8S_DELETE_STEP",
              "K8S_BG_SWAP_SERVICES_STEP",
              "K8S_CANARY_DELETE_STEP",
              "TERRAFORM_APPLY_STEP",
              "TERRAFORM_PLAN_STEP",
              "TERRAFORM_DESTROY_STEP",
              "TERRAFORM_ROLLBACK_STEP",
              "HELM_DEPLOY_STEP",
              "HELM_ROLLBACK_STEP",
              "SERVICENOW_CREATE_STEP",
              "SERVICENOW_UPDATE_STEP",
              "ENVIRONMENT_GROUP",
              "SECURITY_STAGE",
              "SECURITY_STEPS",
              "FILES",
              "SERVERLESS_AWS_LAMBDA_DEPLOY_STEP",
              "SERVERLESS_AWS_LAMBDA_ROLLBACK_STEP",
              "CUSTOM_STAGE",
              "CLOUDFORMATION_CREATE_STACK_STEP",
              "CLOUDFORMATION_DELETE_STACK_STEP",
              "CLOUDFORMATION_ROLLBACK_STACK_STEP",
              "INFRASTRUCTURE",
              "GITOPS_CREATE_PR",
              "COMMAND_STEP",
              "STRATEGY_NODE",
              "AZURE_SLOT_DEPLOYMENT_STEP",
              "AZURE_TRAFFIC_SHIFT_STEP",
              "AZURE_SWAP_SLOT_STEP",
              "AZURE_WEBAPP_ROLLBACK_STEP",
              "GITOPS_MERGE_PR",
              "QUEUE_STEP",
              "CUSTOM_APPROVAL_STEP",
              "JENKINS_BUILD",
              "TEMPLATE_STAGE",
              "EMAIL_STEP",
              "BUILD_AND_PUSH_ACR",
              "AZURE_CREATE_ARM_RESOURCE_STEP",
              "GIT_CLONE",
              "AZURE_CREATE_BP_RESOURCE_STEP",
              "AZURE_ROLLBACK_ARM_RESOURCE_STEP",
              "BACKGROUND_STEP",
              "ECS_ROLLING_DEPLOY_STEP",
              "ECS_ROLLING_ROLLBACK_STEP",
              "ECS_CANARY_DEPLOY_STEP",
              "ECS_CANARY_DELETE_STEP",
              "TEMPLATE_CUSTOM_DEPLOYMENT",
              "WAIT_STEP",
              "ARTIFACT_SOURCE_TEMPLATE",
              "ECS_BLUE_GREEN_CREATE_SERVICE_STEP",
              "ECS_BLUE_GREEN_SWAP_TARGET_GROUPS_STEP",
              "ECS_BLUE_GREEN_ROLLBACK_STEP",
              "FETCH_INSTANCE_SCRIPT_STEP",
              "PIPELINE_STAGE",
              "SHELL_SCRIPT_PROVISION_STEP",
              "SERVICENOW_IMPORT_SET_STEP",
              "GITOPS_UPDATE_RELEASE_REPO",
              "FREEZE",
              "ECS_RUN_TASK_STEP",
              "CHAOS_STEP",
              "ELASTIGROUP_DEPLOY_STEP",
              "ELASTIGROUP_ROLLBACK_STEP",
              "ACTION_STEP",
              "AWS_ECR",
              "BANDIT",
              "BLACKDUCK",
              "BRAKEMAN",
              "BURP",
              "CHECKMARX",
              "CLAIR",
              "DATA_THEOREM",
              "DOCKER_CONTENT_TRUST",
              "EXTERNAL",
              "FORTIFY_ON_DEMAND",
              "GRYPE",
              "JFROG_XRAY",
              "MEND",
              "METASPLOIT",
              "NESSUS",
              "NEXUS_IQ",
              "NIKTO",
              "NMAP",
              "OPENVAS",
              "OWASP",
              "PRISMA_CLOUD",
              "PROWLER",
              "QUALYS",
              "REAPSAW",
              "SHIFT_LEFT",
              "SNIPER",
              "SNYK",
              "SONARQUBE",
              "SYSDIG",
              "TENABLE",
              "VERACODE",
              "ZAP",
              "AQUA_TRIVY",
              "ELASTIGROUP_SETUP_STEP",
              "BITRISE_STEP",
              "GITOPS_FETCH_LINKED_APPS",
              "TERRAGRUNT_PLAN_STEP",
              "TERRAGRUNT_APPLY_STEP",
              "TERRAGRUNT_DESTROY_STEP",
              "TERRAGRUNT_ROLLBACK_STEP",
              "IACM",
              "IACM_STAGE",
              "IACM_STEPS",
              "CONTAINER_STEP",
              "ASG_CANARY_DEPLOY_STEP",
              "ELASTIGROUP_BG_STAGE_SETUP_STEP",
              "ELASTIGROUP_SWAP_ROUTE_STEP",
              "ASG_CANARY_DELETE_STEP",
              "TAS_CANARY_APP_SETUP_STEP",
              "TAS_BG_APP_SETUP_STEP",
              "TAS_BASIC_APP_SETUP_STEP",
              "TANZU_COMMAND_STEP",
              "IACM_TERRAFORM_PLAN",
              "TAS_APP_RESIZE_STEP",
              "TAS_ROLLBACK_STEP",
              "TAS_SWAP_ROUTES_STEP",
              "TAS_SWAP_ROLLBACK_STEP",
              "ASG_ROLLING_DEPLOY_STEP",
              "ASG_ROLLING_ROLLBACK_STEP",
              "IACM_TEMPLATE",
              "CCM_GOVERNANCE_RULE_AWS",
              "TAS_ROLLING_DEPLOY",
              "TAS_ROLLING_ROLLBACK",
              "K8S_DRY_RUN_MANIFEST_STEP",
              "ASG_BLUE_GREEN_SWAP_SERVICE_STEP",
              "ASG_BLUE_GREEN_DEPLOY_STEP",
              "ASG_BLUE_GREEN_ROLLBACK_STEP",
              "UNRECOGNIZED"
            ]
          },
          "initialized": {
            "type": "boolean"
          },
          "templateRef": {
            "$ref": "#/components/schemas/TemplateReferenceProtoDTO"
          },
          "identifierRef": {
            "$ref": "#/components/schemas/IdentifierRefProtoDTO"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/EntityDetailProtoDTO"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserEntityDetailProtoDTO"
          },
          "nameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "IdentifierRefProtoDTO": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "scope": {
            "type": "string",
            "enum": [
              "ACCOUNT",
              "ORG",
              "PROJECT",
              "UNKNOWN",
              "UNRECOGNIZED"
            ]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadataMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadataCount": {
            "type": "integer",
            "format": "int32"
          },
          "orgIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "projectIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "accountIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "scopeValue": {
            "type": "integer",
            "format": "int32"
          },
          "identifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "initialized": {
            "type": "boolean"
          },
          "accountIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "orgIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/IdentifierRefProtoDTO"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserIdentifierRefProtoDTO"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "IdentifierRefProtoDTOOrBuilder": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "enum": [
              "ACCOUNT",
              "ORG",
              "PROJECT",
              "UNKNOWN",
              "UNRECOGNIZED"
            ]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadataMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadataCount": {
            "type": "integer",
            "format": "int32"
          },
          "orgIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "projectIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "accountIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "scopeValue": {
            "type": "integer",
            "format": "int32"
          },
          "identifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "accountIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "orgIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "InfraDefinitionReferenceProtoDTO": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "orgIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "projectIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "accountIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "envIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "envNameOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "initialized": {
            "type": "boolean"
          },
          "envName": {
            "$ref": "#/components/schemas/StringValue"
          },
          "envIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "accountIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "orgIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/InfraDefinitionReferenceProtoDTO"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserInfraDefinitionReferenceProtoDTO"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "InfraDefinitionReferenceProtoDTOOrBuilder": {
        "type": "object",
        "properties": {
          "orgIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "projectIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "accountIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "envIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "envNameOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "envName": {
            "$ref": "#/components/schemas/StringValue"
          },
          "envIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "accountIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "orgIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "InputSetReferenceProtoDTO": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "orgIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "projectIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "accountIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "pipelineIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "pipelineIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "identifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "initialized": {
            "type": "boolean"
          },
          "accountIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "orgIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/InputSetReferenceProtoDTO"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserInputSetReferenceProtoDTO"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "InputSetReferenceProtoDTOOrBuilder": {
        "type": "object",
        "properties": {
          "orgIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "projectIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "accountIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "pipelineIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "pipelineIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "identifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "accountIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "orgIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ParserEntityDetailProtoDTO": {
        "type": "object"
      },
      "ParserIdentifierRefProtoDTO": {
        "type": "object"
      },
      "ParserInfraDefinitionReferenceProtoDTO": {
        "type": "object"
      },
      "ParserInputSetReferenceProtoDTO": {
        "type": "object"
      },
      "ParserStringValue": {
        "type": "object"
      },
      "ParserTemplateReferenceProtoDTO": {
        "type": "object"
      },
      "ResponseDTOListEntityDetailProtoDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityDetailProtoDTO"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "StringValue": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "value": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/StringValue"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserStringValue"
          },
          "valueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "StringValueOrBuilder": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "valueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "TemplateReferenceProtoDTO": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "scope": {
            "type": "string",
            "enum": [
              "ACCOUNT",
              "ORG",
              "PROJECT",
              "UNKNOWN",
              "UNRECOGNIZED"
            ]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadataMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadataCount": {
            "type": "integer",
            "format": "int32"
          },
          "orgIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "projectIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "accountIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "scopeValue": {
            "type": "integer",
            "format": "int32"
          },
          "versionLabelOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "initialized": {
            "type": "boolean"
          },
          "versionLabel": {
            "$ref": "#/components/schemas/StringValue"
          },
          "accountIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "orgIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/TemplateReferenceProtoDTO"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserTemplateReferenceProtoDTO"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "TemplateReferenceProtoDTOOrBuilder": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "enum": [
              "ACCOUNT",
              "ORG",
              "PROJECT",
              "UNKNOWN",
              "UNRECOGNIZED"
            ]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadataMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadataCount": {
            "type": "integer",
            "format": "int32"
          },
          "orgIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "projectIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "accountIdentifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifierOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "scopeValue": {
            "type": "integer",
            "format": "int32"
          },
          "versionLabelOrBuilder": {
            "$ref": "#/components/schemas/StringValueOrBuilder"
          },
          "identifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "versionLabel": {
            "$ref": "#/components/schemas/StringValue"
          },
          "accountIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "orgIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "projectIdentifier": {
            "$ref": "#/components/schemas/StringValue"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "CustomDeploymentYamlRequestDTO": {
        "required": [
          "entityYaml"
        ],
        "type": "object",
        "properties": {
          "entityYaml": {
            "type": "string"
          }
        }
      },
      "CustomDeploymentVariableProperties": {
        "required": [
          "fqn",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "fqn": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "localName": {
            "type": "string"
          },
          "aliasFqn": {
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "CustomDeploymentVariableResponseDTO": {
        "required": [
          "metadataMap",
          "yaml"
        ],
        "type": "object",
        "properties": {
          "yaml": {
            "type": "string"
          },
          "metadataMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomDeploymentVariableProperties"
            }
          }
        }
      },
      "ResponseDTOCustomDeploymentVariableResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CustomDeploymentVariableResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CustomDeploymentRefreshYamlDTO": {
        "required": [
          "refreshedYaml"
        ],
        "type": "object",
        "properties": {
          "refreshedYaml": {
            "type": "string"
          }
        }
      },
      "ResponseDTOCustomDeploymentRefreshYamlDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CustomDeploymentRefreshYamlDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CustomDeploymentYamlDTO": {
        "required": [
          "yaml"
        ],
        "type": "object",
        "properties": {
          "yaml": {
            "type": "string"
          }
        }
      },
      "CustomDeploymentInfraResponseDTO": {
        "required": [
          "obsolete"
        ],
        "type": "object",
        "properties": {
          "obsolete": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOCustomDeploymentInfraResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CustomDeploymentInfraResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "DelegateDownloadRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "size": {
            "type": "string",
            "enum": [
              "LAPTOP",
              "SMALL",
              "MEDIUM",
              "LARGE"
            ]
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tokenName": {
            "type": "string"
          },
          "clusterPermissionType": {
            "type": "string",
            "enum": [
              "CLUSTER_ADMIN",
              "CLUSTER_VIEWER",
              "NAMESPACE_ADMIN"
            ]
          },
          "customClusterNamespace": {
            "type": "string"
          }
        }
      },
      "DelegateGroupDTO": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RestResponseDelegateGroupDTO": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/DelegateGroupDTO"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "DelegateGroupTags": {
        "type": "object",
        "properties": {
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RestResponseListDelegateGroupDTO": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegateGroupDTO"
            }
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "DelegateDeleteResponse": {
        "type": "object",
        "properties": {
          "responseMsg": {
            "type": "string"
          }
        }
      },
      "RestResponseDelegateDeleteResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/DelegateDeleteResponse"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "DelegateSetupDetails": {
        "required": [
          "delegateType",
          "name"
        ],
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "size": {
            "type": "string",
            "enum": [
              "LAPTOP",
              "SMALL",
              "MEDIUM",
              "LARGE"
            ]
          },
          "hostName": {
            "type": "string"
          },
          "delegateConfigurationId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "k8sConfigDetails": {
            "$ref": "#/components/schemas/K8sConfigDetails"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "delegateType": {
            "type": "string"
          },
          "tokenName": {
            "type": "string"
          },
          "runAsRoot": {
            "type": "boolean"
          }
        }
      },
      "K8sConfigDetails": {
        "type": "object",
        "properties": {
          "k8sPermissionType": {
            "type": "string",
            "enum": [
              "CLUSTER_ADMIN",
              "CLUSTER_VIEWER",
              "NAMESPACE_ADMIN"
            ]
          },
          "namespace": {
            "type": "string"
          }
        }
      },
      "DelegateTokenDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "createdByNgUser": {
            "$ref": "#/components/schemas/Principal"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "REVOKED"
            ]
          },
          "value": {
            "type": "string"
          },
          "ownerIdentifier": {
            "type": "string"
          }
        }
      },
      "Principal": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "SERVICE",
              "API_KEY",
              "SERVICE_ACCOUNT"
            ]
          },
          "name": {
            "type": "string"
          },
          "jwtclaims": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RestResponseDelegateTokenDetails": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/DelegateTokenDetails"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "RestResponseListDelegateTokenDetails": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegateTokenDetails"
            }
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "DelegateConnectionDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "lastHeartbeat": {
            "type": "integer",
            "format": "int64"
          },
          "lastGrpcHeartbeat": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DelegateGroupDetails": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "delegateGroupIdentifier": {
            "type": "string"
          },
          "delegateType": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "delegateDescription": {
            "type": "string"
          },
          "delegateConfigurationId": {
            "type": "string"
          },
          "groupImplicitSelectors": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "PROFILE_NAME",
                "DELEGATE_NAME",
                "HOST_NAME",
                "GROUP_NAME",
                "GROUP_SELECTORS",
                "PROFILE_SELECTORS"
              ]
            }
          },
          "groupCustomSelectors": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lastHeartBeat": {
            "type": "integer",
            "format": "int64"
          },
          "connectivityStatus": {
            "type": "string"
          },
          "activelyConnected": {
            "type": "boolean"
          },
          "grpcActive": {
            "type": "boolean"
          },
          "delegateInstanceDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegateInner"
            }
          },
          "tokenActive": {
            "type": "boolean"
          },
          "autoUpgrade": {
            "type": "string",
            "enum": [
              "ON",
              "OFF",
              "SYNCHRONIZING"
            ]
          },
          "delegateGroupExpirationTime": {
            "type": "integer",
            "format": "int64"
          },
          "delegateVersion": {
            "type": "string"
          },
          "upgraderLastUpdated": {
            "type": "integer",
            "format": "int64"
          },
          "immutable": {
            "type": "boolean"
          },
          "groupVersion": {
            "type": "string"
          }
        }
      },
      "DelegateGroupListing": {
        "type": "object",
        "properties": {
          "delegateGroupDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegateGroupDetails"
            }
          }
        }
      },
      "DelegateInner": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "lastHeartbeat": {
            "type": "integer",
            "format": "int64"
          },
          "activelyConnected": {
            "type": "boolean"
          },
          "hostName": {
            "type": "string"
          },
          "tokenActive": {
            "type": "boolean"
          },
          "version": {
            "type": "string"
          },
          "delegateExpirationTime": {
            "type": "integer",
            "format": "int64"
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegateConnectionDetails"
            }
          }
        }
      },
      "RestResponseDelegateGroupListing": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/DelegateGroupListing"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "ResponseDTOEnvironmentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/EnvironmentResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "EnvironmentRequest": {
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the Environment."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          },
          "name": {
            "type": "string",
            "description": "Name of the Environment."
          },
          "description": {
            "type": "string",
            "description": "Description of the entity"
          },
          "color": {
            "type": "string",
            "description": "Color of the Environment."
          },
          "type": {
            "type": "string",
            "description": "Specify the environment type whether production or Preproduction. ",
            "enum": [
              "PreProduction",
              "Production"
            ]
          },
          "yaml": {
            "type": "string",
            "description": "Yaml of this entity."
          }
        },
        "description": "This is the Environment entity defined in Harness"
      },
      "ResponseDTOListEnvironmentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseEnvironmentResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseEnvironmentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseEnvironmentResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseServiceOverrideResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceOverrideResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseServiceOverrideResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseServiceOverrideResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceOverrideResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "environmentRef": {
            "type": "string"
          },
          "serviceRef": {
            "type": "string"
          },
          "yaml": {
            "type": "string"
          }
        },
        "description": "This is the Service Override Response entity defined in Harness"
      },
      "ResponseDTOServiceOverrideResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ServiceOverrideResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceOverrideRequest": {
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "environmentIdentifier": {
            "type": "string",
            "description": "Environment Identifier for the Entity."
          },
          "serviceIdentifier": {
            "type": "string",
            "description": "Service Identifier for the Entity."
          },
          "yaml": {
            "type": "string",
            "description": "Yaml for the Service Override entity"
          }
        },
        "description": "This is the Service Override Request entity defined in Harness"
      },
      "InfrastructureResponse": {
        "type": "object",
        "properties": {
          "infrastructure": {
            "$ref": "#/components/schemas/InfrastructureResponseDTO"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InfrastructureResponseDTO": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "environmentRef": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "KubernetesDirect",
              "KubernetesGcp",
              "KubernetesAzure",
              "Pdc",
              "SshWinRmAzure",
              "ServerlessAwsLambda",
              "AzureWebApp",
              "SshWinRmAws",
              "CustomDeployment",
              "ECS",
              "Elastigroup",
              "TAS",
              "Asg"
            ]
          },
          "deploymentType": {
            "type": "string",
            "enum": [
              "Kubernetes",
              "NativeHelm",
              "Ssh",
              "WinRm",
              "ServerlessAwsLambda",
              "AzureWebApp",
              "CustomDeployment",
              "ECS",
              "Elastigroup",
              "TAS",
              "Asg",
              "GoogleCloudFunctions"
            ]
          },
          "yaml": {
            "type": "string"
          }
        },
        "description": "This is the InfrastructureResponseDTO entity defined in Harness"
      },
      "ResponseDTOInfrastructureResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/InfrastructureResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "InfrastructureRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "identifier of the infrastructure"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "organisation identifier of the infrastructure"
          },
          "projectIdentifier": {
            "type": "string",
            "description": "project identifier of the infrastructure"
          },
          "environmentRef": {
            "type": "string",
            "description": "environment reference of the infrastructure"
          },
          "name": {
            "type": "string",
            "description": "name of the infrastructure"
          },
          "description": {
            "type": "string",
            "description": "description of the infrastructure"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "tags associated with the infrastructure"
            },
            "description": "tags associated with the infrastructure"
          },
          "type": {
            "type": "string",
            "description": "type of the infrastructure",
            "enum": [
              "KubernetesDirect",
              "KubernetesGcp",
              "KubernetesAzure",
              "Pdc",
              "SshWinRmAzure",
              "ServerlessAwsLambda",
              "AzureWebApp",
              "SshWinRmAws",
              "CustomDeployment",
              "ECS",
              "Elastigroup",
              "TAS",
              "Asg"
            ]
          },
          "yaml": {
            "type": "string",
            "description": "yaml spec of the infrastructure"
          }
        },
        "description": "This is the InfrastructureRequest entity defined in Harness"
      },
      "PageResponseInfrastructureResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfrastructureResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseInfrastructureResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseInfrastructureResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Invite": {
        "required": [
          "encryptionType",
          "identifier",
          "spec"
        ],
        "type": "object",
        "properties": {
          "encryptionType": {
            "type": "string",
            "description": "This specifies the type of encryption used by the Secret Manager to encrypt Secrets.",
            "enum": [
              "LOCAL",
              "KMS",
              "GCP_KMS",
              "AWS_SECRETS_MANAGER",
              "AZURE_VAULT",
              "VAULT",
              "GCP_SECRETS_MANAGER",
              "CUSTOM",
              "VAULT_SSH",
              "CUSTOM_NG"
            ]
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the SecretManager metadata."
          },
          "spec": {
            "$ref": "#/components/schemas/SecretManagerMetadataRequestSpecDTO"
          }
        },
        "description": "This is the view of the SecretManagerMetadataRequest entity defined in Harness"
      },
      "ResponseDTOOptionalInvite": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Invite"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RoleBinding": {
        "type": "object",
        "properties": {
          "roleIdentifier": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          },
          "resourceGroupIdentifier": {
            "type": "string"
          },
          "resourceGroupName": {
            "type": "string"
          },
          "managedRole": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOInvite": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Invite"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseInvite": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invite"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseInvite": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseInvite"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ACLAggregateFilter": {
        "type": "object",
        "properties": {
          "resourceGroupIdentifiers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleIdentifiers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiKey": {
        "required": [
          "accountIdentifier",
          "identifier",
          "name",
          "parentIdentifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the API Key"
          },
          "name": {
            "type": "string",
            "description": "Name of the API Key"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Description of the API Key"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags for the API Key"
            },
            "description": "Tags for the API Key"
          },
          "apiKeyType": {
            "type": "string",
            "description": "Type of the API Key",
            "enum": [
              "USER",
              "SERVICE_ACCOUNT"
            ]
          },
          "parentIdentifier": {
            "type": "string",
            "description": "Parent Entity Identifier of the API Key"
          },
          "defaultTimeToExpireToken": {
            "type": "integer",
            "description": "Default expiration time of the Token within API Key.",
            "format": "int64"
          },
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          }
        },
        "description": "This has API Key details defined in Harness."
      },
      "ResponseDTOApiKey": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ApiKey"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ApiKeyAggregate": {
        "required": [
          "apiKey",
          "createdAt",
          "lastModifiedAt"
        ],
        "type": "object",
        "properties": {
          "apiKey": {
            "$ref": "#/components/schemas/ApiKey"
          },
          "createdAt": {
            "type": "integer",
            "description": "This is the time at which API Key was created.",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "This is the time at which API Key was last modified.",
            "format": "int64"
          },
          "tokensCount": {
            "type": "integer",
            "description": "The number of tokens within an API Key.",
            "format": "int32"
          }
        },
        "description": "This has API Key details and metadata."
      },
      "ResponseDTOApiKeyAggregate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ApiKeyAggregate"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseApiKeyAggregate": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKeyAggregate"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseApiKeyAggregate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseApiKeyAggregate"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListApiKey": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "HostValidationDTO": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Hostname"
          },
          "status": {
            "type": "string",
            "description": "This has the validation status for a host.",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "error": {
            "$ref": "#/components/schemas/ErrorDetail"
          }
        },
        "description": "This has validation details for the host"
      },
      "ResponseDTOListHostValidationDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostValidationDTO"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "HostValidationParams": {
        "required": [
          "hosts"
        ],
        "type": "object",
        "properties": {
          "hosts": {
            "type": "array",
            "description": "Hosts to be validated",
            "items": {
              "type": "string",
              "description": "Hosts to be validated"
            }
          },
          "tags": {
            "type": "array",
            "description": "Delegate tags (optional)",
            "items": {
              "type": "string",
              "description": "Delegate tags (optional)"
            }
          }
        },
        "description": "Host validation parameters, including host names and delegate tags."
      },
      "PageResponseHostDTO": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostDTO"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseHostDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseHostDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "HostFilterDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "All",
              "HostNames",
              "HostAttributes"
            ]
          },
          "filter": {
            "type": "string"
          }
        }
      },
      "ResponseDTOSecretManagerMetadataDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SecretManagerMetadataDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SecretManagerMetadataDTO": {
        "type": "object",
        "properties": {
          "encryptionType": {
            "type": "string",
            "enum": [
              "LOCAL",
              "KMS",
              "GCP_KMS",
              "AWS_SECRETS_MANAGER",
              "AZURE_VAULT",
              "VAULT",
              "GCP_SECRETS_MANAGER",
              "CUSTOM",
              "VAULT_SSH",
              "CUSTOM_NG"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/SecretManagerMetadataSpecDTO"
          }
        }
      },
      "SecretManagerMetadataSpecDTO": {
        "required": [
          "encryptionType"
        ],
        "type": "object",
        "properties": {
          "encryptionType": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "encryptionType"
        }
      },
      "SecretManagerMetadataRequestSpecDTO": {
        "required": [
          "encryptionType"
        ],
        "type": "object",
        "properties": {
          "encryptionType": {
            "type": "string"
          }
        },
        "description": "Spec of the Secret Manager.",
        "discriminator": {
          "propertyName": "encryptionType"
        }
      },
      "AdditionalMetadata": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Additional metadata for the secret"
      },
      "BaseSSHSpec": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "This is the SSH specification details as defined in Harness.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "BaseWinRmSpec": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "This is the WinRm specification details as defined in Harness.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "KerberosConfigDTO": {
        "required": [
          "principal",
          "realm"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSSHSpec"
          },
          {
            "type": "object",
            "properties": {
              "principal": {
                "type": "string",
                "description": "This is the authorization role, the user/service has in the realm."
              },
              "realm": {
                "type": "string",
                "description": "Name of the Realm."
              },
              "tgtGenerationMethod": {
                "type": "string",
                "enum": [
                  "KeyTabFilePath",
                  "Password"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/TGTGenerationSpecDTO"
              }
            }
          }
        ]
      },
      "KerberosWinRmConfigDTO": {
        "required": [
          "principal",
          "realm"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseWinRmSpec"
          },
          {
            "type": "object",
            "properties": {
              "principal": {
                "type": "string",
                "description": "This is the authorization role, the user/service has in the realm."
              },
              "realm": {
                "type": "string",
                "description": "Name of the Realm."
              },
              "tgtGenerationMethod": {
                "type": "string",
                "enum": [
                  "KeyTabFilePath",
                  "Password"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/TGTGenerationSpecDTO"
              },
              "useSSL": {
                "type": "boolean",
                "description": "This is the Kerberos either to use SSL/https ."
              },
              "skipCertChecks": {
                "type": "boolean",
                "description": "This is the Kerberos either to skip certificate checks ."
              },
              "useNoProfile": {
                "type": "boolean",
                "description": "This is the Kerberos powershell runs without loading profile ."
              }
            }
          }
        ]
      },
      "NTLMConfig": {
        "required": [
          "domain",
          "password",
          "username"
        ],
        "type": "object",
        "description": "This is the NTLM configuration details defined in Harness.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseWinRmSpec"
          },
          {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "This is the NTLM domain name."
              },
              "username": {
                "type": "string",
                "description": "This is the NTLM user name."
              },
              "useSSL": {
                "type": "boolean",
                "description": "This is the NTLM either to use SSL/https ."
              },
              "skipCertChecks": {
                "type": "boolean",
                "description": "This is the NTLM either to skip certificate checks ."
              },
              "useNoProfile": {
                "type": "boolean",
                "description": "This is the NTLM powershell runs without loading profile ."
              },
              "password": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ResponseDTOSecretResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SecretResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SSHAuth": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "spec": {
            "$ref": "#/components/schemas/BaseSSHSpec"
          },
          "type": {
            "type": "string",
            "description": "Specifies authentication scheme, SSH or Kerberos",
            "enum": [
              "SSH",
              "Kerberos"
            ]
          }
        },
        "description": "This is the SSH Authentication specification defined in Harness."
      },
      "SSHConfig": {
        "required": [
          "credentialType",
          "spec"
        ],
        "type": "object",
        "description": "This is the SSH configuration details defined in Harness.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSSHSpec"
          },
          {
            "type": "object",
            "properties": {
              "credentialType": {
                "type": "string",
                "description": "This specifies SSH credential type as Password, KeyPath or KeyReference",
                "enum": [
                  "Password",
                  "KeyPath",
                  "KeyReference"
                ]
              },
              "spec": {
                "$ref": "#/components/schemas/SSHCredentialSpec"
              }
            }
          }
        ]
      },
      "SSHCredentialSpec": {
        "required": [
          "credentialType"
        ],
        "type": "object",
        "properties": {
          "credentialType": {
            "type": "string"
          }
        },
        "description": "This is the SSH credential specification defined in Harness.",
        "discriminator": {
          "propertyName": "credentialType"
        }
      },
      "SSHKeyPathCredential": {
        "required": [
          "keyPath",
          "userName"
        ],
        "type": "object",
        "description": "This is SSH KeyPath credential specification as defined in harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/SSHCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "userName": {
                "type": "string",
                "description": "SSH Username."
              },
              "keyPath": {
                "type": "string",
                "description": "Path of the key file."
              },
              "encryptedPassphrase": {
                "type": "string",
                "description": "This is the passphrase provided while creating the SSH key for local encryption."
              }
            }
          }
        ]
      },
      "SSHKeyReferenceCredentialDTO": {
        "required": [
          "key",
          "userName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SSHCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "userName": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "encryptedPassphrase": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SSHKeySpec": {
        "required": [
          "auth"
        ],
        "type": "object",
        "description": "This is the SSH key authentication details defined in Harness.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SecretSpec"
          },
          {
            "type": "object",
            "properties": {
              "port": {
                "type": "integer",
                "description": "SSH port",
                "format": "int32"
              },
              "auth": {
                "$ref": "#/components/schemas/SSHAuth"
              }
            }
          }
        ]
      },
      "SSHPasswordCredentialDTO": {
        "required": [
          "password",
          "userName"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SSHCredentialSpec"
          },
          {
            "type": "object",
            "properties": {
              "userName": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Secret": {
        "required": [
          "identifier",
          "name",
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This specifies the type of secret",
            "enum": [
              "SecretFile",
              "SecretText",
              "SSHKey",
              "WinRmCredentials"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the Secret"
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the Secret"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          },
          "description": {
            "type": "string",
            "description": "Description of the Secret"
          },
          "spec": {
            "$ref": "#/components/schemas/SecretSpec"
          }
        },
        "description": "This is details of the secret entity defined in Harness."
      },
      "SecretFileSpec": {
        "required": [
          "secretManagerIdentifier"
        ],
        "type": "object",
        "description": "This has details of Secret File defined in harness",
        "allOf": [
          {
            "$ref": "#/components/schemas/SecretSpec"
          },
          {
            "type": "object",
            "properties": {
              "secretManagerIdentifier": {
                "type": "string",
                "description": "Identifier of the Secret Manager used to manage the secret."
              },
              "additionalMetadata": {
                "$ref": "#/components/schemas/AdditionalMetadata"
              }
            }
          }
        ]
      },
      "SecretResponse": {
        "required": [
          "secret"
        ],
        "type": "object",
        "properties": {
          "secret": {
            "$ref": "#/components/schemas/Secret"
          },
          "createdAt": {
            "type": "integer",
            "description": "This is the time at which the Secret was created.",
            "format": "int64"
          },
          "updatedAt": {
            "type": "integer",
            "description": "This is the time at which the Secret was last updated.",
            "format": "int64"
          },
          "draft": {
            "type": "boolean"
          },
          "governanceMetadata": {
            "$ref": "#/components/schemas/GovernanceMetadata"
          }
        },
        "description": "This has details of the Secret along with its metadata."
      },
      "SecretSpec": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "errorMessageForInvalidYaml": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "This has details of the Secret defined in Harness.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SecretTextSpec": {
        "required": [
          "secretManagerIdentifier",
          "valueType"
        ],
        "type": "object",
        "description": "This has details of encrypted text secret.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SecretSpec"
          },
          {
            "type": "object",
            "properties": {
              "secretManagerIdentifier": {
                "type": "string",
                "description": "Identifier of the Secret Manager used to manage the secret."
              },
              "valueType": {
                "type": "string",
                "description": "This has details to specify if the secret value is inline or referenced.",
                "enum": [
                  "Inline",
                  "Reference",
                  "CustomSecretManagerValues"
                ]
              },
              "value": {
                "type": "string",
                "description": "Value of the Secret"
              },
              "additionalMetadata": {
                "$ref": "#/components/schemas/AdditionalMetadata"
              }
            }
          }
        ]
      },
      "TGTGenerationSpecDTO": {
        "required": [
          "tgtGenerationMethod"
        ],
        "type": "object",
        "properties": {
          "tgtGenerationMethod": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "tgtGenerationMethod"
        }
      },
      "TGTKeyTabFilePathSpecDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TGTGenerationSpecDTO"
          },
          {
            "type": "object",
            "properties": {
              "keyPath": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TGTPasswordSpecDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TGTGenerationSpecDTO"
          },
          {
            "type": "object",
            "properties": {
              "password": {
                "type": "string"
              }
            }
          }
        ]
      },
      "WinRmAuth": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "spec": {
            "$ref": "#/components/schemas/BaseWinRmSpec"
          },
          "type": {
            "type": "string",
            "description": "Specifies authentication scheme, NTLM or Kerberos",
            "enum": [
              "NTLM",
              "Kerberos"
            ]
          }
        },
        "description": "This is the WinRm Authentication specification defined in Harness."
      },
      "WinRmCredentialsSpec": {
        "required": [
          "auth"
        ],
        "type": "object",
        "description": "This is the WinRm authentication details defined in Harness.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SecretSpec"
          },
          {
            "type": "object",
            "properties": {
              "port": {
                "type": "integer",
                "description": "WinRm port",
                "format": "int32"
              },
              "auth": {
                "$ref": "#/components/schemas/WinRmAuth"
              }
            }
          }
        ]
      },
      "SecretRequestWrapper": {
        "required": [
          "secret"
        ],
        "type": "object",
        "properties": {
          "secret": {
            "$ref": "#/components/schemas/Secret"
          }
        }
      },
      "PageResponseSecretResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseSecretResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseSecretResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SecretResourceFilter": {
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "array",
            "description": "This is the list of Entity Identifiers on which the filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of Entity Identifiers on which the filter will be applied."
            }
          },
          "searchTerm": {
            "type": "string",
            "description": "Text to search/filter the Entity."
          },
          "secretTypes": {
            "type": "array",
            "description": "This is the list of the ENTITY types on which the filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of the ENTITY types on which the filter will be applied.",
              "enum": [
                "SecretFile",
                "SecretText",
                "SSHKey",
                "WinRmCredentials"
              ]
            }
          },
          "sourceCategory": {
            "type": "string",
            "description": "Specifies the connector category.",
            "enum": [
              "CLOUD_PROVIDER",
              "SECRET_MANAGER",
              "CLOUD_COST",
              "ARTIFACTORY",
              "CODE_REPO",
              "MONITORING",
              "TICKETING"
            ]
          },
          "includeSecretsFromEverySubScope": {
            "type": "boolean",
            "description": "This is true if secrets are filtered at each subsequent scope."
          },
          "includeAllSecretsAccessibleAtScope": {
            "type": "boolean",
            "description": "This is true if secrets are filtered from all super scopes."
          }
        },
        "description": "This has the filter information for the Secret in Harness."
      },
      "ResponseDTOSecretValidationResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SecretValidationResult"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SecretValidationResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "This has the validation status for a secret. It is Success, if validation is successful, else the status is Failed."
          },
          "message": {
            "type": "string",
            "description": "This is the error message when validation for secret fails."
          }
        },
        "description": "This has validation details for the Secret defined in Harness."
      },
      "SecretValidationMetaData": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SecretFile",
              "SecretText",
              "SSHKey",
              "WinRmCredentials"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the Organization"
          },
          "name": {
            "type": "string",
            "description": "Name of the Organization"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Description of the Organization."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags for the Organization."
            },
            "description": "Tags for the Organization."
          }
        },
        "description": "This has details of the Organization as defined in Harness."
      },
      "OrganizationResponse": {
        "required": [
          "organization"
        ],
        "type": "object",
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "createdAt": {
            "type": "integer",
            "description": "This is the time at which Organization was created.",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "This is the time at which Organization was last modified.",
            "format": "int64"
          },
          "harnessManaged": {
            "type": "boolean",
            "description": "This indicates if this Organization is managed by Harness or not. If True, Harness can manage and modify this Organization."
          }
        },
        "description": "This has details of the Organization along with its metadata in Harness."
      },
      "ResponseDTOOrganizationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/OrganizationResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "OrganizationRequest": {
        "required": [
          "organization"
        ],
        "type": "object",
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "description": "This contains details of the Organization."
      },
      "PageResponseOrganizationResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseOrganizationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseOrganizationResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "name": {
            "type": "string",
            "description": "Project Name for the entity"
          },
          "color": {
            "type": "string",
            "description": "Color"
          },
          "modules": {
            "maxItems": 1024,
            "minItems": 0,
            "type": "array",
            "description": "List of modules",
            "items": {
              "type": "string",
              "description": "List of modules",
              "enum": [
                "CD",
                "CI",
                "CV",
                "CF",
                "CE",
                "STO",
                "CHAOS",
                "SRM",
                "CODE",
                "CORE",
                "PMS",
                "TEMPLATESERVICE",
                "GOVERNANCE",
                "IACM"
              ]
            }
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Description"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          }
        },
        "description": "This is the Project Entity details defined in Harness"
      },
      "ProjectResponse": {
        "required": [
          "project"
        ],
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "createdAt": {
            "type": "integer",
            "description": "This specifies the time at which project was created.",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "This specifies the time at which project was last modified.",
            "format": "int64"
          }
        },
        "description": "This has Project details along with its metadata as defined in Harness ."
      },
      "ResponseDTOProjectResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ProjectResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ProjectRequest": {
        "required": [
          "project"
        ],
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/Project"
          }
        }
      },
      "PageResponseProjectResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseProjectResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseProjectResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Token": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the Token"
          },
          "name": {
            "type": "string",
            "description": "Name of the Token"
          },
          "validFrom": {
            "type": "integer",
            "description": "This is the time from which the Token is valid. The time is in milliseconds.",
            "format": "int64"
          },
          "validTo": {
            "type": "integer",
            "description": "This is the time till which the Token is valid. The time is in milliseconds.",
            "format": "int64"
          },
          "scheduledExpireTime": {
            "type": "integer",
            "description": "Scheduled expiry time in milliseconds.",
            "format": "int64"
          },
          "valid": {
            "type": "boolean",
            "description": "Boolean value to indicate if Token is valid or not."
          },
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "apiKeyIdentifier": {
            "type": "string",
            "description": "This is the API Key Id within which the Token is created."
          },
          "parentIdentifier": {
            "type": "string",
            "description": "This is the ID of the Parent entity from which the Token inherits its role bindings."
          },
          "apiKeyType": {
            "type": "string",
            "description": "Type of the API Key",
            "enum": [
              "USER",
              "SERVICE_ACCOUNT"
            ]
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Description of the Token"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags for the Token"
            },
            "description": "Tags for the Token"
          },
          "email": {
            "type": "string",
            "description": "Email Id of the user who created the Token."
          },
          "username": {
            "type": "string",
            "description": "Name of the user who created the Token."
          },
          "encodedPassword": {
            "type": "string",
            "description": "This is the encoded password of the Token."
          }
        },
        "description": "This has the API Key Token details defined in Harness."
      },
      "PageResponseTokenAggregate": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenAggregate"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseTokenAggregate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseTokenAggregate"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TokenAggregate": {
        "required": [
          "createdAt",
          "expiryAt",
          "lastModifiedAt",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "expiryAt": {
            "type": "integer",
            "description": "Expiry time of the Token.",
            "format": "int64"
          },
          "createdAt": {
            "type": "integer",
            "description": "This is the time at which Token was created.",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "This is the time at which Token was last modified.",
            "format": "int64"
          }
        },
        "description": "This has token details and metadata."
      },
      "ResponseDTOToken": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Token"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "EmailConfigDTO": {
        "required": [
          "groupEmail",
          "sendEmailToAllUsers"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationSettingConfigDTO"
          },
          {
            "type": "object",
            "properties": {
              "groupEmail": {
                "type": "string"
              },
              "sendEmailToAllUsers": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "MicrosoftTeamsConfigDTO": {
        "required": [
          "microsoftTeamsWebhookUrl"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationSettingConfigDTO"
          },
          {
            "type": "object",
            "properties": {
              "microsoftTeamsWebhookUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "NotificationSettingConfigDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EMAIL",
              "SLACK",
              "PAGERDUTY",
              "MSTEAMS"
            ]
          }
        },
        "description": "List of notification settings.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "PagerDutyConfigDTO": {
        "required": [
          "pagerDutyKey"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationSettingConfigDTO"
          },
          {
            "type": "object",
            "properties": {
              "pagerDutyKey": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ResponseDTOUserGroup": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/UserGroup"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SlackConfigDTO": {
        "required": [
          "slackWebhookUrl"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationSettingConfigDTO"
          },
          {
            "type": "object",
            "properties": {
              "slackWebhookUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "UserGroup": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the UserGroup."
          },
          "name": {
            "type": "string",
            "description": "Name of the UserGroup."
          },
          "users": {
            "type": "array",
            "description": "List of users in the UserGroup.",
            "items": {
              "type": "string",
              "description": "List of users in the UserGroup."
            }
          },
          "notificationConfigs": {
            "type": "array",
            "description": "List of notification settings.",
            "items": {
              "$ref": "#/components/schemas/NotificationSettingConfigDTO"
            }
          },
          "isSsoLinked": {
            "type": "boolean",
            "writeOnly": true
          },
          "linkedSsoId": {
            "type": "string",
            "description": "Identifier of the linked SSO."
          },
          "linkedSsoDisplayName": {
            "type": "string",
            "description": "Name of the linked SSO."
          },
          "ssoGroupId": {
            "type": "string",
            "description": "Identifier of the userGroup in SSO."
          },
          "ssoGroupName": {
            "type": "string",
            "description": "Name of the SSO userGroup."
          },
          "linkedSsoType": {
            "type": "string",
            "description": "Type of linked SSO"
          },
          "externallyManaged": {
            "type": "boolean",
            "description": "Specifies whether or not the userGroup is externally managed."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Description of the entity"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          },
          "harnessManaged": {
            "type": "boolean",
            "description": "Specifies whether or not the userGroup is managed by harness."
          },
          "ssoLinked": {
            "type": "boolean"
          }
        },
        "description": "User Group details defined in Harness."
      },
      "ResponseDTOListScopeName": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeName"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ScopeName": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          }
        }
      },
      "PageResponseUserMetadata": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMetadata"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseUserMetadata": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseUserMetadata"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "UserMetadata": {
        "required": [
          "disabled",
          "email",
          "externallyManaged",
          "locked",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "externallyManaged": {
            "type": "boolean"
          }
        },
        "description": "This is the view of the UserMetadata entity defined in Harness"
      },
      "UserFilter": {
        "type": "object",
        "properties": {
          "searchTerm": {
            "type": "string",
            "description": "This string will be used to filter the results. Details of all the users having this string in their name or email address will be filtered."
          },
          "identifiers": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter by User Identifiers",
            "items": {
              "type": "string",
              "description": "Filter by User Identifiers"
            }
          },
          "emails": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter by User Emails",
            "items": {
              "type": "string",
              "description": "Filter by User Emails"
            }
          },
          "parentFilter": {
            "type": "string",
            "enum": [
              "NO_PARENT_SCOPES",
              "INCLUDE_PARENT_SCOPES",
              "STRICTLY_PARENT_SCOPES"
            ]
          }
        }
      },
      "NotificationSettingConfig": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EMAIL",
              "SLACK",
              "PAGERDUTY",
              "MSTEAMS"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RestResponseUserGroup": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/UserGroup"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "LdapLinkGroupRequest": {
        "required": [
          "ldapGroupDN",
          "ldapGroupName"
        ],
        "type": "object",
        "properties": {
          "ldapGroupDN": {
            "type": "string"
          },
          "ldapGroupName": {
            "type": "string"
          }
        }
      },
      "SamlLinkGroupRequest": {
        "required": [
          "samlGroupName"
        ],
        "type": "object",
        "properties": {
          "samlGroupName": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListUserGroup": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "UserGroupFilter": {
        "required": [
          "accountIdentifier"
        ],
        "type": "object",
        "properties": {
          "databaseIdFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter by the internal database ids of user group",
            "items": {
              "type": "string",
              "description": "Filter by the internal database ids of user group"
            }
          },
          "identifierFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter by the user group identifier",
            "items": {
              "type": "string",
              "description": "Filter by the user group identifier"
            }
          },
          "userIdentifierFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter by the users present in the user group",
            "items": {
              "type": "string",
              "description": "Filter by the users present in the user group"
            }
          },
          "accountIdentifier": {
            "type": "string",
            "description": "Filter by account using account identifier"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Filter by organization using account identifier"
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Filter by project using account identifier"
          },
          "searchTerm": {
            "type": "string",
            "description": "Filter by search term matching entities by name/identifier"
          },
          "filterType": {
            "type": "string",
            "description": "Filter by user group filterType",
            "enum": [
              "INCLUDE_INHERITED_GROUPS",
              "EXCLUDE_INHERITED_GROUPS"
            ]
          }
        },
        "description": "This is the view of the UserGroupFilter entity defined in Harness"
      },
      "PageResponseUserGroup": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseUserGroup": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseUserGroup"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOUserGroupResponseV2": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/UserGroupResponseV2"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "UserGroupResponseV2": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the UserGroup."
          },
          "name": {
            "type": "string",
            "description": "Name of the UserGroup."
          },
          "users": {
            "type": "array",
            "description": "List of users emails in the UserGroup.",
            "items": {
              "$ref": "#/components/schemas/UserInfo"
            }
          },
          "notificationConfigs": {
            "type": "array",
            "description": "List of notification settings.",
            "items": {
              "$ref": "#/components/schemas/NotificationSettingConfigDTO"
            }
          },
          "isSsoLinked": {
            "type": "boolean",
            "writeOnly": true
          },
          "linkedSsoId": {
            "type": "string",
            "description": "Identifier of the linked SSO."
          },
          "linkedSsoDisplayName": {
            "type": "string",
            "description": "Name of the linked SSO."
          },
          "ssoGroupId": {
            "type": "string",
            "description": "Identifier of the userGroup in SSO."
          },
          "ssoGroupName": {
            "type": "string",
            "description": "Name of the SSO userGroup."
          },
          "linkedSsoType": {
            "type": "string",
            "description": "Type of linked SSO"
          },
          "externallyManaged": {
            "type": "boolean",
            "description": "Specifies whether or not the userGroup is externally managed."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Description of the entity"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          },
          "harnessManaged": {
            "type": "boolean",
            "description": "Specifies whether or not the userGroup is managed by harness."
          },
          "ssoLinked": {
            "type": "boolean"
          }
        },
        "description": "User Group details defined in Harness."
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "defaultAccountId": {
            "type": "string"
          },
          "intent": {
            "type": "string"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GatewayAccountRequest"
            }
          },
          "admin": {
            "type": "boolean"
          },
          "twoFactorAuthenticationEnabled": {
            "type": "boolean"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "locked": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "signupAction": {
            "type": "string"
          },
          "edition": {
            "type": "string"
          },
          "billingFrequency": {
            "type": "string"
          },
          "utmInfo": {
            "$ref": "#/components/schemas/UtmInfo"
          },
          "externallyManaged": {
            "type": "boolean"
          }
        }
      },
      "UserGroupRequestV2": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the UserGroup."
          },
          "name": {
            "type": "string",
            "description": "Name of the UserGroup."
          },
          "users": {
            "type": "array",
            "description": "List of users emails in the UserGroup.",
            "items": {
              "type": "string",
              "description": "List of users emails in the UserGroup."
            }
          },
          "notificationConfigs": {
            "type": "array",
            "description": "List of notification settings.",
            "items": {
              "$ref": "#/components/schemas/NotificationSettingConfigDTO"
            }
          },
          "isSsoLinked": {
            "type": "boolean",
            "writeOnly": true
          },
          "linkedSsoId": {
            "type": "string",
            "description": "Identifier of the linked SSO."
          },
          "linkedSsoDisplayName": {
            "type": "string",
            "description": "Name of the linked SSO."
          },
          "ssoGroupId": {
            "type": "string",
            "description": "Identifier of the userGroup in SSO."
          },
          "ssoGroupName": {
            "type": "string",
            "description": "Name of the SSO userGroup."
          },
          "linkedSsoType": {
            "type": "string",
            "description": "Type of linked SSO"
          },
          "externallyManaged": {
            "type": "boolean",
            "description": "Specifies whether or not the userGroup is externally managed."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Description of the entity"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          },
          "harnessManaged": {
            "type": "boolean",
            "description": "Specifies whether or not the userGroup is managed by harness."
          },
          "ssoLinked": {
            "type": "boolean"
          }
        },
        "description": "User Group details defined in Harness."
      },
      "ResponseDTOServiceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ServiceResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceResponse": {
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/ServiceResponseDetails"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ServiceResponseDetails": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "yaml": {
            "type": "string"
          }
        },
        "description": "This is the Service entity defined in Harness"
      },
      "ServiceRequest": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the Service Request."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Request."
          },
          "description": {
            "type": "string",
            "description": "Description of the entity"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          },
          "yaml": {
            "type": "string",
            "description": "YAML for the Service Request"
          }
        },
        "description": "Service Request details defined in Harness."
      },
      "PageResponseServiceResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseServiceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseServiceResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOSetK8sCommandFlagType": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Apply"
              ]
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListServiceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceResponse"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "NgSmtp": {
        "required": [
          "accountId",
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Identifier of the SMTP config."
          },
          "accountId": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the SMTP config."
          },
          "value": {
            "$ref": "#/components/schemas/SmtpConfig"
          }
        },
        "description": "This is the view of the NgSmtp entity defined in Harness"
      },
      "ResponseDTONgSmtp": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/NgSmtp"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SmtpConfig": {
        "required": [
          "host",
          "port"
        ],
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "This is the host of the SMTP server."
          },
          "port": {
            "type": "integer",
            "description": "This is the port of the SMTP server.",
            "format": "int32"
          },
          "fromAddress": {
            "type": "string",
            "description": "From address of the email that needs to be send."
          },
          "useSSL": {
            "type": "boolean",
            "description": "Specify whether or not to use SSL certificate."
          },
          "startTLS": {
            "type": "boolean",
            "description": "Specify whether or not to use TLS."
          },
          "username": {
            "type": "string",
            "description": "Username credential to authenticate with SMTP server."
          },
          "password": {
            "type": "array",
            "description": "Password credential to authenticate with SMTP server.",
            "items": {
              "type": "string",
              "description": "Password credential to authenticate with SMTP server."
            }
          }
        },
        "description": "This has the SMTP configuration details defined in Harness."
      },
      "ResponseDTOValidationResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ValidationResult"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ValidationResult": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "AddUsersResponse": {
        "type": "object",
        "properties": {
          "addUserResponseMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "USER_INVITED_SUCCESSFULLY",
                "USER_ADDED_SUCCESSFULLY",
                "USER_ALREADY_ADDED",
                "USER_ALREADY_INVITED",
                "USER_INVITE_NOT_REQUIRED",
                "FAIL"
              ]
            }
          }
        }
      },
      "ResponseDTOAddUsersResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/AddUsersResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AddUsersDTO": {
        "required": [
          "emails"
        ],
        "type": "object",
        "properties": {
          "emails": {
            "maxItems": 100,
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleBindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleBinding"
            }
          },
          "userGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseDTOPasswordChangeResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "PASSWORD_CHANGED",
              "INCORRECT_CURRENT_PASSWORD",
              "PASSWORD_STRENGTH_VIOLATED"
            ]
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PasswordChange": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "This is the current password."
          },
          "newPassword": {
            "type": "string",
            "description": "This is the new password."
          }
        },
        "description": "This is the view of the PasswordChange entity defined in Harness"
      },
      "GatewayAccountRequest": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "accountName": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "defaultExperience": {
            "type": "string",
            "enum": [
              "NG",
              "CG"
            ]
          },
          "createdFromNG": {
            "type": "boolean"
          },
          "isNextGenEnabled": {
            "type": "boolean",
            "writeOnly": true
          },
          "nextGenEnabled": {
            "type": "boolean"
          }
        },
        "description": "Returns Gateway account request details like uuid, account name, company name, default experience, whether or not created from NextGen and whether NextGen is enabled or not."
      },
      "ResponseDTOUserInfo": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "UtmInfo": {
        "type": "object",
        "properties": {
          "utmSource": {
            "type": "string"
          },
          "utmContent": {
            "type": "string"
          },
          "utmMedium": {
            "type": "string"
          },
          "utmTerm": {
            "type": "string"
          },
          "utmCampaign": {
            "type": "string"
          }
        }
      },
      "ResponseDTOUserAggregate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/UserAggregate"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RoleAssignmentMetadata": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "roleIdentifier": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          },
          "resourceGroupIdentifier": {
            "type": "string"
          },
          "resourceGroupName": {
            "type": "string"
          },
          "managedRole": {
            "type": "boolean"
          },
          "managedRoleAssignment": {
            "type": "boolean"
          }
        },
        "description": "This has information of Role like name, id, resource group name, etc."
      },
      "UserAggregate": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserMetadata"
          },
          "roleAssignmentMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignmentMetadata"
            }
          }
        },
        "description": "Returns User's metadata and Role Assignments metadata"
      },
      "PageResponseUserAggregate": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAggregate"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseUserAggregate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseUserAggregate"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOTwoFactorAuthSettingsInfo": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TwoFactorAuthSettingsInfo"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TwoFactorAuthSettingsInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "twoFactorAuthenticationEnabled": {
            "type": "boolean"
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "TOTP"
            ]
          },
          "totpSecretKey": {
            "type": "string"
          },
          "totpqrurl": {
            "type": "string"
          }
        }
      },
      "ResponseDTOVariableResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/VariableResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "StringVariableConfigDTO": {
        "required": [
          "valueType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/VariableConfigDTO"
          },
          {
            "type": "object",
            "properties": {
              "fixedValue": {
                "type": "string",
                "description": "Fixed Value of the Variable."
              },
              "defaultValue": {
                "type": "string",
                "description": "Default Value of the Variable."
              },
              "allowedValues": {
                "uniqueItems": true,
                "type": "array",
                "description": "Set of Values allowed for the Variable.",
                "items": {
                  "type": "string",
                  "description": "Set of Values allowed for the Variable."
                }
              },
              "regex": {
                "type": "string"
              }
            }
          }
        ]
      },
      "VariableConfigDTO": {
        "required": [
          "valueType"
        ],
        "type": "object",
        "properties": {
          "valueType": {
            "type": "string",
            "description": "Type of Value of the Variable.",
            "enum": [
              "FIXED"
            ]
          },
          "value": {
            "type": "object"
          }
        }
      },
      "VariableDTO": {
        "required": [
          "identifier",
          "name",
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the Variable."
          },
          "name": {
            "type": "string",
            "description": "Name of the Variable."
          },
          "description": {
            "type": "string",
            "description": "Description of the entity"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "type": {
            "type": "string",
            "description": "Type of the Variable.",
            "enum": [
              "String"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/VariableConfigDTO"
          }
        }
      },
      "VariableResponseDTO": {
        "required": [
          "variable"
        ],
        "type": "object",
        "properties": {
          "variable": {
            "$ref": "#/components/schemas/VariableDTO"
          },
          "createdAt": {
            "type": "integer",
            "description": "Time when the Variable was first created.",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "Time when the Variable was last modified.",
            "format": "int64"
          }
        }
      },
      "VariableRequestDTO": {
        "type": "object",
        "properties": {
          "variable": {
            "$ref": "#/components/schemas/VariableDTO"
          }
        }
      },
      "PageResponseVariableResponseDTO": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariableResponseDTO"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseVariableResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseVariableResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "FreezeResponse": {
        "required": [
          "accountId",
          "identifier",
          "name",
          "yaml"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GLOBAL",
              "MANUAL"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "windows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreezeWindow"
            }
          },
          "identifier": {
            "type": "string"
          },
          "yaml": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "freezeScope": {
            "type": "string",
            "enum": [
              "account",
              "org",
              "project",
              "unknown"
            ]
          }
        },
        "description": "This contains details of the Freeze Response"
      },
      "FreezeWindow": {
        "required": [
          "startTime",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "timeZone": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "recurrence": {
            "$ref": "#/components/schemas/Recurrence"
          }
        }
      },
      "Recurrence": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "spec": {
            "$ref": "#/components/schemas/RecurrenceSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Yearly"
            ]
          }
        }
      },
      "RecurrenceSpec": {
        "required": [
          "until"
        ],
        "type": "object",
        "properties": {
          "until": {
            "type": "string"
          }
        }
      },
      "ResponseDTOFreezeResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FreezeResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "FreezeErrorResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "FreezeResponseWrapperDTO": {
        "type": "object",
        "properties": {
          "noOfSuccess": {
            "type": "integer",
            "format": "int32"
          },
          "noOfFailed": {
            "type": "integer",
            "format": "int32"
          },
          "successfulFreezeResponseDTOList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreezeResponse"
            }
          },
          "freezeErrorResponseDTOList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreezeErrorResponseDTO"
            }
          }
        }
      },
      "ResponseDTOFreezeResponseWrapperDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FreezeResponseWrapperDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CurrentOrUpcomingWindow": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FreezeDetailedResponse": {
        "required": [
          "accountId",
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GLOBAL",
              "MANUAL"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "windows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreezeWindow"
            }
          },
          "currentOrUpcomingWindow": {
            "$ref": "#/components/schemas/CurrentOrUpcomingWindow"
          },
          "identifier": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "freezeScope": {
            "type": "string",
            "enum": [
              "account",
              "org",
              "project",
              "unknown"
            ]
          },
          "yaml": {
            "type": "string"
          }
        },
        "description": "This contains detailed information of the Freeze Config"
      },
      "ResponseDTOFreezeDetailedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/FreezeDetailedResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "FreezeSummaryResponse": {
        "required": [
          "accountId",
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GLOBAL",
              "MANUAL"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "windows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreezeWindow"
            }
          },
          "currentOrUpcomingWindow": {
            "$ref": "#/components/schemas/CurrentOrUpcomingWindow"
          },
          "identifier": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "freezeScope": {
            "type": "string",
            "enum": [
              "account",
              "org",
              "project",
              "unknown"
            ]
          },
          "yaml": {
            "type": "string"
          }
        },
        "description": "This contains summary of the Freeze Response"
      },
      "PageResponseFreezeSummaryResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreezeSummaryResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseFreezeSummaryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseFreezeSummaryResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "FreezeFilterPropertiesDTO": {
        "type": "object",
        "properties": {
          "freezeIdentifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "freezeStatus": {
            "type": "string",
            "enum": [
              "Enabled",
              "Disabled"
            ]
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "searchTerm": {
            "type": "string"
          }
        }
      },
      "ClusterResponse": {
        "required": [
          "envRef"
        ],
        "type": "object",
        "properties": {
          "clusterRef": {
            "type": "string",
            "description": "identifier of the gitops cluster"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "organization identifier of the cluster"
          },
          "projectIdentifier": {
            "type": "string",
            "description": "project identifier of the cluster"
          },
          "agentIdentifier": {
            "type": "string",
            "description": "agent identifier of the cluster"
          },
          "accountIdentifier": {
            "type": "string",
            "description": "account identifier of the cluster"
          },
          "envRef": {
            "type": "string",
            "description": "environment identifier of the cluster"
          },
          "linkedAt": {
            "type": "integer",
            "description": "time at which the cluster was linked",
            "format": "int64"
          },
          "scope": {
            "type": "string",
            "description": "scope at which the cluster exists in harness gitops, project vs org vs account",
            "enum": [
              "ACCOUNT",
              "ORGANIZATION",
              "PROJECT"
            ]
          },
          "name": {
            "type": "string",
            "description": "name of the gitops cluster"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "name of the gitops cluster"
            },
            "description": "name of the gitops cluster"
          }
        },
        "description": "This is the ClusterRequest entity defined in Harness"
      },
      "ResponseDTOClusterResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ClusterResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ClusterRequest": {
        "required": [
          "envRef"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "identifier of the cluster"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "organization identifier of the cluster"
          },
          "agentIdentifier": {
            "type": "string",
            "description": "agent identifier of the cluster"
          },
          "projectIdentifier": {
            "type": "string",
            "description": "project identifier of the cluster"
          },
          "envRef": {
            "type": "string",
            "description": "environment identifier of the cluster"
          },
          "scope": {
            "type": "string",
            "description": "scope at which the cluster exists in harness gitops, project vs org vs account",
            "enum": [
              "ACCOUNT",
              "ORGANIZATION",
              "PROJECT"
            ]
          }
        },
        "description": "This is the ClusterRequest entity defined in Harness"
      },
      "ClusterBatchResponse": {
        "type": "object",
        "properties": {
          "linked": {
            "type": "integer",
            "description": "number of clusters linked",
            "format": "int64"
          },
          "unlinked": {
            "type": "integer",
            "description": "number of clusters unlinked",
            "format": "int64"
          }
        },
        "description": "This is the Cluster Batch Response defined in Harness"
      },
      "ResponseDTOClusterBatchResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ClusterBatchResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ClusterBasicDTO": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "identifier of the cluster"
          },
          "agentIdentifier": {
            "type": "string",
            "description": "agent identifier of the cluster"
          },
          "name": {
            "type": "string",
            "description": "name of the cluster"
          },
          "scope": {
            "type": "string",
            "description": "scope at which the cluster exists in harness gitops, project vs org vs account",
            "enum": [
              "ACCOUNT",
              "ORGANIZATION",
              "PROJECT"
            ]
          }
        },
        "description": "list of cluster identifiers and names"
      },
      "ClusterBatchRequest": {
        "required": [
          "envRef"
        ],
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string",
            "description": "organization identifier of the cluster"
          },
          "projectIdentifier": {
            "type": "string",
            "description": "project identifier of the cluster"
          },
          "envRef": {
            "type": "string",
            "description": "environment identifier of the cluster"
          },
          "linkAllClusters": {
            "type": "boolean",
            "description": "link all clusters"
          },
          "unlinkAllClusters": {
            "type": "boolean",
            "description": "unlink all clusters"
          },
          "searchTerm": {
            "type": "string",
            "description": "search term if applicable. only valid if linking all clusters"
          },
          "clusters": {
            "type": "array",
            "description": "list of cluster identifiers and names",
            "items": {
              "$ref": "#/components/schemas/ClusterBasicDTO"
            }
          }
        },
        "description": "This is the ClusterBatchRequest entity defined in Harness"
      },
      "PageResponseClusterResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseClusterResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseClusterResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOServiceAccount": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ServiceAccount"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceAccount": {
        "required": [
          "accountIdentifier",
          "email",
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the Service Account."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Account."
          },
          "email": {
            "type": "string",
            "description": "Email of the Service Account."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "Description of the Service Account."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags of the Service Account."
            },
            "description": "Tags of the Service Account."
          },
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          }
        },
        "description": "This has the details of Service Account in Harness."
      },
      "ResponseDTOServiceAccountAggregate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ServiceAccountAggregate"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceAccountAggregate": {
        "required": [
          "createdAt",
          "lastModifiedAt",
          "serviceAccount"
        ],
        "type": "object",
        "properties": {
          "serviceAccount": {
            "$ref": "#/components/schemas/ServiceAccount"
          },
          "createdAt": {
            "type": "integer",
            "description": "This is the time at which Service Account was created.",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "This is the time at which Service Account was last modified.",
            "format": "int64"
          },
          "tokensCount": {
            "type": "integer",
            "description": "This is the total number of tokens in a Service Account.",
            "format": "int32"
          },
          "roleAssignmentsMetadataDTO": {
            "type": "array",
            "description": "This is the list of Role Assignments for the Service Account.",
            "items": {
              "$ref": "#/components/schemas/RoleAssignmentMetadata"
            }
          }
        },
        "description": "This contains the Service Account details and its metadata."
      },
      "PageResponseServiceAccountAggregate": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAccountAggregate"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseServiceAccountAggregate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseServiceAccountAggregate"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListServiceAccount": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAccount"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListSourceCodeManager": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceCodeManager"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SourceCodeManager": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Source Code Manager Identifier"
          },
          "userIdentifier": {
            "type": "string",
            "description": "Id of the User"
          },
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "name": {
            "type": "string",
            "description": "Name of Source Code Manager"
          },
          "createdAt": {
            "type": "integer",
            "description": "Time at which this Source Code Manager was created",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "Time at which this Source Code Manager was last Updated",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "Type of SCM",
            "enum": [
              "BITBUCKET",
              "GITHUB",
              "GITLAB",
              "AWS_CODE_COMMIT",
              "AZURE_REPO"
            ]
          },
          "authentication": {
            "$ref": "#/components/schemas/SourceCodeManagerAuthentication"
          }
        },
        "description": "This contains details of Source Code Manager",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SourceCodeManagerAuthentication": {
        "type": "object",
        "description": "Authentication Details of Source Code Manager"
      },
      "ResponseDTOSourceCodeManager": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SourceCodeManager"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOSettingValueResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SettingValueResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SettingValueResponseDTO": {
        "required": [
          "value",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "valueType": {
            "type": "string",
            "description": "Type of Value of the Setting.",
            "enum": [
              "String",
              "Boolean",
              "Number"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value of the setting"
          }
        }
      },
      "ResponseDTOListSettingResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingResponseDTO"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SettingDTO": {
        "required": [
          "allowOverrides",
          "allowedScopes",
          "category",
          "groupIdentifier",
          "identifier",
          "isSettingEditable",
          "name",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the Setting."
          },
          "name": {
            "type": "string",
            "description": "Name of the Setting."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "category": {
            "type": "string",
            "description": "Category of the Setting.",
            "enum": [
              "CD",
              "CI",
              "CE",
              "CV",
              "CF",
              "STO",
              "CORE",
              "PMS",
              "TEMPLATESERVICE",
              "GOVERNANCE",
              "CHAOS",
              "SCIM",
              "GIT_EXPERIENCE",
              "CONNECTORS"
            ]
          },
          "groupIdentifier": {
            "type": "string",
            "description": "Group Id of the setting"
          },
          "valueType": {
            "type": "string",
            "description": "Type of Value of the Setting.",
            "enum": [
              "String",
              "Boolean",
              "Number"
            ]
          },
          "allowedValues": {
            "uniqueItems": true,
            "type": "array",
            "description": "Set of Values allowed for the Setting.",
            "items": {
              "type": "string",
              "description": "Set of Values allowed for the Setting."
            }
          },
          "allowOverrides": {
            "type": "boolean",
            "description": "Allow override of the Setting in sub-scopes."
          },
          "value": {
            "type": "string",
            "description": "Value of the setting"
          },
          "defaultValue": {
            "type": "string",
            "description": "Default Value of the Setting."
          },
          "settingSource": {
            "type": "string",
            "description": "Source of the setting value",
            "enum": [
              "ACCOUNT",
              "ORG",
              "PROJECT",
              "DEFAULT"
            ]
          },
          "isSettingEditable": {
            "type": "boolean",
            "description": "Is the setting editable at the current scope"
          },
          "allowedScopes": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of scopes where the setting is available",
            "items": {
              "type": "string",
              "description": "List of scopes where the setting is available",
              "enum": [
                "ACCOUNT",
                "ORGANIZATION",
                "PROJECT"
              ]
            }
          }
        }
      },
      "SettingResponseDTO": {
        "required": [
          "setting"
        ],
        "type": "object",
        "properties": {
          "setting": {
            "$ref": "#/components/schemas/SettingDTO"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "Time when the Setting was last modified.",
            "format": "int64"
          }
        }
      },
      "ResponseDTOListSettingUpdateResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingUpdateResponseDTO"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SettingUpdateResponseDTO": {
        "required": [
          "identifier",
          "setting"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the Setting."
          },
          "setting": {
            "$ref": "#/components/schemas/SettingDTO"
          },
          "lastModifiedAt": {
            "type": "integer",
            "description": "Time when the Setting was last modified.",
            "format": "int64"
          },
          "updateStatus": {
            "type": "boolean",
            "description": "Request status for the corresponding item in batch request"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "SettingRequestDTO": {
        "required": [
          "allowOverrides",
          "identifier",
          "updateType"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Identifier of the Setting."
          },
          "value": {
            "type": "string",
            "description": "Value of the setting"
          },
          "allowOverrides": {
            "type": "boolean",
            "description": "Allow override of the Setting in sub-scopes."
          },
          "updateType": {
            "type": "string",
            "description": "Type of the update operation. When update type is RESTORE, field [value] is ignored",
            "enum": [
              "UPDATE",
              "RESTORE"
            ]
          }
        }
      },
      "PipelineFailure": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "description": "This is Failure entity as defied in Harness"
      },
      "PipelineError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "detailedMessage": {
            "type": "string"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineResponseMessage"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/ErrorMetadata"
          }
        },
        "description": "This is Error entity as defined in Harness"
      },
      "PipelineResponseMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "INFO",
              "ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "exception": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "moduleVersion": {
                      "type": "string"
                    },
                    "methodName": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": {
                      "type": "string"
                    },
                    "nativeMethod": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "suppressed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "stackTrace": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "classLoaderName": {
                            "type": "string"
                          },
                          "moduleName": {
                            "type": "string"
                          },
                          "moduleVersion": {
                            "type": "string"
                          },
                          "methodName": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "lineNumber": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "className": {
                            "type": "string"
                          },
                          "nativeMethod": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "localizedMessage": {
                      "type": "string"
                    }
                  }
                }
              },
              "localizedMessage": {
                "type": "string"
              }
            }
          },
          "failureTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXPIRED",
                "DELEGATE_PROVISIONING",
                "CONNECTIVITY",
                "AUTHENTICATION",
                "VERIFICATION_FAILURE",
                "APPLICATION_ERROR",
                "AUTHORIZATION_ERROR",
                "TIMEOUT_ERROR",
                "POLICY_EVALUATION_FAILURE",
                "INPUT_TIMEOUT_FAILURE",
                "APPROVAL_REJECTION",
                "DELEGATE_RESTART"
              ]
            }
          }
        }
      },
      "NGTriggerResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Webhook",
              "Artifact",
              "Manifest",
              "Scheduled"
            ]
          },
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "targetIdentifier": {
            "type": "string"
          },
          "yaml": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "errorResponse": {
            "type": "boolean"
          }
        },
        "description": "This contains the trigger details"
      },
      "ResponseDTONGTriggerResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/NGTriggerResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "BuildDetails": {
        "type": "object",
        "properties": {
          "buildType": {
            "type": "string"
          }
        }
      },
      "LastTriggerExecutionDetails": {
        "type": "object",
        "properties": {
          "lastExecutionTime": {
            "type": "integer",
            "format": "int64"
          },
          "lastExecutionSuccessful": {
            "type": "boolean"
          },
          "lastExecutionStatus": {
            "type": "string"
          },
          "planExecutionId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "NGTriggerDetailsResponseDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Webhook",
              "Artifact",
              "Manifest",
              "Scheduled"
            ]
          },
          "triggerStatus": {
            "$ref": "#/components/schemas/TriggerStatus"
          },
          "lastTriggerExecutionDetails": {
            "$ref": "#/components/schemas/LastTriggerExecutionDetails"
          },
          "webhookDetails": {
            "$ref": "#/components/schemas/WebhookDetails"
          },
          "buildDetails": {
            "$ref": "#/components/schemas/BuildDetails"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "executions": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "yaml": {
            "type": "string"
          },
          "webhookUrl": {
            "type": "string"
          },
          "webhookCurlCommand": {
            "type": "string"
          },
          "registrationStatus": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED",
              "ERROR",
              "TIMEOUT",
              "UNAVAILABLE"
            ]
          },
          "enabled": {
            "type": "boolean"
          },
          "isPipelineInputOutdated": {
            "type": "boolean",
            "writeOnly": true
          },
          "pipelineInputOutdated": {
            "type": "boolean"
          }
        }
      },
      "PageResponseNGTriggerDetailsResponseDTO": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NGTriggerDetailsResponseDTO"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PollingSubscriptionStatus": {
        "type": "object",
        "properties": {
          "statusResult": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED",
              "UNKNOWN"
            ]
          },
          "detailedMessage": {
            "type": "string"
          }
        }
      },
      "ResponseDTOPageResponseNGTriggerDetailsResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseNGTriggerDetailsResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TriggerStatus": {
        "type": "object",
        "properties": {
          "pollingSubscriptionStatus": {
            "$ref": "#/components/schemas/PollingSubscriptionStatus"
          },
          "validationStatus": {
            "$ref": "#/components/schemas/ValidationStatus"
          },
          "webhookAutoRegistrationStatus": {
            "$ref": "#/components/schemas/WebhookAutoRegistrationStatus"
          },
          "webhookInfo": {
            "$ref": "#/components/schemas/WebhookInfo"
          }
        }
      },
      "ValidationStatus": {
        "type": "object",
        "properties": {
          "statusResult": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED",
              "UNKNOWN"
            ]
          },
          "detailedMessage": {
            "type": "string"
          }
        }
      },
      "WebhookAutoRegistrationStatus": {
        "type": "object",
        "properties": {
          "registrationResult": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED",
              "ERROR",
              "TIMEOUT",
              "UNAVAILABLE"
            ]
          },
          "detailedMessage": {
            "type": "string"
          }
        }
      },
      "WebhookDetails": {
        "type": "object",
        "properties": {
          "webhookSecret": {
            "type": "string"
          },
          "webhookSourceRepo": {
            "type": "string"
          }
        }
      },
      "WebhookInfo": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOTriggerCatalogResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TriggerCatalogResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TriggerCatalogItem": {
        "required": [
          "category",
          "triggerCatalogType"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of this Trigger.",
            "enum": [
              "Webhook",
              "Artifact",
              "Manifest",
              "Scheduled"
            ]
          },
          "triggerCatalogType": {
            "type": "array",
            "description": "List of Trigger types corresponding to a specific category.",
            "items": {
              "type": "string",
              "description": "List of Trigger types corresponding to a specific category.",
              "enum": [
                "Github",
                "Gitlab",
                "Bitbucket",
                "AwsCodeCommit",
                "Custom",
                "Gcr",
                "Ecr",
                "DockerRegistry",
                "ArtifactoryRegistry",
                "Acr",
                "AmazonS3",
                "GoogleArtifactRegistry",
                "CustomArtifact",
                "GithubPackageRegistry",
                "Nexus2Registry",
                "Nexus3Registry",
                "HelmChart",
                "Cron"
              ]
            }
          }
        },
        "description": "This has details of the Trigger Catalog."
      },
      "TriggerCatalogResponse": {
        "required": [
          "catalog"
        ],
        "type": "object",
        "properties": {
          "catalog": {
            "type": "array",
            "description": "List of Trigger category and Trigger types corresponding to a specific category.",
            "items": {
              "$ref": "#/components/schemas/TriggerCatalogItem"
            }
          }
        },
        "description": "This has details of the retrieved Trigger Catalog."
      },
      "ResponseDTONGTriggerDetailsResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/NGTriggerDetailsResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "NGTriggerEventHistoryDTO": {
        "type": "object",
        "properties": {
          "triggerIdentifier": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "targetIdentifier": {
            "type": "string"
          },
          "eventCorrelationId": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "eventCreatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "finalStatus": {
            "type": "string",
            "enum": [
              "SCM_SERVICE_CONNECTION_FAILED",
              "INVALID_PAYLOAD",
              "NO_MATCHING_TRIGGER_FOR_REPO",
              "NO_MATCHING_TRIGGER_FOR_EVENT_ACTION",
              "NO_MATCHING_TRIGGER_FOR_PAYLOAD_CONDITIONS",
              "NO_MATCHING_TRIGGER_FOR_JEXL_CONDITIONS",
              "NO_MATCHING_TRIGGER_FOR_HEADER_CONDITIONS",
              "INVALID_RUNTIME_INPUT_YAML",
              "TARGET_DID_NOT_EXECUTE",
              "TARGET_EXECUTION_REQUESTED",
              "NO_ENABLED_CUSTOM_TRIGGER_FOUND",
              "NO_ENABLED_CUSTOM_TRIGGER_FOUND_FOR_ACCOUNT",
              "NO_ENABLED_TRIGGER_FOR_PROJECT",
              "NO_ENABLED_TRIGGER_FOR_ACCOUNT",
              "NO_ENABLED_TRIGGER_FOR_SOURCEREPO_TYPE",
              "NO_ENABLED_TRIGGER_FOR_ACCOUNT_SOURCE_REPO",
              "NO_MATCHING_TRIGGER_FOR_FILEPATH_CONDITIONS",
              "FAILED_TO_FETCH_PR_DETAILS",
              "EXCEPTION_WHILE_PROCESSING",
              "TRIGGER_CONFIRMATION_SUCCESSFUL",
              "TRIGGER_CONFIRMATION_FAILED",
              "TRIGGER_AUTHENTICATION_FAILED",
              "VALIDATION_FAILED_FOR_TRIGGER",
              "ALL_MAPPED_TRIGGER_FAILED_VALIDATION_FOR_POLLING_EVENT",
              "NO_MATCHING_TRIGGER_FOR_FOR_EVENT_SIGNATURES",
              "NO_MATCHING_TRIGGER_FOR_FOR_EVENT_CONDITION",
              "POLLING_EVENT_WITH_NO_VERSIONS",
              "NEW_ARTIFACT_EVENT_PROCESSED",
              "NEW_MANIFEST_EVENT_PROCESSED"
            ]
          },
          "message": {
            "type": "string"
          },
          "exceptionOccurred": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "targetExecutionSummary": {
            "$ref": "#/components/schemas/TargetExecutionSummary"
          },
          "type": {
            "type": "string",
            "enum": [
              "Webhook",
              "Artifact",
              "Manifest",
              "Scheduled"
            ]
          }
        }
      },
      "PageNGTriggerEventHistoryDTO": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "first": {
            "type": "boolean"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "last": {
            "type": "boolean"
          },
          "pageable": {
            "$ref": "#/components/schemas/Pageable"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NGTriggerEventHistoryDTO"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageNGTriggerEventHistoryDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageNGTriggerEventHistoryDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TargetExecutionSummary": {
        "type": "object",
        "properties": {
          "triggerId": {
            "type": "string"
          },
          "targetId": {
            "type": "string"
          },
          "runtimeInput": {
            "type": "string"
          },
          "planExecutionId": {
            "type": "string"
          },
          "executionStatus": {
            "type": "string"
          },
          "startTs": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ResponseDTOWebhookEventProcessingDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookEventProcessingDetails"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "WebhookEventProcessingDetails": {
        "type": "object",
        "properties": {
          "eventFound": {
            "type": "boolean"
          },
          "eventId": {
            "type": "string"
          },
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "triggerIdentifier": {
            "type": "string"
          },
          "pipelineIdentifier": {
            "type": "string"
          },
          "pipelineExecutionId": {
            "type": "string"
          },
          "exceptionOccured": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "eventCreatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "runtimeInput": {
            "type": "string"
          },
          "warningMsg": {
            "type": "string"
          }
        }
      },
      "ResponseDTOWebhookExecutionDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/WebhookExecutionDetails"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "WebhookExecutionDetails": {
        "type": "object",
        "properties": {
          "webhookProcessingDetails": {
            "$ref": "#/components/schemas/WebhookEventProcessingDetails"
          },
          "executionDetails": {
            "type": "object"
          }
        }
      },
      "NGProcessWebhookResponse": {
        "type": "object",
        "properties": {
          "eventCorrelationId": {
            "type": "string"
          },
          "apiUrl": {
            "type": "string"
          },
          "uiUrl": {
            "type": "string"
          },
          "uiSetupUrl": {
            "type": "string"
          }
        },
        "description": "This contains details about the triggered webhook"
      },
      "ResponseDTONGProcessWebhookResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/NGProcessWebhookResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ApprovalInstanceDetailsDTO": {
        "type": "object"
      },
      "ApprovalInstanceResponse": {
        "required": [
          "details",
          "id",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "HarnessApproval",
              "JiraApproval",
              "CustomApproval",
              "ServiceNowApproval"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "WAITING",
              "APPROVED",
              "REJECTED",
              "FAILED",
              "ABORTED",
              "EXPIRED"
            ]
          },
          "deadline": {
            "type": "integer",
            "format": "int64"
          },
          "details": {
            "$ref": "#/components/schemas/ApprovalInstanceDetailsDTO"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "errorMessage": {
            "type": "string"
          }
        },
        "description": "This contains details of Approval Instance response"
      },
      "ApprovalUserGroup": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "identifier": {
            "type": "string",
            "description": "Identifier of the UserGroup."
          },
          "name": {
            "type": "string",
            "description": "Name of the UserGroup."
          }
        },
        "description": "User Group details used in Approvals."
      },
      "ApproverInput": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Custom data to capture at the time of approval"
      },
      "ApproverInputInfo": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          }
        },
        "description": "This contains details of Approver Inputs"
      },
      "Approvers": {
        "type": "object",
        "properties": {
          "userGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "minimumCount": {
            "type": "integer",
            "format": "int32"
          },
          "disallowPipelineExecutor": {
            "type": "boolean"
          }
        },
        "description": "This contains details of the Approvers"
      },
      "Condition": {
        "required": [
          "key",
          "operator",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "operator": {
            "type": "string",
            "enum": [
              "equals",
              "not equals",
              "in",
              "not in"
            ]
          }
        },
        "description": "This contains details of the Condition entity in Harness"
      },
      "CriteriaSpecDTO": {
        "type": "object"
      },
      "CriteriaSpecWrapper": {
        "required": [
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Jexl",
              "KeyValues"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/CriteriaSpecDTO"
          }
        },
        "description": "This contains details of Criteria Specifications such as Criteria Type"
      },
      "HarnessApprovalActivity": {
        "required": [
          "action",
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "action": {
            "type": "string",
            "enum": [
              "APPROVE",
              "REJECT"
            ]
          },
          "approverInputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApproverInput"
            }
          },
          "comments": {
            "type": "string"
          },
          "approvedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "HarnessApprovalInstanceDetails": {
        "required": [
          "approvalMessage",
          "approvers"
        ],
        "type": "object",
        "description": "This contains details of Harness Approval Instance",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApprovalInstanceDetailsDTO"
          },
          {
            "type": "object",
            "properties": {
              "approvalMessage": {
                "type": "string"
              },
              "includePipelineExecutionHistory": {
                "type": "boolean"
              },
              "approvers": {
                "$ref": "#/components/schemas/Approvers"
              },
              "approvalActivities": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HarnessApprovalActivity"
                }
              },
              "approverInputs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApproverInputInfo"
                }
              },
              "validatedApprovalUserGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApprovalUserGroup"
                }
              }
            }
          }
        ]
      },
      "JexlCriteriaSpec": {
        "required": [
          "expression"
        ],
        "type": "object",
        "description": "This contains details of the Jexl Criteria",
        "allOf": [
          {
            "$ref": "#/components/schemas/CriteriaSpecDTO"
          },
          {
            "type": "object",
            "properties": {
              "expression": {
                "type": "string"
              }
            }
          }
        ]
      },
      "JiraApprovalInstanceDetails": {
        "required": [
          "approvalCriteria",
          "connectorRef",
          "issue",
          "rejectionCriteria"
        ],
        "type": "object",
        "description": "This contains details of Jira Approval Instance",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApprovalInstanceDetailsDTO"
          },
          {
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "issue": {
                "$ref": "#/components/schemas/JiraIssueKeyNG"
              },
              "approvalCriteria": {
                "$ref": "#/components/schemas/CriteriaSpecWrapper"
              },
              "rejectionCriteria": {
                "$ref": "#/components/schemas/CriteriaSpecWrapper"
              }
            }
          }
        ]
      },
      "JiraIssueKeyNG": {
        "required": [
          "key",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "KeyValuesCriteriaSpec": {
        "required": [
          "conditions"
        ],
        "type": "object",
        "description": "This contains details of Key-Value Criteria specifications",
        "allOf": [
          {
            "$ref": "#/components/schemas/CriteriaSpecDTO"
          },
          {
            "type": "object",
            "properties": {
              "matchAnyCondition": {
                "type": "boolean"
              },
              "conditions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Condition"
                }
              }
            }
          }
        ]
      },
      "ResponseDTOApprovalInstanceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ApprovalInstanceResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ServiceNowApprovalInstanceDetails": {
        "required": [
          "approvalCriteria",
          "connectorRef",
          "ticket"
        ],
        "type": "object",
        "description": "This contains details of ServiceNow Approval Instance",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApprovalInstanceDetailsDTO"
          },
          {
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "ticket": {
                "$ref": "#/components/schemas/ServiceNowTicketKeyNG"
              },
              "approvalCriteria": {
                "$ref": "#/components/schemas/CriteriaSpecWrapper"
              },
              "rejectionCriteria": {
                "$ref": "#/components/schemas/CriteriaSpecWrapper"
              },
              "changeWindowSpec": {
                "$ref": "#/components/schemas/ServiceNowChangeWindowSpec"
              }
            }
          }
        ]
      },
      "ServiceNowChangeWindowSpec": {
        "required": [
          "endField",
          "startField"
        ],
        "type": "object",
        "properties": {
          "startField": {
            "type": "string"
          },
          "endField": {
            "type": "string"
          }
        },
        "description": "This contains details of the ServiceNow ChangeWindow"
      },
      "ServiceNowTicketKeyNG": {
        "required": [
          "key",
          "ticketType",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "ticketType": {
            "type": "string"
          }
        }
      },
      "HarnessApprovalActivityRequest": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Approval activity action",
            "enum": [
              "APPROVE",
              "REJECT"
            ]
          },
          "approverInputs": {
            "type": "array",
            "description": "Custom data to capture at the time of approval",
            "items": {
              "$ref": "#/components/schemas/ApproverInput"
            }
          },
          "comments": {
            "type": "string",
            "description": "Approval activity with the comment"
          }
        },
        "description": "Details of approval activity requested"
      },
      "DashboardPipelineExecution": {
        "type": "object",
        "properties": {
          "pipelineExecutionInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineExecution"
            }
          }
        },
        "description": "This is the view of the Pipeline Executions for given Time Interval presented in day wise format"
      },
      "PipelineCount": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "success": {
            "type": "integer",
            "format": "int64"
          },
          "failure": {
            "type": "integer",
            "format": "int64"
          },
          "expired": {
            "type": "integer",
            "format": "int64"
          },
          "aborted": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "This is the view of the Pipeline Execution Count Info for a particular Date"
      },
      "PipelineExecution": {
        "type": "object",
        "properties": {
          "date": {
            "type": "integer",
            "format": "int64"
          },
          "count": {
            "$ref": "#/components/schemas/PipelineCount"
          }
        },
        "description": "This is the view of the Pipeline Executions for a particular Date"
      },
      "ResponseDTODashboardPipelineExecution": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/DashboardPipelineExecution"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PipelineEntityGitDetails": {
        "type": "object",
        "properties": {
          "objectId": {
            "type": "string",
            "description": "Object Id of the Entity"
          },
          "branch": {
            "type": "string",
            "description": "Branch Name"
          },
          "repoIdentifier": {
            "type": "string",
            "description": "Git Sync Config Id"
          },
          "rootFolder": {
            "type": "string",
            "description": "Root Folder Path of the Entity"
          },
          "filePath": {
            "type": "string",
            "description": "File Path of the Entity"
          },
          "repoName": {
            "type": "string",
            "description": "Name of the repo"
          },
          "commitId": {
            "type": "string",
            "description": "Latest Commit ID"
          },
          "fileUrl": {
            "type": "string",
            "description": "File Url of the entity"
          },
          "repoUrl": {
            "type": "string",
            "description": "Repo url of the entity"
          }
        },
        "description": "This contains Git Details of the Entity"
      },
      "InputSetError": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "Name of the field that has the error"
          },
          "message": {
            "type": "string",
            "description": "Error message for this field"
          },
          "identifierOfErrorSource": {
            "type": "string",
            "description": "Identifier of the Input Set from which this field is from"
          }
        },
        "description": "This contains the error details for a field while saving an Input Set"
      },
      "InputSetErrorWrapper": {
        "type": "object",
        "properties": {
          "errorPipelineYaml": {
            "type": "string",
            "description": "If an Input Set save fails, this field contains the error fields, with the field values replaced with a UUID"
          },
          "uuidToErrorResponseMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InputSetErrorWrapper"
            },
            "description": "If an Input Set save fails, this field contains the map from FQN to why that FQN threw an error"
          },
          "invalidInputSetReferences": {
            "type": "array",
            "description": "List of Input Sets that are invalid",
            "items": {
              "type": "string",
              "description": "List of Input Sets that are invalid"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "description": "This contains the error response if the Input Set save failed"
      },
      "InputSetResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "pipelineIdentifier": {
            "type": "string",
            "description": "Pipeline Identifier for the entity."
          },
          "identifier": {
            "type": "string",
            "description": "Input Set Identifier"
          },
          "inputSetYaml": {
            "type": "string",
            "description": "Input Set YAML"
          },
          "name": {
            "type": "string",
            "description": "Input Set Name"
          },
          "description": {
            "type": "string",
            "description": "Input Set description"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Input Set tags"
            },
            "description": "Input Set tags"
          },
          "isOutdated": {
            "type": "boolean",
            "writeOnly": true
          },
          "isErrorResponse": {
            "type": "boolean",
            "writeOnly": true
          },
          "inputSetErrorWrapper": {
            "$ref": "#/components/schemas/InputSetErrorWrapper"
          },
          "gitDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "entityValidityDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "outdated": {
            "type": "boolean"
          },
          "errorResponse": {
            "type": "boolean"
          }
        },
        "description": "This contains Input Set details."
      },
      "ResponseDTOInputSetResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/InputSetResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "InputSetTemplateWithReplacedExpressionsResponse": {
        "type": "object",
        "properties": {
          "inputSetTemplateYaml": {
            "type": "string",
            "description": "Runtime Input template for the Pipeline"
          },
          "replacedExpressions": {
            "type": "array",
            "description": "List of Expressions that need to be replaced for running selected Stages. Empty if the full Pipeline is being run or no expressions need to be replaced",
            "items": {
              "type": "string",
              "description": "List of Expressions that need to be replaced for running selected Stages. Empty if the full Pipeline is being run or no expressions need to be replaced"
            }
          },
          "modules": {
            "uniqueItems": true,
            "type": "array",
            "description": "Modules in which the Pipeline belongs",
            "items": {
              "type": "string",
              "description": "Modules in which the Pipeline belongs"
            }
          },
          "hasInputSets": {
            "type": "boolean",
            "description": "Tells whether there are any Input Sets for this Pipeline or not."
          }
        },
        "description": "This is the Runtime Input Template for a Pipeline defined in Harness."
      },
      "ResponseDTOInputSetTemplateWithReplacedExpressionsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/InputSetTemplateWithReplacedExpressionsResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "InputSetTemplateRequest": {
        "type": "object",
        "properties": {
          "stageIdentifiers": {
            "type": "array",
            "description": "List of Stage identifiers for which the Runtime Input template is needed",
            "items": {
              "type": "string",
              "description": "List of Stage identifiers for which the Runtime Input template is needed"
            }
          }
        },
        "description": "Contains Stage Identifiers to filter Runtime Input Template."
      },
      "InputSetSummaryResponse": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Input Set Identifier"
          },
          "name": {
            "type": "string",
            "description": "Input Set Name"
          },
          "pipelineIdentifier": {
            "type": "string",
            "description": "Pipeline Identifier for the entity."
          },
          "description": {
            "type": "string",
            "description": "Input Set description"
          },
          "inputSetType": {
            "type": "string",
            "description": "Type of Input Set. The default value is ALL.",
            "enum": [
              "INPUT_SET",
              "OVERLAY_INPUT_SET"
            ]
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Input Set tags"
            },
            "description": "Input Set tags"
          },
          "gitDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "createdAt": {
            "type": "integer",
            "description": "Time at which the entity was created",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "description": "Time at which the entity was last updated",
            "format": "int64"
          },
          "isOutdated": {
            "type": "boolean",
            "description": "This field is true if a Pipeline update has made this Input Set invalid, and cannot be used for Pipeline Execution"
          },
          "inputSetErrorDetails": {
            "$ref": "#/components/schemas/InputSetErrorWrapper"
          },
          "overlaySetErrorDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "This contains the invalid references in the Overlay Input Set, along with a message why they are invalid"
            },
            "description": "This contains the invalid references in the Overlay Input Set, along with a message why they are invalid"
          },
          "entityValidityDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "modules": {
            "uniqueItems": true,
            "type": "array",
            "description": "Modules in which the Pipeline belongs",
            "items": {
              "type": "string",
              "description": "Modules in which the Pipeline belongs"
            }
          }
        },
        "description": "This is the view of the Input Set Summary."
      },
      "PageResponseInputSetSummaryResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputSetSummaryResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseInputSetSummaryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseInputSetSummaryResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PipelineSaveResponse": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "governanceMetadata": {
            "$ref": "#/components/schemas/GovernanceMetadata"
          }
        },
        "description": "Contains the Pipeline details for the given Pipeline ID"
      },
      "ResponseDTOPipelineSaveResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PipelineSaveResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ExecutionSummaryInfo": {
        "type": "object",
        "properties": {
          "numOfErrors": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "deployments": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "lastExecutionTs": {
            "type": "integer",
            "format": "int64"
          },
          "lastExecutionStatus": {
            "type": "string",
            "description": "This is the Execution Status of the entity",
            "enum": [
              "Running",
              "AsyncWaiting",
              "TaskWaiting",
              "TimedWaiting",
              "Failed",
              "Errored",
              "IgnoreFailed",
              "NotStarted",
              "Expired",
              "Aborted",
              "Discontinuing",
              "Queued",
              "Paused",
              "ResourceWaiting",
              "InterventionWaiting",
              "ApprovalWaiting",
              "WaitStepRunning",
              "QueuedLicenseLimitReached",
              "QueuedExecutionConcurrencyReached",
              "Success",
              "Suspended",
              "Skipped",
              "Pausing",
              "ApprovalRejected",
              "InputWaiting",
              "AbortedByFreeze",
              "NOT_STARTED",
              "INTERVENTION_WAITING",
              "APPROVAL_WAITING",
              "APPROVAL_REJECTED",
              "Waiting"
            ]
          },
          "lastExecutionId": {
            "type": "string"
          }
        },
        "description": "This is the view of the Execution Summary"
      },
      "PMSPipelineSummaryResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "numOfStages": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "modules": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "executionSummaryInfo": {
            "$ref": "#/components/schemas/ExecutionSummaryInfo"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "stageNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gitDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "entityValidityDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "storeType": {
            "type": "string",
            "enum": [
              "INLINE",
              "REMOTE"
            ]
          },
          "connectorRef": {
            "type": "string"
          },
          "isDraft": {
            "type": "boolean"
          }
        },
        "description": "This is the view of the Pipeline Summary for Pipeline entity defined in Harness."
      },
      "PagePMSPipelineSummaryResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "first": {
            "type": "boolean"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "last": {
            "type": "boolean"
          },
          "pageable": {
            "$ref": "#/components/schemas/Pageable"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PMSPipelineSummaryResponse"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPagePMSPipelineSummaryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PagePMSPipelineSummaryResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object",
          "description": "These are the Module Properties on which the filter will be applied."
        },
        "description": "These are the Module Properties on which the filter will be applied."
      },
      "PipelineFilterProperties": {
        "required": [
          "filterType"
        ],
        "type": "object",
        "properties": {
          "pipelineTags": {
            "type": "array",
            "description": "This is the list of the Pipeline Tags on which the filter will be applied.",
            "items": {
              "$ref": "#/components/schemas/NGTag"
            }
          },
          "pipelineIdentifiers": {
            "type": "array",
            "description": "This is the list of the Pipeline Identifiers on which the filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of the Pipeline Identifiers on which the filter will be applied."
            }
          },
          "name": {
            "type": "string",
            "description": "This is the Pipeline Name on which the filter will be applied."
          },
          "description": {
            "type": "string",
            "description": "This is the Pipeline Description on which the filter will be applied."
          },
          "moduleProperties": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object",
              "description": "These are the Module Properties on which the filter will be applied."
            },
            "description": "These are the Module Properties on which the filter will be applied."
          },
          "repoName": {
            "type": "string",
            "description": "This is the Pipeline repo filter on which the filter will be applied."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Filter tags as a key-value pair."
            },
            "description": "Filter tags as a key-value pair."
          },
          "filterType": {
            "type": "string",
            "description": "This specifies the corresponding Entity of the filter.",
            "enum": [
              "Connector",
              "DelegateProfile",
              "Delegate",
              "PipelineSetup",
              "PipelineExecution",
              "Deployment",
              "Audit",
              "Template",
              "EnvironmentGroup",
              "FileStore",
              "CCMRecommendation",
              "Anomaly",
              "Environment",
              "RuleExecution"
            ]
          }
        },
        "description": "Properties of the Pipelines Filter defined in Harness"
      },
      "CacheResponseMetadata": {
        "required": [
          "cacheState",
          "lastUpdatedAt",
          "ttlLeft"
        ],
        "type": "object",
        "properties": {
          "cacheState": {
            "type": "string",
            "enum": [
              "VALID_CACHE",
              "STALE_CACHE",
              "UNKNOWN"
            ]
          },
          "ttlLeft": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "This tells the state of the cache from which the pipeline was fetched."
      },
      "ErrorNodeSummary": {
        "type": "object",
        "properties": {
          "nodeInfo": {
            "$ref": "#/components/schemas/NodeInfo"
          },
          "templateInfo": {
            "$ref": "#/components/schemas/TemplateInfo"
          },
          "templateResponse": {
            "$ref": "#/components/schemas/TemplateResponse"
          },
          "childrenErrorNodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorNodeSummary"
            }
          }
        }
      },
      "NodeErrorInfo": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "fqn": {
            "type": "string"
          }
        }
      },
      "NodeInfo": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "localFqn": {
            "type": "string"
          }
        }
      },
      "PMSPipelineResponse": {
        "type": "object",
        "properties": {
          "yamlPipeline": {
            "type": "string"
          },
          "resolvedTemplatesPipelineYaml": {
            "type": "string",
            "description": "Pipeline YAML after resolving templates"
          },
          "gitDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "entityValidityDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "modules": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "governanceMetadata": {
            "$ref": "#/components/schemas/GovernanceMetadata"
          },
          "yamlSchemaErrorWrapper": {
            "$ref": "#/components/schemas/YamlSchemaErrorWrapperDTO"
          },
          "validateTemplateInputsResponse": {
            "$ref": "#/components/schemas/ValidateTemplateInputsResponseDTO"
          },
          "cacheResponse": {
            "$ref": "#/components/schemas/CacheResponseMetadata"
          },
          "validationUuid": {
            "type": "string"
          }
        },
        "description": "This contains pipeline yaml with the version."
      },
      "ResponseDTOPMSPipelineResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PMSPipelineResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TemplateInfo": {
        "type": "object",
        "properties": {
          "templateIdentifier": {
            "type": "string"
          },
          "versionLabel": {
            "type": "string"
          },
          "templateEntityType": {
            "type": "string",
            "enum": [
              "Step",
              "Stage",
              "Pipeline",
              "CustomDeployment",
              "MonitoredService",
              "SecretManager",
              "ArtifactSource",
              "StepGroup"
            ]
          }
        }
      },
      "TemplateResponse": {
        "required": [
          "accountId",
          "identifier",
          "name",
          "yaml"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "yaml": {
            "type": "string"
          },
          "versionLabel": {
            "type": "string"
          },
          "isStableTemplate": {
            "type": "boolean",
            "writeOnly": true
          },
          "templateEntityType": {
            "type": "string",
            "enum": [
              "Step",
              "Stage",
              "Pipeline",
              "CustomDeployment",
              "MonitoredService",
              "SecretManager",
              "ArtifactSource",
              "StepGroup"
            ]
          },
          "childType": {
            "type": "string"
          },
          "templateScope": {
            "type": "string",
            "enum": [
              "account",
              "org",
              "project",
              "unknown"
            ]
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "gitDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "entityValidityDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "storeType": {
            "type": "string",
            "enum": [
              "INLINE",
              "REMOTE"
            ]
          },
          "connectorRef": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "cacheResponseMetadata": {
            "$ref": "#/components/schemas/CacheResponseMetadata"
          },
          "stableTemplate": {
            "type": "boolean"
          }
        },
        "description": "This contains details of the Template Response"
      },
      "ValidateTemplateInputsResponseDTO": {
        "type": "object",
        "properties": {
          "validYaml": {
            "type": "boolean"
          },
          "errorNodeSummary": {
            "$ref": "#/components/schemas/ErrorNodeSummary"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "YamlSchemaErrorDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "messageWithFQN": {
            "type": "string"
          },
          "stageInfo": {
            "$ref": "#/components/schemas/NodeErrorInfo"
          },
          "stepInfo": {
            "$ref": "#/components/schemas/NodeErrorInfo"
          },
          "fqn": {
            "type": "string"
          },
          "hintMessage": {
            "type": "string"
          }
        }
      },
      "YamlSchemaErrorWrapperDTO": {
        "type": "object",
        "properties": {
          "schemaErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/YamlSchemaErrorDTO"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ResponseDTOPMSPipelineSummaryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PMSPipelineSummaryResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AdviserIssuer": {
        "required": [
          "adviseType"
        ],
        "type": "object",
        "properties": {
          "adviseType": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "NEXT_STEP",
              "RETRY",
              "INTERVENTION_WAIT",
              "END_PLAN",
              "MARK_SUCCESS",
              "IGNORE_FAILURE",
              "PROCEED_WITH_DEFAULT",
              "UNRECOGNIZED"
            ]
          }
        }
      },
      "AsyncExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "logKeysList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "callbackIdsCount": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "NO_OP",
              "RUNNING",
              "INTERVENTION_WAITING",
              "TIMED_WAITING",
              "ASYNC_WAITING",
              "TASK_WAITING",
              "DISCONTINUING",
              "PAUSING",
              "QUEUED",
              "SKIPPED",
              "PAUSED",
              "ABORTED",
              "ERRORED",
              "FAILED",
              "EXPIRED",
              "SUSPENDED",
              "SUCCEEDED",
              "IGNORE_FAILED",
              "APPROVAL_WAITING",
              "RESOURCE_WAITING",
              "APPROVAL_REJECTED",
              "INPUT_WAITING",
              "WAIT_STEP_RUNNING",
              "FREEZE_FAILED",
              "QUEUED_LICENSE_LIMIT_REACHED",
              "QUEUED_EXECUTION_CONCURRENCY_REACHED",
              "UNRECOGNIZED"
            ]
          },
          "timeout": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/AsyncExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserAsyncExecutableResponse"
          },
          "statusValue": {
            "type": "integer",
            "format": "int32"
          },
          "callbackIdsList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "AsyncExecutableResponseOrBuilder": {
        "type": "object",
        "properties": {
          "logKeysList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "callbackIdsCount": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "NO_OP",
              "RUNNING",
              "INTERVENTION_WAITING",
              "TIMED_WAITING",
              "ASYNC_WAITING",
              "TASK_WAITING",
              "DISCONTINUING",
              "PAUSING",
              "QUEUED",
              "SKIPPED",
              "PAUSED",
              "ABORTED",
              "ERRORED",
              "FAILED",
              "EXPIRED",
              "SUSPENDED",
              "SUCCEEDED",
              "IGNORE_FAILED",
              "APPROVAL_WAITING",
              "RESOURCE_WAITING",
              "APPROVAL_REJECTED",
              "INPUT_WAITING",
              "WAIT_STEP_RUNNING",
              "FREEZE_FAILED",
              "QUEUED_LICENSE_LIMIT_REACHED",
              "QUEUED_EXECUTION_CONCURRENCY_REACHED",
              "UNRECOGNIZED"
            ]
          },
          "timeout": {
            "type": "integer",
            "format": "int32"
          },
          "statusValue": {
            "type": "integer",
            "format": "int32"
          },
          "callbackIdsList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "Child": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "childNodeIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Child"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserChild"
          },
          "childNodeId": {
            "type": "string"
          },
          "strategyMetadata": {
            "$ref": "#/components/schemas/StrategyMetadata"
          },
          "strategyMetadataOrBuilder": {
            "$ref": "#/components/schemas/StrategyMetadataOrBuilder"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ChildChainExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "nextChildId": {
            "type": "string"
          },
          "nextChildIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "previousChildId": {
            "type": "string"
          },
          "previousChildIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ChildChainExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserChildChainExecutableResponse"
          },
          "passThroughData": {
            "$ref": "#/components/schemas/ByteString"
          },
          "lastLink": {
            "type": "boolean"
          },
          "suspend": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ChildChainExecutableResponseOrBuilder": {
        "type": "object",
        "properties": {
          "nextChildId": {
            "type": "string"
          },
          "nextChildIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "previousChildId": {
            "type": "string"
          },
          "previousChildIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "passThroughData": {
            "$ref": "#/components/schemas/ByteString"
          },
          "lastLink": {
            "type": "boolean"
          },
          "suspend": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ChildExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "logKeysList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "childNodeIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ChildExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserChildExecutableResponse"
          },
          "childNodeId": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ChildExecutableResponseOrBuilder": {
        "type": "object",
        "properties": {
          "logKeysList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "childNodeIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "childNodeId": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ChildExecutionDetail": {
        "type": "object",
        "properties": {
          "pipelineExecutionSummary": {
            "$ref": "#/components/schemas/PipelineExecutionSummary"
          },
          "executionGraph": {
            "$ref": "#/components/schemas/ExecutionGraph"
          }
        },
        "description": "This contains the Pipeline Execution details of Child Pipeline"
      },
      "ChildOrBuilder": {
        "type": "object",
        "properties": {
          "childNodeIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "childNodeId": {
            "type": "string"
          },
          "strategyMetadata": {
            "$ref": "#/components/schemas/StrategyMetadata"
          },
          "strategyMetadataOrBuilder": {
            "$ref": "#/components/schemas/StrategyMetadataOrBuilder"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ChildrenExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "logKeysList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "childrenList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Child"
            }
          },
          "childrenOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildOrBuilder"
            }
          },
          "childrenCount": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ChildrenExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserChildrenExecutableResponse"
          },
          "maxConcurrency": {
            "type": "integer",
            "format": "int64"
          },
          "shouldProceedIfFailed": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ChildrenExecutableResponseOrBuilder": {
        "type": "object",
        "properties": {
          "logKeysList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "childrenList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Child"
            }
          },
          "childrenOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildOrBuilder"
            }
          },
          "childrenCount": {
            "type": "integer",
            "format": "int32"
          },
          "maxConcurrency": {
            "type": "integer",
            "format": "int64"
          },
          "shouldProceedIfFailed": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "DelegateInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "taskName": {
            "type": "string"
          }
        }
      },
      "EdgeLayoutList": {
        "type": "object",
        "properties": {
          "currentNodeChildren": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nextIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "This contains info about the Layout of the Graph"
      },
      "ExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "task": {
            "$ref": "#/components/schemas/TaskExecutableResponse"
          },
          "child": {
            "$ref": "#/components/schemas/ChildExecutableResponse"
          },
          "children": {
            "$ref": "#/components/schemas/ChildrenExecutableResponse"
          },
          "async": {
            "$ref": "#/components/schemas/AsyncExecutableResponse"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserExecutableResponse"
          },
          "asyncOrBuilder": {
            "$ref": "#/components/schemas/AsyncExecutableResponseOrBuilder"
          },
          "childOrBuilder": {
            "$ref": "#/components/schemas/ChildExecutableResponseOrBuilder"
          },
          "childrenOrBuilder": {
            "$ref": "#/components/schemas/ChildrenExecutableResponseOrBuilder"
          },
          "childChain": {
            "$ref": "#/components/schemas/ChildChainExecutableResponse"
          },
          "childChainOrBuilder": {
            "$ref": "#/components/schemas/ChildChainExecutableResponseOrBuilder"
          },
          "taskOrBuilder": {
            "$ref": "#/components/schemas/TaskExecutableResponseOrBuilder"
          },
          "taskChain": {
            "$ref": "#/components/schemas/TaskChainExecutableResponse"
          },
          "taskChainOrBuilder": {
            "$ref": "#/components/schemas/TaskChainExecutableResponseOrBuilder"
          },
          "sync": {
            "$ref": "#/components/schemas/SyncExecutableResponse"
          },
          "syncOrBuilder": {
            "$ref": "#/components/schemas/SyncExecutableResponseOrBuilder"
          },
          "skipTask": {
            "$ref": "#/components/schemas/SkipTaskExecutableResponse"
          },
          "skipTaskOrBuilder": {
            "$ref": "#/components/schemas/SkipTaskExecutableResponseOrBuilder"
          },
          "responseCase": {
            "type": "string",
            "enum": [
              "ASYNC",
              "CHILD",
              "CHILDREN",
              "CHILDCHAIN",
              "TASK",
              "TASKCHAIN",
              "SYNC",
              "SKIPTASK",
              "RESPONSE_NOT_SET"
            ]
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExecutionErrorInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ExecutionErrorInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserExecutionErrorInfo"
          },
          "messageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "message": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExecutionGraph": {
        "type": "object",
        "properties": {
          "rootNodeId": {
            "type": "string"
          },
          "nodeMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ExecutionNode"
            }
          },
          "nodeAdjacencyListMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ExecutionNodeAdjacencyList"
            }
          },
          "executionMetadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "representationStrategy": {
            "type": "string",
            "enum": [
              "camelCase"
            ]
          }
        }
      },
      "ExecutionNode": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "setupId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "baseFqn": {
            "type": "string"
          },
          "outcomes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OrchestrationMap"
            }
          },
          "stepParameters": {
            "$ref": "#/components/schemas/OrchestrationMap"
          },
          "startTs": {
            "type": "integer",
            "format": "int64"
          },
          "endTs": {
            "type": "integer",
            "format": "int64"
          },
          "stepType": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "This is the Execution Status of the entity",
            "enum": [
              "Running",
              "AsyncWaiting",
              "TaskWaiting",
              "TimedWaiting",
              "Failed",
              "Errored",
              "IgnoreFailed",
              "NotStarted",
              "Expired",
              "Aborted",
              "Discontinuing",
              "Queued",
              "Paused",
              "ResourceWaiting",
              "InterventionWaiting",
              "ApprovalWaiting",
              "WaitStepRunning",
              "QueuedLicenseLimitReached",
              "QueuedExecutionConcurrencyReached",
              "Success",
              "Suspended",
              "Skipped",
              "Pausing",
              "ApprovalRejected",
              "InputWaiting",
              "AbortedByFreeze",
              "NOT_STARTED",
              "INTERVENTION_WAITING",
              "APPROVAL_WAITING",
              "APPROVAL_REJECTED",
              "Waiting"
            ]
          },
          "failureInfo": {
            "$ref": "#/components/schemas/FailureInfoDTO"
          },
          "skipInfo": {
            "$ref": "#/components/schemas/SkipInfo"
          },
          "nodeRunInfo": {
            "$ref": "#/components/schemas/NodeRunInfo"
          },
          "executableResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutableResponse"
            }
          },
          "unitProgresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitProgress"
            }
          },
          "progressData": {
            "$ref": "#/components/schemas/OrchestrationMap"
          },
          "delegateInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegateInfo"
            }
          },
          "interruptHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterruptEffectDTO"
            }
          },
          "stepDetails": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OrchestrationMap"
            }
          },
          "strategyMetadata": {
            "$ref": "#/components/schemas/StrategyMetadata"
          },
          "executionInputConfigured": {
            "type": "boolean"
          }
        }
      },
      "ExecutionNodeAdjacencyList": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nextIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExecutionTriggerInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ExecutionTriggerInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserExecutionTriggerInfo"
          },
          "triggerType": {
            "type": "string",
            "enum": [
              "NOOP",
              "MANUAL",
              "WEBHOOK",
              "WEBHOOK_CUSTOM",
              "SCHEDULER_CRON",
              "ARTIFACT",
              "MANIFEST",
              "UNRECOGNIZED"
            ]
          },
          "triggerTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "triggeredBy": {
            "$ref": "#/components/schemas/TriggeredBy"
          },
          "triggeredByOrBuilder": {
            "$ref": "#/components/schemas/TriggeredByOrBuilder"
          },
          "isRerun": {
            "type": "boolean"
          },
          "rerunInfo": {
            "$ref": "#/components/schemas/RerunInfo"
          },
          "rerunInfoOrBuilder": {
            "$ref": "#/components/schemas/RerunInfoOrBuilder"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExpressionBlock": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "expression": {
            "type": "string"
          },
          "expressionValueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ExpressionBlock"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserExpressionBlock"
          },
          "expressionValue": {
            "type": "string"
          },
          "expressionBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExpressionBlockOrBuilder": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string"
          },
          "expressionValueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "expressionValue": {
            "type": "string"
          },
          "expressionBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "FailureInfoDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "failureTypeList": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXPIRED",
                "DELEGATE_PROVISIONING",
                "CONNECTIVITY",
                "AUTHENTICATION",
                "VERIFICATION_FAILURE",
                "APPLICATION_ERROR",
                "AUTHORIZATION_ERROR",
                "TIMEOUT_ERROR",
                "POLICY_EVALUATION_FAILURE",
                "INPUT_TIMEOUT_FAILURE",
                "APPROVAL_REJECTION",
                "DELEGATE_RESTART"
              ]
            }
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineResponseMessage"
            }
          }
        }
      },
      "ForMetadata": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "partitionList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "partitionCount": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ForMetadata"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserForMetadata"
          },
          "valueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "value": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ForMetadataOrBuilder": {
        "type": "object",
        "properties": {
          "partitionList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "partitionCount": {
            "type": "integer",
            "format": "int32"
          },
          "valueBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "value": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "GraphLayoutNode": {
        "type": "object",
        "properties": {
          "nodeType": {
            "type": "string"
          },
          "nodeGroup": {
            "type": "string"
          },
          "nodeIdentifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nodeUuid": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "This is the Execution Status of the entity",
            "enum": [
              "Running",
              "AsyncWaiting",
              "TaskWaiting",
              "TimedWaiting",
              "Failed",
              "Errored",
              "IgnoreFailed",
              "NotStarted",
              "Expired",
              "Aborted",
              "Discontinuing",
              "Queued",
              "Paused",
              "ResourceWaiting",
              "InterventionWaiting",
              "ApprovalWaiting",
              "WaitStepRunning",
              "QueuedLicenseLimitReached",
              "QueuedExecutionConcurrencyReached",
              "Success",
              "Suspended",
              "Skipped",
              "Pausing",
              "ApprovalRejected",
              "InputWaiting",
              "AbortedByFreeze",
              "NOT_STARTED",
              "INTERVENTION_WAITING",
              "APPROVAL_WAITING",
              "APPROVAL_REJECTED",
              "Waiting"
            ]
          },
          "module": {
            "type": "string"
          },
          "moduleInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "startTs": {
            "type": "integer",
            "format": "int64"
          },
          "endTs": {
            "type": "integer",
            "format": "int64"
          },
          "edgeLayoutList": {
            "$ref": "#/components/schemas/EdgeLayoutList"
          },
          "skipInfo": {
            "$ref": "#/components/schemas/SkipInfo"
          },
          "nodeRunInfo": {
            "$ref": "#/components/schemas/NodeRunInfo"
          },
          "barrierFound": {
            "type": "boolean"
          },
          "failureInfo": {
            "$ref": "#/components/schemas/ExecutionErrorInfo"
          },
          "failureInfoDTO": {
            "$ref": "#/components/schemas/FailureInfoDTO"
          },
          "stepDetails": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PmsStepDetails"
            }
          },
          "hidden": {
            "type": "boolean"
          },
          "nodeExecutionId": {
            "type": "string"
          },
          "strategyMetadata": {
            "$ref": "#/components/schemas/StrategyMetadata"
          },
          "executionInputConfigured": {
            "type": "boolean"
          },
          "isRollbackStageNode": {
            "type": "boolean"
          }
        },
        "description": "This is the view of the Graph for execution of the Pipeline."
      },
      "InterruptConfig": {
        "required": [
          "issuedBy"
        ],
        "type": "object",
        "properties": {
          "issuedBy": {
            "$ref": "#/components/schemas/IssuedBy"
          },
          "retryInterruptConfig": {
            "$ref": "#/components/schemas/RetryInterruptConfig"
          }
        }
      },
      "InterruptEffectDTO": {
        "required": [
          "interruptConfig",
          "interruptId",
          "interruptType",
          "tookEffectAt"
        ],
        "type": "object",
        "properties": {
          "interruptId": {
            "type": "string"
          },
          "tookEffectAt": {
            "type": "integer",
            "format": "int64"
          },
          "interruptType": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "ABORT",
              "ABORT_ALL",
              "PAUSE",
              "PAUSE_ALL",
              "RESUME",
              "RESUME_ALL",
              "RETRY",
              "IGNORE",
              "WAITING_FOR_MANUAL_INTERVENTION",
              "MARK_FAILED",
              "MARK_SUCCESS",
              "NEXT_STEP",
              "END_EXECUTION",
              "MARK_EXPIRED",
              "CUSTOM_FAILURE",
              "EXPIRE_ALL",
              "PROCEED_WITH_DEFAULT",
              "UNRECOGNIZED"
            ]
          },
          "interruptConfig": {
            "$ref": "#/components/schemas/InterruptConfig"
          }
        }
      },
      "IssuedBy": {
        "required": [
          "issueTime"
        ],
        "type": "object",
        "properties": {
          "issueTime": {
            "type": "integer",
            "format": "int64"
          },
          "manualIssuer": {
            "$ref": "#/components/schemas/ManualIssuer"
          },
          "adviserIssuer": {
            "$ref": "#/components/schemas/AdviserIssuer"
          },
          "timeoutIssuer": {
            "$ref": "#/components/schemas/TimeoutIssuer"
          },
          "triggerIssuer": {
            "$ref": "#/components/schemas/TriggerIssuer"
          }
        }
      },
      "ManualIssuer": {
        "required": [
          "email_id",
          "identifier",
          "type",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "email_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        }
      },
      "MatrixMetadata": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "subType": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/MatrixMetadata"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserMatrixMetadata"
          },
          "matrixValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "matrixValuesCount": {
            "type": "integer",
            "format": "int32"
          },
          "matrixValuesMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "matrixCombinationList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "matrixCombinationCount": {
            "type": "integer",
            "format": "int32"
          },
          "subTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "MatrixMetadataOrBuilder": {
        "type": "object",
        "properties": {
          "subType": {
            "type": "string"
          },
          "matrixValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "matrixValuesCount": {
            "type": "integer",
            "format": "int32"
          },
          "matrixValuesMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "matrixCombinationList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "matrixCombinationCount": {
            "type": "integer",
            "format": "int32"
          },
          "subTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "NodeRunInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/NodeRunInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserNodeRunInfo"
          },
          "evaluatedCondition": {
            "type": "boolean"
          },
          "whenCondition": {
            "type": "string"
          },
          "whenConditionBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "expressionsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpressionBlock"
            }
          },
          "expressionsCount": {
            "type": "integer",
            "format": "int32"
          },
          "expressionsOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpressionBlockOrBuilder"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "OrchestrationMap": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "ParserAsyncExecutableResponse": {
        "type": "object"
      },
      "ParserChild": {
        "type": "object"
      },
      "ParserChildChainExecutableResponse": {
        "type": "object"
      },
      "ParserChildExecutableResponse": {
        "type": "object"
      },
      "ParserChildrenExecutableResponse": {
        "type": "object"
      },
      "ParserExecutableResponse": {
        "type": "object"
      },
      "ParserExecutionErrorInfo": {
        "type": "object"
      },
      "ParserExecutionTriggerInfo": {
        "type": "object"
      },
      "ParserExpressionBlock": {
        "type": "object"
      },
      "ParserForMetadata": {
        "type": "object"
      },
      "ParserMatrixMetadata": {
        "type": "object"
      },
      "ParserNodeRunInfo": {
        "type": "object"
      },
      "ParserPipelineStageInfo": {
        "type": "object"
      },
      "ParserRerunInfo": {
        "type": "object"
      },
      "ParserSkipInfo": {
        "type": "object"
      },
      "ParserSkipTaskExecutableResponse": {
        "type": "object"
      },
      "ParserStrategyMetadata": {
        "type": "object"
      },
      "ParserSyncExecutableResponse": {
        "type": "object"
      },
      "ParserTaskChainExecutableResponse": {
        "type": "object"
      },
      "ParserTaskExecutableResponse": {
        "type": "object"
      },
      "ParserTriggeredBy": {
        "type": "object"
      },
      "ParserUnitProgress": {
        "type": "object"
      },
      "PipelineExecutionDetail": {
        "type": "object",
        "properties": {
          "pipelineExecutionSummary": {
            "$ref": "#/components/schemas/PipelineExecutionSummary"
          },
          "executionGraph": {
            "$ref": "#/components/schemas/ExecutionGraph"
          },
          "childGraph": {
            "$ref": "#/components/schemas/ChildExecutionDetail"
          }
        },
        "description": "This contains the Pipeline Execution details."
      },
      "PipelineExecutionSummary": {
        "required": [
          "orgIdentifier",
          "projectIdentifier"
        ],
        "type": "object",
        "properties": {
          "pipelineIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "planExecutionId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "This is the Execution Status of the entity",
            "enum": [
              "Running",
              "AsyncWaiting",
              "TaskWaiting",
              "TimedWaiting",
              "Failed",
              "Errored",
              "IgnoreFailed",
              "NotStarted",
              "Expired",
              "Aborted",
              "Discontinuing",
              "Queued",
              "Paused",
              "ResourceWaiting",
              "InterventionWaiting",
              "ApprovalWaiting",
              "WaitStepRunning",
              "QueuedLicenseLimitReached",
              "QueuedExecutionConcurrencyReached",
              "Success",
              "Suspended",
              "Skipped",
              "Pausing",
              "ApprovalRejected",
              "InputWaiting",
              "AbortedByFreeze",
              "NOT_STARTED",
              "INTERVENTION_WAITING",
              "APPROVAL_WAITING",
              "APPROVAL_REJECTED",
              "Waiting"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NGTag"
            }
          },
          "executionTriggerInfo": {
            "$ref": "#/components/schemas/ExecutionTriggerInfo"
          },
          "executionErrorInfo": {
            "$ref": "#/components/schemas/ExecutionErrorInfo"
          },
          "governanceMetadata": {
            "$ref": "#/components/schemas/GovernanceMetadata"
          },
          "failureInfo": {
            "$ref": "#/components/schemas/FailureInfoDTO"
          },
          "moduleInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "layoutNodeMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GraphLayoutNode"
            }
          },
          "firstRollbackStageGraphId": {
            "type": "string"
          },
          "modules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startingNodeId": {
            "type": "string"
          },
          "startTs": {
            "type": "integer",
            "format": "int64"
          },
          "endTs": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "canRetry": {
            "type": "boolean"
          },
          "showRetryHistory": {
            "type": "boolean"
          },
          "runSequence": {
            "type": "integer",
            "format": "int32"
          },
          "successfulStagesCount": {
            "type": "integer",
            "format": "int64"
          },
          "runningStagesCount": {
            "type": "integer",
            "format": "int64"
          },
          "failedStagesCount": {
            "type": "integer",
            "format": "int64"
          },
          "totalStagesCount": {
            "type": "integer",
            "format": "int64"
          },
          "gitDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          },
          "storeType": {
            "type": "string",
            "enum": [
              "INLINE",
              "REMOTE"
            ]
          },
          "connectorRef": {
            "type": "string"
          },
          "executionInputConfigured": {
            "type": "boolean"
          },
          "isStagesExecution": {
            "type": "boolean",
            "writeOnly": true
          },
          "parentStageInfo": {
            "$ref": "#/components/schemas/PipelineStageInfo"
          },
          "stagesExecuted": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stagesExecutedNames": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "allowStageExecutions": {
            "type": "boolean"
          },
          "stagesExecution": {
            "type": "boolean"
          }
        },
        "description": "This is the view of the Pipeline Execution Summary"
      },
      "PipelineStageInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "identifier": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "hasParentPipeline": {
            "type": "boolean"
          },
          "stageNodeIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "executionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/PipelineStageInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserPipelineStageInfo"
          },
          "runSequence": {
            "type": "integer",
            "format": "int32"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "orgId": {
            "type": "string"
          },
          "orgIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "projectId": {
            "type": "string"
          },
          "projectIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "stageNodeId": {
            "type": "string"
          },
          "executionId": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "PmsStepDetails": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "RerunInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "prevExecutionId": {
            "type": "string"
          },
          "rootTriggerTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "prevExecutionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "prevTriggerTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "prevTriggerType": {
            "type": "string",
            "enum": [
              "NOOP",
              "MANUAL",
              "WEBHOOK",
              "WEBHOOK_CUSTOM",
              "SCHEDULER_CRON",
              "ARTIFACT",
              "MANIFEST",
              "UNRECOGNIZED"
            ]
          },
          "initialized": {
            "type": "boolean"
          },
          "rootExecutionId": {
            "type": "string"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/RerunInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserRerunInfo"
          },
          "rootTriggerType": {
            "type": "string",
            "enum": [
              "NOOP",
              "MANUAL",
              "WEBHOOK",
              "WEBHOOK_CUSTOM",
              "SCHEDULER_CRON",
              "ARTIFACT",
              "MANIFEST",
              "UNRECOGNIZED"
            ]
          },
          "rootExecutionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "RerunInfoOrBuilder": {
        "type": "object",
        "properties": {
          "prevExecutionId": {
            "type": "string"
          },
          "rootTriggerTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "prevExecutionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "prevTriggerTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "prevTriggerType": {
            "type": "string",
            "enum": [
              "NOOP",
              "MANUAL",
              "WEBHOOK",
              "WEBHOOK_CUSTOM",
              "SCHEDULER_CRON",
              "ARTIFACT",
              "MANIFEST",
              "UNRECOGNIZED"
            ]
          },
          "rootExecutionId": {
            "type": "string"
          },
          "rootTriggerType": {
            "type": "string",
            "enum": [
              "NOOP",
              "MANUAL",
              "WEBHOOK",
              "WEBHOOK_CUSTOM",
              "SCHEDULER_CRON",
              "ARTIFACT",
              "MANIFEST",
              "UNRECOGNIZED"
            ]
          },
          "rootExecutionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPipelineExecutionDetail": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PipelineExecutionDetail"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RetryInterruptConfig": {
        "required": [
          "retryId"
        ],
        "type": "object",
        "properties": {
          "retryId": {
            "type": "string"
          }
        }
      },
      "SkipInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/SkipInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserSkipInfo"
          },
          "skipCondition": {
            "type": "string"
          },
          "skipConditionBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "evaluatedCondition": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "SkipTaskExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/SkipTaskExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserSkipTaskExecutableResponse"
          },
          "messageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "message": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "SkipTaskExecutableResponseOrBuilder": {
        "type": "object",
        "properties": {
          "messageBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "message": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "StrategyMetadata": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/StrategyMetadata"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserStrategyMetadata"
          },
          "totalIterations": {
            "type": "integer",
            "format": "int32"
          },
          "currentIteration": {
            "type": "integer",
            "format": "int32"
          },
          "matrixMetadata": {
            "$ref": "#/components/schemas/MatrixMetadata"
          },
          "matrixMetadataOrBuilder": {
            "$ref": "#/components/schemas/MatrixMetadataOrBuilder"
          },
          "forMetadata": {
            "$ref": "#/components/schemas/ForMetadata"
          },
          "forMetadataOrBuilder": {
            "$ref": "#/components/schemas/ForMetadataOrBuilder"
          },
          "metadataCase": {
            "type": "string",
            "enum": [
              "MATRIXMETADATA",
              "FORMETADATA",
              "METADATA_NOT_SET"
            ]
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "StrategyMetadataOrBuilder": {
        "type": "object",
        "properties": {
          "totalIterations": {
            "type": "integer",
            "format": "int32"
          },
          "currentIteration": {
            "type": "integer",
            "format": "int32"
          },
          "matrixMetadata": {
            "$ref": "#/components/schemas/MatrixMetadata"
          },
          "matrixMetadataOrBuilder": {
            "$ref": "#/components/schemas/MatrixMetadataOrBuilder"
          },
          "forMetadata": {
            "$ref": "#/components/schemas/ForMetadata"
          },
          "forMetadataOrBuilder": {
            "$ref": "#/components/schemas/ForMetadataOrBuilder"
          },
          "metadataCase": {
            "type": "string",
            "enum": [
              "MATRIXMETADATA",
              "FORMETADATA",
              "METADATA_NOT_SET"
            ]
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "SyncExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "logKeysList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/SyncExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserSyncExecutableResponse"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "SyncExecutableResponseOrBuilder": {
        "type": "object",
        "properties": {
          "logKeysList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "TaskChainExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "logKeysList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "taskIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskName": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/TaskChainExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserTaskChainExecutableResponse"
          },
          "chainEnd": {
            "type": "boolean"
          },
          "passThroughData": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskCategory": {
            "type": "string",
            "enum": [
              "UNKNOWN_CATEGORY",
              "DELEGATE_TASK_V1",
              "DELEGATE_TASK_V2",
              "UNRECOGNIZED"
            ]
          },
          "taskCategoryValue": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "TaskChainExecutableResponseOrBuilder": {
        "type": "object",
        "properties": {
          "logKeysList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "taskIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskName": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "chainEnd": {
            "type": "boolean"
          },
          "passThroughData": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskCategory": {
            "type": "string",
            "enum": [
              "UNKNOWN_CATEGORY",
              "DELEGATE_TASK_V1",
              "DELEGATE_TASK_V2",
              "UNRECOGNIZED"
            ]
          },
          "taskCategoryValue": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "TaskExecutableResponse": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "logKeysList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "taskIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskName": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/TaskExecutableResponse"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserTaskExecutableResponse"
          },
          "taskCategory": {
            "type": "string",
            "enum": [
              "UNKNOWN_CATEGORY",
              "DELEGATE_TASK_V1",
              "DELEGATE_TASK_V2",
              "UNRECOGNIZED"
            ]
          },
          "taskCategoryValue": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "TaskExecutableResponseOrBuilder": {
        "type": "object",
        "properties": {
          "logKeysList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "logKeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "unitsList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "taskIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "taskName": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "taskCategory": {
            "type": "string",
            "enum": [
              "UNKNOWN_CATEGORY",
              "DELEGATE_TASK_V1",
              "DELEGATE_TASK_V2",
              "UNRECOGNIZED"
            ]
          },
          "taskCategoryValue": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "TimeoutIssuer": {
        "required": [
          "timeoutInstanceId"
        ],
        "type": "object",
        "properties": {
          "timeoutInstanceId": {
            "type": "string"
          }
        }
      },
      "TriggerIssuer": {
        "required": [
          "abortPrevConcurrentExecution",
          "triggerRef"
        ],
        "type": "object",
        "properties": {
          "triggerRef": {
            "type": "string"
          },
          "abortPrevConcurrentExecution": {
            "type": "boolean"
          }
        }
      },
      "TriggeredBy": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "identifier": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/TriggeredBy"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserTriggeredBy"
          },
          "uuid": {
            "type": "string"
          },
          "uuidBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "extraInfoCount": {
            "type": "integer",
            "format": "int32"
          },
          "extraInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "extraInfoMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "TriggeredByOrBuilder": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "uuidBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "extraInfoCount": {
            "type": "integer",
            "format": "int32"
          },
          "extraInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "extraInfoMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "UnitProgress": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SUCCESS",
              "FAILURE",
              "RUNNING",
              "QUEUED",
              "SKIPPED",
              "EXPIRED",
              "UNRECOGNIZED"
            ]
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/UnitProgress"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserUnitProgress"
          },
          "unitName": {
            "type": "string"
          },
          "unitNameBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "statusValue": {
            "type": "integer",
            "format": "int32"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "PagePipelineExecutionSummary": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "first": {
            "type": "boolean"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "last": {
            "type": "boolean"
          },
          "pageable": {
            "$ref": "#/components/schemas/Pageable"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineExecutionSummary"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPagePipelineExecutionSummary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PagePipelineExecutionSummary"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "InterruptResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AbortAll",
              "Abort",
              "Pause",
              "Resume",
              "Ignore",
              "StageRollback",
              "StepGroupRollback",
              "MarkAsSuccess",
              "ExpireAll",
              "Retry"
            ]
          },
          "planExecutionId": {
            "type": "string"
          }
        },
        "description": "Contains the ID and type of the interrupt issued along with the execution id."
      },
      "ResponseDTOInterruptResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/InterruptResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Ambiance": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "metadata": {
            "$ref": "#/components/schemas/ExecutionMetadata"
          },
          "startTs": {
            "type": "integer",
            "format": "int64"
          },
          "expressionFunctorToken": {
            "type": "integer",
            "format": "int64"
          },
          "initialized": {
            "type": "boolean"
          },
          "planExecutionId": {
            "type": "string"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Ambiance"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserAmbiance"
          },
          "setupAbstractions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "planId": {
            "type": "string"
          },
          "setupAbstractionsMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stageExecutionId": {
            "type": "string"
          },
          "levelsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Level"
            }
          },
          "metadataOrBuilder": {
            "$ref": "#/components/schemas/ExecutionMetadataOrBuilder"
          },
          "planExecutionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "setupAbstractionsCount": {
            "type": "integer",
            "format": "int32"
          },
          "levelsCount": {
            "type": "integer",
            "format": "int32"
          },
          "levelsOrBuilderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LevelOrBuilder"
            }
          },
          "planIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "stageExecutionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExecutionMetadata": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "principalInfo": {
            "$ref": "#/components/schemas/ExecutionPrincipalInfo"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ExecutionMetadata"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserExecutionMetadata"
          },
          "runSequence": {
            "type": "integer",
            "format": "int32"
          },
          "triggerInfo": {
            "$ref": "#/components/schemas/ExecutionTriggerInfo"
          },
          "triggerInfoOrBuilder": {
            "$ref": "#/components/schemas/ExecutionTriggerInfoOrBuilder"
          },
          "pipelineIdentifier": {
            "type": "string"
          },
          "pipelineIdentifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "executionUuid": {
            "type": "string"
          },
          "executionUuidBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "principalInfoOrBuilder": {
            "$ref": "#/components/schemas/ExecutionPrincipalInfoOrBuilder"
          },
          "gitSyncBranchContext": {
            "$ref": "#/components/schemas/ByteString"
          },
          "moduleType": {
            "type": "string"
          },
          "moduleTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "retryInfo": {
            "$ref": "#/components/schemas/RetryExecutionInfo"
          },
          "retryInfoOrBuilder": {
            "$ref": "#/components/schemas/RetryExecutionInfoOrBuilder"
          },
          "isNotificationConfigured": {
            "type": "boolean"
          },
          "pipelineStoreTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "pipelineStoreType": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "INLINE",
              "REMOTE",
              "UNRECOGNIZED"
            ]
          },
          "pipelineConnectorRef": {
            "type": "string"
          },
          "pipelineConnectorRefBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "pipelineStageInfo": {
            "$ref": "#/components/schemas/PipelineStageInfo"
          },
          "pipelineStageInfoOrBuilder": {
            "$ref": "#/components/schemas/PipelineStageInfoOrBuilder"
          },
          "harnessVersion": {
            "type": "string"
          },
          "harnessVersionBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "isDebug": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExecutionMetadataOrBuilder": {
        "type": "object",
        "properties": {
          "principalInfo": {
            "$ref": "#/components/schemas/ExecutionPrincipalInfo"
          },
          "runSequence": {
            "type": "integer",
            "format": "int32"
          },
          "triggerInfo": {
            "$ref": "#/components/schemas/ExecutionTriggerInfo"
          },
          "triggerInfoOrBuilder": {
            "$ref": "#/components/schemas/ExecutionTriggerInfoOrBuilder"
          },
          "pipelineIdentifier": {
            "type": "string"
          },
          "pipelineIdentifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "executionUuid": {
            "type": "string"
          },
          "executionUuidBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "principalInfoOrBuilder": {
            "$ref": "#/components/schemas/ExecutionPrincipalInfoOrBuilder"
          },
          "gitSyncBranchContext": {
            "$ref": "#/components/schemas/ByteString"
          },
          "moduleType": {
            "type": "string"
          },
          "moduleTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "retryInfo": {
            "$ref": "#/components/schemas/RetryExecutionInfo"
          },
          "retryInfoOrBuilder": {
            "$ref": "#/components/schemas/RetryExecutionInfoOrBuilder"
          },
          "isNotificationConfigured": {
            "type": "boolean"
          },
          "pipelineStoreTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "pipelineStoreType": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "INLINE",
              "REMOTE",
              "UNRECOGNIZED"
            ]
          },
          "pipelineConnectorRef": {
            "type": "string"
          },
          "pipelineConnectorRefBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "pipelineStageInfo": {
            "$ref": "#/components/schemas/PipelineStageInfo"
          },
          "pipelineStageInfoOrBuilder": {
            "$ref": "#/components/schemas/PipelineStageInfoOrBuilder"
          },
          "harnessVersion": {
            "type": "string"
          },
          "harnessVersionBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "isDebug": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ExecutionPrincipalInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/ExecutionPrincipalInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserExecutionPrincipalInfo"
          },
          "principal": {
            "type": "string"
          },
          "principalBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "principalTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "principalType": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "USER",
              "USER_GROUP",
              "API_KEY",
              "SERVICE",
              "SERVICE_ACCOUNT",
              "UNRECOGNIZED"
            ]
          },
          "shouldValidateRbac": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "ExecutionPrincipalInfoOrBuilder": {
        "type": "object",
        "properties": {
          "principal": {
            "type": "string"
          },
          "principalBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "principalTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "principalType": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "USER",
              "USER_GROUP",
              "API_KEY",
              "SERVICE",
              "SERVICE_ACCOUNT",
              "UNRECOGNIZED"
            ]
          },
          "shouldValidateRbac": {
            "type": "boolean"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ExecutionTriggerInfoOrBuilder": {
        "type": "object",
        "properties": {
          "triggerType": {
            "type": "string",
            "enum": [
              "NOOP",
              "MANUAL",
              "WEBHOOK",
              "WEBHOOK_CUSTOM",
              "SCHEDULER_CRON",
              "ARTIFACT",
              "MANIFEST",
              "UNRECOGNIZED"
            ]
          },
          "triggerTypeValue": {
            "type": "integer",
            "format": "int32"
          },
          "triggeredBy": {
            "$ref": "#/components/schemas/TriggeredBy"
          },
          "triggeredByOrBuilder": {
            "$ref": "#/components/schemas/TriggeredByOrBuilder"
          },
          "isRerun": {
            "type": "boolean"
          },
          "rerunInfo": {
            "$ref": "#/components/schemas/RerunInfo"
          },
          "rerunInfoOrBuilder": {
            "$ref": "#/components/schemas/RerunInfoOrBuilder"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "Level": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "group": {
            "type": "string"
          },
          "nodeType": {
            "type": "string"
          },
          "startTs": {
            "type": "integer",
            "format": "int64"
          },
          "identifier": {
            "type": "string"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Level"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserLevel"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "strategyMetadata": {
            "$ref": "#/components/schemas/StrategyMetadata"
          },
          "stepType": {
            "$ref": "#/components/schemas/StepType"
          },
          "runtimeId": {
            "type": "string"
          },
          "runtimeIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "stepTypeOrBuilder": {
            "$ref": "#/components/schemas/StepTypeOrBuilder"
          },
          "groupBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "skipExpressionChain": {
            "type": "boolean"
          },
          "setupId": {
            "type": "string"
          },
          "retryIndex": {
            "type": "integer",
            "format": "int32"
          },
          "setupIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "nodeTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "strategyMetadataOrBuilder": {
            "$ref": "#/components/schemas/StrategyMetadataOrBuilder"
          },
          "originalIdentifier": {
            "type": "string"
          },
          "originalIdentifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "LevelOrBuilder": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "nodeType": {
            "type": "string"
          },
          "startTs": {
            "type": "integer",
            "format": "int64"
          },
          "identifier": {
            "type": "string"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "strategyMetadata": {
            "$ref": "#/components/schemas/StrategyMetadata"
          },
          "stepType": {
            "$ref": "#/components/schemas/StepType"
          },
          "runtimeId": {
            "type": "string"
          },
          "runtimeIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "stepTypeOrBuilder": {
            "$ref": "#/components/schemas/StepTypeOrBuilder"
          },
          "groupBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "skipExpressionChain": {
            "type": "boolean"
          },
          "setupId": {
            "type": "string"
          },
          "retryIndex": {
            "type": "integer",
            "format": "int32"
          },
          "setupIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "nodeTypeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "strategyMetadataOrBuilder": {
            "$ref": "#/components/schemas/StrategyMetadataOrBuilder"
          },
          "originalIdentifier": {
            "type": "string"
          },
          "originalIdentifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "ParserAmbiance": {
        "type": "object"
      },
      "ParserExecutionMetadata": {
        "type": "object"
      },
      "ParserExecutionPrincipalInfo": {
        "type": "object"
      },
      "ParserLevel": {
        "type": "object"
      },
      "ParserRetryExecutionInfo": {
        "type": "object"
      },
      "ParserStepType": {
        "type": "object"
      },
      "PipelineStageInfoOrBuilder": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "hasParentPipeline": {
            "type": "boolean"
          },
          "stageNodeIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "executionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "runSequence": {
            "type": "integer",
            "format": "int32"
          },
          "identifierBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "orgId": {
            "type": "string"
          },
          "orgIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "projectId": {
            "type": "string"
          },
          "projectIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "stageNodeId": {
            "type": "string"
          },
          "executionId": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "PlanExecution": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "planId": {
            "type": "string"
          },
          "setupAbstractions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "NO_OP",
              "RUNNING",
              "INTERVENTION_WAITING",
              "TIMED_WAITING",
              "ASYNC_WAITING",
              "TASK_WAITING",
              "DISCONTINUING",
              "PAUSING",
              "QUEUED",
              "SKIPPED",
              "PAUSED",
              "ABORTED",
              "ERRORED",
              "FAILED",
              "EXPIRED",
              "SUSPENDED",
              "SUCCEEDED",
              "IGNORE_FAILED",
              "APPROVAL_WAITING",
              "RESOURCE_WAITING",
              "APPROVAL_REJECTED",
              "INPUT_WAITING",
              "WAIT_STEP_RUNNING",
              "FREEZE_FAILED",
              "QUEUED_LICENSE_LIMIT_REACHED",
              "QUEUED_EXECUTION_CONCURRENCY_REACHED",
              "UNRECOGNIZED"
            ]
          },
          "startTs": {
            "type": "integer",
            "format": "int64"
          },
          "endTs": {
            "type": "integer",
            "format": "int64"
          },
          "metadata": {
            "$ref": "#/components/schemas/ExecutionMetadata"
          },
          "governanceMetadata": {
            "$ref": "#/components/schemas/GovernanceMetadata"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "nextIteration": {
            "type": "integer",
            "format": "int64"
          },
          "ambiance": {
            "$ref": "#/components/schemas/Ambiance"
          },
          "nodeId": {
            "type": "string"
          },
          "nodeType": {
            "type": "string",
            "enum": [
              "PLAN",
              "PLAN_NODE",
              "IDENTITY_PLAN_NODE"
            ]
          }
        }
      },
      "PlanExecutionResponse": {
        "type": "object",
        "properties": {
          "planExecution": {
            "$ref": "#/components/schemas/PlanExecution"
          },
          "gitDetails": {
            "$ref": "#/components/schemas/PipelineEntityGitDetails"
          }
        },
        "description": "This contains info about the Pipeline Execution"
      },
      "ResponseDTOPlanExecutionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PlanExecutionResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RetryExecutionInfo": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "rootExecutionId": {
            "type": "string"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/RetryExecutionInfo"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserRetryExecutionInfo"
          },
          "isRetry": {
            "type": "boolean"
          },
          "rootExecutionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "parentRetryId": {
            "type": "string"
          },
          "parentRetryIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "RetryExecutionInfoOrBuilder": {
        "type": "object",
        "properties": {
          "rootExecutionId": {
            "type": "string"
          },
          "isRetry": {
            "type": "boolean"
          },
          "rootExecutionIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "parentRetryId": {
            "type": "string"
          },
          "parentRetryIdBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "StepType": {
        "type": "object",
        "properties": {
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          },
          "serializedSize": {
            "type": "integer",
            "format": "int32"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/StepType"
          },
          "parserForType": {
            "$ref": "#/components/schemas/ParserStepType"
          },
          "typeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "stepCategory": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "PIPELINE",
              "STAGE",
              "STEP",
              "STAGES",
              "FORK",
              "STEP_GROUP",
              "STRATEGY",
              "UNRECOGNIZED"
            ]
          },
          "stepCategoryValue": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "memoizedSerializedSize": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          }
        }
      },
      "StepTypeOrBuilder": {
        "type": "object",
        "properties": {
          "typeBytes": {
            "$ref": "#/components/schemas/ByteString"
          },
          "stepCategory": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "PIPELINE",
              "STAGE",
              "STEP",
              "STAGES",
              "FORK",
              "STEP_GROUP",
              "STRATEGY",
              "UNRECOGNIZED"
            ]
          },
          "stepCategoryValue": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "allFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "descriptorForType": {
            "$ref": "#/components/schemas/Descriptor"
          },
          "defaultInstanceForType": {
            "$ref": "#/components/schemas/Message"
          },
          "initializationErrorString": {
            "type": "string"
          },
          "unknownFields": {
            "$ref": "#/components/schemas/UnknownFieldSet"
          },
          "initialized": {
            "type": "boolean"
          }
        }
      },
      "MergeInputSetRequest": {
        "required": [
          "inputSetReferences"
        ],
        "type": "object",
        "properties": {
          "inputSetReferences": {
            "type": "array",
            "description": "List of Input Set References to be merged",
            "items": {
              "type": "string",
              "description": "List of Input Set References to be merged"
            }
          },
          "withMergedPipelineYaml": {
            "type": "boolean",
            "description": "This is a boolean value that indicates if the response must contain the YAML for the merged Pipeline. The default value is False."
          },
          "stageIdentifiers": {
            "type": "array",
            "description": "List of Stage Ids. Input Sets corresponding to these Ids will be merged.",
            "items": {
              "type": "string",
              "description": "List of Stage Ids. Input Sets corresponding to these Ids will be merged."
            }
          }
        },
        "description": "Contains list of Input Set references and Stage Ids"
      },
      "AuthzFailure": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "description": "This is Failure entity as defied in Harness"
      },
      "AuthzError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "detailedMessage": {
            "type": "string"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthzResponseMessage"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/ErrorMetadata"
          }
        },
        "description": "This is Error entity as defined in Harness"
      },
      "AuthzResponseMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "INFO",
              "ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "exception": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "moduleVersion": {
                      "type": "string"
                    },
                    "methodName": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": {
                      "type": "string"
                    },
                    "nativeMethod": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "suppressed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "stackTrace": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "classLoaderName": {
                            "type": "string"
                          },
                          "moduleName": {
                            "type": "string"
                          },
                          "moduleVersion": {
                            "type": "string"
                          },
                          "methodName": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "lineNumber": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "className": {
                            "type": "string"
                          },
                          "nativeMethod": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "localizedMessage": {
                      "type": "string"
                    }
                  }
                }
              },
              "localizedMessage": {
                "type": "string"
              }
            }
          },
          "failureTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXPIRED",
                "DELEGATE_PROVISIONING",
                "CONNECTIVITY",
                "AUTHENTICATION",
                "VERIFICATION_FAILURE",
                "APPLICATION_ERROR",
                "AUTHORIZATION_ERROR",
                "TIMEOUT_ERROR",
                "POLICY_EVALUATION_FAILURE",
                "INPUT_TIMEOUT_FAILURE",
                "APPROVAL_REJECTION",
                "DELEGATE_RESTART"
              ]
            }
          }
        }
      },
      "AccessCheckResponse": {
        "type": "object",
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/AuthzPrincipal"
          },
          "accessControlList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControl"
            }
          }
        }
      },
      "AccessControl": {
        "type": "object",
        "properties": {
          "permission": {
            "type": "string"
          },
          "resourceScope": {
            "$ref": "#/components/schemas/ResourceScope"
          },
          "resourceType": {
            "type": "string"
          },
          "resourceAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "resourceIdentifier": {
            "type": "string"
          },
          "permitted": {
            "type": "boolean"
          }
        }
      },
      "AuthzPrincipal": {
        "type": "object",
        "properties": {
          "scopeLevel": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "USER_GROUP",
              "SERVICE",
              "API_KEY",
              "SERVICE_ACCOUNT"
            ]
          }
        }
      },
      "ResourceScope": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          }
        }
      },
      "ResponseDTOAccessCheckResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/AccessCheckResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AccessCheckRequest": {
        "required": [
          "permissions",
          "principal"
        ],
        "type": "object",
        "properties": {
          "permissions": {
            "maxItems": 10000,
            "minItems": 0,
            "type": "array",
            "description": "List of permission checks to perform",
            "items": {
              "$ref": "#/components/schemas/PermissionCheck"
            }
          },
          "principal": {
            "$ref": "#/components/schemas/AuthzPrincipal"
          }
        }
      },
      "PermissionCheck": {
        "required": [
          "permission",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceScope": {
            "$ref": "#/components/schemas/ResourceScope"
          },
          "resourceType": {
            "type": "string"
          },
          "resourceAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "resourceIdentifier": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          }
        }
      },
      "Permission": {
        "required": [
          "action",
          "identifier",
          "name",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "STAGING",
              "EXPERIMENTAL",
              "ACTIVE",
              "DEPRECATED",
              "INACTIVE"
            ]
          },
          "includeInAllRoles": {
            "type": "boolean"
          },
          "allowedScopeLevels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resourceType": {
            "type": "string"
          },
          "action": {
            "type": "string"
          }
        }
      },
      "PermissionResponse": {
        "required": [
          "permission"
        ],
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        }
      },
      "ResponseDTOListPermissionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionResponse"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOSetString": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AccessDeniedError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "detailedMessage": {
            "type": "string"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthzResponseMessage"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/ErrorMetadata"
          },
          "failedPermissionChecks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionCheck"
            }
          }
        }
      },
      "ResponseDTOListRoleAssignmentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignmentResponse"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RoleAssignment": {
        "required": [
          "principal",
          "resourceGroupIdentifier",
          "roleIdentifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "resourceGroupIdentifier": {
            "type": "string"
          },
          "roleIdentifier": {
            "type": "string"
          },
          "principal": {
            "$ref": "#/components/schemas/AuthzPrincipal"
          },
          "disabled": {
            "type": "boolean"
          },
          "managed": {
            "type": "boolean"
          },
          "internal": {
            "type": "boolean",
            "writeOnly": true
          }
        },
        "description": "Role Assignment to validate"
      },
      "RoleAssignmentResponse": {
        "type": "object",
        "properties": {
          "roleAssignment": {
            "$ref": "#/components/schemas/RoleAssignment"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "harnessManaged": {
            "type": "boolean"
          }
        }
      },
      "RoleAssignmentCreateRequest": {
        "required": [
          "roleAssignments"
        ],
        "type": "object",
        "properties": {
          "roleAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignment"
            }
          }
        }
      },
      "ResponseDTORoleAssignmentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RoleAssignmentResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseRoleAssignmentResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignmentResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseRoleAssignmentResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseRoleAssignmentResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RoleAssignmentFilter": {
        "type": "object",
        "properties": {
          "resourceGroupFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on resource group identifiers",
            "items": {
              "type": "string",
              "description": "Filter role assignments based on resource group identifiers"
            }
          },
          "roleFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on role identifiers",
            "items": {
              "type": "string",
              "description": "Filter role assignments based on role identifiers"
            }
          },
          "principalTypeFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on principal type",
            "items": {
              "type": "string",
              "description": "Filter role assignments based on principal type",
              "enum": [
                "USER",
                "USER_GROUP",
                "SERVICE",
                "API_KEY",
                "SERVICE_ACCOUNT"
              ]
            }
          },
          "principalScopeLevelFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on principal scope level",
            "items": {
              "type": "string",
              "description": "Filter role assignments based on principal scope level"
            }
          },
          "principalFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on principals",
            "items": {
              "$ref": "#/components/schemas/AuthzPrincipal"
            }
          },
          "harnessManagedFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on role assignments being harness managed",
            "items": {
              "type": "boolean",
              "description": "Filter role assignments based on role assignments being harness managed"
            }
          },
          "disabledFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on whether they are enabled or disabled",
            "items": {
              "type": "boolean",
              "description": "Filter role assignments based on whether they are enabled or disabled"
            }
          }
        }
      },
      "ResourceGroup": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ResponseDTORoleAssignmentAggregateResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RoleAssignmentAggregateResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Role": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique identifier of the role"
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "permissions": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of the permission identifiers (Subset of the list returned by GET /authz/api/permissions)",
            "items": {
              "type": "string",
              "description": "List of the permission identifiers (Subset of the list returned by GET /authz/api/permissions)"
            }
          },
          "allowedScopeLevels": {
            "uniqueItems": true,
            "type": "array",
            "description": "The scope levels at which this role can be used",
            "items": {
              "type": "string",
              "description": "The scope levels at which this role can be used",
              "enum": [
                "account",
                "organization",
                "project"
              ]
            },
            "enum": [
              "account",
              "organization",
              "project"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Tags"
            },
            "description": "Tags"
          }
        }
      },
      "RoleAssignmentAggregateResponse": {
        "type": "object",
        "properties": {
          "roleAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignment"
            }
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleResponse"
            }
          },
          "resourceGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceGroup"
            }
          }
        }
      },
      "RoleResponse": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "harnessManaged": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AttributeFilter": {
        "type": "object",
        "properties": {
          "attributeName": {
            "type": "string"
          },
          "attributeValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Used to filter resources on their attributes"
      },
      "PageResponseRoleAssignmentAggregate": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignmentAggregate"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PrincipalV2": {
        "type": "object",
        "properties": {
          "scopeLevel": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "USER_GROUP",
              "SERVICE",
              "API_KEY",
              "SERVICE_ACCOUNT"
            ]
          }
        }
      },
      "ResourceFilter": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceSelectorV2"
            }
          },
          "includeAllResources": {
            "type": "boolean"
          }
        },
        "description": "Contains resource filter for a resource group"
      },
      "ResourceGroupV2": {
        "required": [
          "accountIdentifier",
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "allowedScopeLevels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includedScopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeSelector"
            }
          },
          "resourceFilter": {
            "$ref": "#/components/schemas/ResourceFilter"
          }
        },
        "description": "Contains information of Resource Group"
      },
      "ResourceSelectorV2": {
        "required": [
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributeFilter": {
            "$ref": "#/components/schemas/AttributeFilter"
          }
        },
        "description": "Used to specify resources in resource group"
      },
      "ResponseDTOPageResponseRoleAssignmentAggregate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseRoleAssignmentAggregate"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RoleAssignmentAggregate": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "principal": {
            "$ref": "#/components/schemas/PrincipalV2"
          },
          "disabled": {
            "type": "boolean"
          },
          "role": {
            "$ref": "#/components/schemas/RoleResponse"
          },
          "resourceGroup": {
            "$ref": "#/components/schemas/ResourceGroupV2"
          },
          "scope": {
            "$ref": "#/components/schemas/ScopeResponse"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "harnessManaged": {
            "type": "boolean"
          }
        }
      },
      "ScopeResponse": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "accountName": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          }
        }
      },
      "ScopeSelector": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "enum": [
              "EXCLUDING_CHILD_SCOPES",
              "INCLUDING_CHILD_SCOPES"
            ]
          },
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          }
        },
        "description": "Contains information of scope to which resource filter is applied"
      },
      "RoleAssignmentFilterV2": {
        "type": "object",
        "properties": {
          "resourceGroupFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on resource group identifiers",
            "items": {
              "type": "string",
              "description": "Filter role assignments based on resource group identifiers"
            }
          },
          "roleFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on role identifiers",
            "items": {
              "type": "string",
              "description": "Filter role assignments based on role identifiers"
            }
          },
          "scopeFilters": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter role assignments based on scope filters",
            "items": {
              "$ref": "#/components/schemas/ScopeSelector"
            }
          },
          "principalFilter": {
            "$ref": "#/components/schemas/AuthzPrincipal"
          }
        }
      },
      "ResponseDTORoleAssignmentValidationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RoleAssignmentValidationResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RoleAssignmentValidationResponse": {
        "type": "object",
        "properties": {
          "principalValidationResult": {
            "$ref": "#/components/schemas/AuthzValidationResult"
          },
          "roleValidationResult": {
            "$ref": "#/components/schemas/AuthzValidationResult"
          },
          "resourceGroupValidationResult": {
            "$ref": "#/components/schemas/AuthzValidationResult"
          }
        }
      },
      "AuthzValidationResult": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "writeOnly": true
          },
          "errorMessage": {
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "RoleAssignmentValidationRequest": {
        "required": [
          "roleAssignment"
        ],
        "type": "object",
        "properties": {
          "roleAssignment": {
            "$ref": "#/components/schemas/RoleAssignment"
          },
          "validatePrincipal": {
            "type": "boolean",
            "description": "Set it to true if the principal needs to be validated"
          },
          "validateRole": {
            "type": "boolean",
            "description": "Set it to true if the role needs to be validated"
          },
          "validateResourceGroup": {
            "type": "boolean",
            "description": "Set it to true if the resource group needs to be validated"
          }
        }
      },
      "ResponseDTORoleResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RoleResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseRoleResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseRoleResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseRoleResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResourcegroupFailure": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "description": "This is Failure entity as defied in Harness"
      },
      "ResourcegroupError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "detailedMessage": {
            "type": "string"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourcegroupResponseMessage"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/ErrorMetadata"
          }
        },
        "description": "This is Error entity as defined in Harness"
      },
      "ResourcegroupResponseMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "INFO",
              "ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "exception": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "moduleVersion": {
                      "type": "string"
                    },
                    "methodName": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": {
                      "type": "string"
                    },
                    "nativeMethod": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "suppressed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "stackTrace": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "classLoaderName": {
                            "type": "string"
                          },
                          "moduleName": {
                            "type": "string"
                          },
                          "moduleVersion": {
                            "type": "string"
                          },
                          "methodName": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "lineNumber": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "className": {
                            "type": "string"
                          },
                          "nativeMethod": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "localizedMessage": {
                      "type": "string"
                    }
                  }
                }
              },
              "localizedMessage": {
                "type": "string"
              }
            }
          },
          "failureTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXPIRED",
                "DELEGATE_PROVISIONING",
                "CONNECTIVITY",
                "AUTHENTICATION",
                "VERIFICATION_FAILURE",
                "APPLICATION_ERROR",
                "AUTHORIZATION_ERROR",
                "TIMEOUT_ERROR",
                "POLICY_EVALUATION_FAILURE",
                "INPUT_TIMEOUT_FAILURE",
                "APPROVAL_REJECTION",
                "DELEGATE_RESTART"
              ]
            }
          }
        }
      },
      "DynamicResourceSelector": {
        "required": [
          "resourceType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceSelector"
          },
          {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              },
              "includeChildScopes": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ResourcegroupResourceGroup": {
        "required": [
          "accountIdentifier",
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "resourceSelectors": {
            "maxItems": 256,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceSelector"
            }
          },
          "fullScopeSelected": {
            "type": "boolean"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "allowedScopeLevels": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "color": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/ResourcegroupScope"
          }
        },
        "description": "Contains information of Resource Group"
      },
      "ResourceGroupResponse": {
        "required": [
          "resourceGroup"
        ],
        "type": "object",
        "properties": {
          "resourceGroup": {
            "$ref": "#/components/schemas/ResourcegroupResourceGroup"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "harnessManaged": {
            "type": "boolean"
          }
        }
      },
      "ResourceSelector": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ResourceSelectorByScope": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceSelector"
          },
          {
            "type": "object",
            "properties": {
              "includeChildScopes": {
                "type": "boolean"
              },
              "scope": {
                "$ref": "#/components/schemas/ResourcegroupScope"
              }
            }
          }
        ]
      },
      "ResponseDTOResourceGroupResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ResourceGroupResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResourcegroupScope": {
        "required": [
          "accountIdentifier"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          }
        }
      },
      "StaticResourceSelector": {
        "required": [
          "identifiers",
          "resourceType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceSelector"
          },
          {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              },
              "identifiers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ResourceGroupRequest": {
        "required": [
          "resourcegroup"
        ],
        "type": "object",
        "properties": {
          "resourcegroup": {
            "$ref": "#/components/schemas/ResourcegroupResourceGroup"
          }
        }
      },
      "PageResponseResourceGroupResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceGroupResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseResourceGroupResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseResourceGroupResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResourceGroupFilter": {
        "required": [
          "accountIdentifier"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Filter by account identifier"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Filter by organization identifier"
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Filter by project identifier"
          },
          "searchTerm": {
            "type": "string",
            "description": "Filter resource group matching by identifier/name"
          },
          "identifierFilter": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter by resource group identifiers",
            "items": {
              "type": "string",
              "description": "Filter by resource group identifiers"
            }
          },
          "resourceSelectorFilterList": {
            "uniqueItems": true,
            "type": "array",
            "description": "Filter based on whether it has a particular resource",
            "items": {
              "$ref": "#/components/schemas/ResourceSelectorFilter"
            }
          },
          "managedFilter": {
            "type": "string",
            "description": "Filter based on whether the resource group is Harness managed",
            "enum": [
              "NO_FILTER",
              "ONLY_MANAGED",
              "ONLY_CUSTOM"
            ]
          }
        },
        "description": "Contains information of filters for Resource Group"
      },
      "ResourceSelectorFilter": {
        "required": [
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string"
          },
          "resourceIdentifier": {
            "type": "string"
          }
        },
        "description": "Filter based on whether it has a particular resource"
      },
      "ResourceType": {
        "required": [
          "resourceTypes"
        ],
        "type": "object",
        "properties": {
          "resourceTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceType"
            }
          }
        },
        "description": "Contains list of Resource Type"
      },
      "ResponseDTOResourceType": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResourceGroupV2Response": {
        "required": [
          "resourceGroup"
        ],
        "type": "object",
        "properties": {
          "resourceGroup": {
            "$ref": "#/components/schemas/ResourceGroupV2"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "harnessManaged": {
            "type": "boolean"
          }
        },
        "description": "This has details of the Resource Group along with its metadata."
      },
      "ResponseDTOResourceGroupV2Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ResourceGroupV2Response"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResourceGroupV2Request": {
        "required": [
          "resourceGroup"
        ],
        "type": "object",
        "properties": {
          "resourceGroup": {
            "$ref": "#/components/schemas/ResourceGroupV2"
          }
        },
        "description": "Contains resource group request"
      },
      "PageResponseResourceGroupV2Response": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceGroupV2Response"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseResourceGroupV2Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseResourceGroupV2Response"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CcmError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "detailedMessage": {
            "type": "string"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CcmResponseMessage"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/ErrorMetadata"
          }
        },
        "description": "This is Error entity as defined in Harness"
      },
      "CcmResponseMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "INFO",
              "ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "exception": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "moduleVersion": {
                      "type": "string"
                    },
                    "methodName": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": {
                      "type": "string"
                    },
                    "nativeMethod": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "suppressed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "stackTrace": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "classLoaderName": {
                            "type": "string"
                          },
                          "moduleName": {
                            "type": "string"
                          },
                          "moduleVersion": {
                            "type": "string"
                          },
                          "methodName": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "lineNumber": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "className": {
                            "type": "string"
                          },
                          "nativeMethod": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "localizedMessage": {
                      "type": "string"
                    }
                  }
                }
              },
              "localizedMessage": {
                "type": "string"
              }
            }
          },
          "failureTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXPIRED",
                "DELEGATE_PROVISIONING",
                "CONNECTIVITY",
                "AUTHENTICATION",
                "VERIFICATION_FAILURE",
                "APPLICATION_ERROR",
                "AUTHORIZATION_ERROR",
                "TIMEOUT_ERROR",
                "POLICY_EVALUATION_FAILURE",
                "INPUT_TIMEOUT_FAILURE",
                "APPROVAL_REJECTION"
              ]
            }
          }
        }
      },
      "AnomalySummary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "count": {
            "type": "number",
            "format": "double"
          },
          "actualCost": {
            "type": "number",
            "format": "double"
          },
          "expectedCost": {
            "type": "number",
            "format": "double"
          },
          "anomalousCost": {
            "type": "number",
            "format": "double"
          },
          "costImpact": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "This object details summary of an anomaly query result"
      },
      "ResponseDTOListAnomalySummary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalySummary"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AnomalyFilterProperties": {
        "type": "object",
        "properties": {
          "k8sClusterNames": {
            "type": "array",
            "description": "This is the list of Cluster Names on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of Cluster Names on which filter will be applied."
            }
          },
          "k8sNamespaces": {
            "type": "array",
            "description": "This is the list of Namespaces on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of Namespaces on which filter will be applied."
            }
          },
          "k8sWorkloadNames": {
            "type": "array",
            "description": "This is the list of Workload Names on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of Workload Names on which filter will be applied."
            }
          },
          "gcpProjects": {
            "type": "array",
            "description": "This is the list of GCP Projects on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of GCP Projects on which filter will be applied."
            }
          },
          "gcpProducts": {
            "type": "array",
            "description": "This is the list of GCP Products on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of GCP Products on which filter will be applied."
            }
          },
          "gcpSKUDescriptions": {
            "type": "array",
            "description": "This is the list of GCP SKU Descriptions on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of GCP SKU Descriptions on which filter will be applied."
            }
          },
          "awsAccounts": {
            "type": "array",
            "description": "This is the list of AWS Accounts on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of AWS Accounts on which filter will be applied."
            }
          },
          "awsServices": {
            "type": "array",
            "description": "This is the list of AWS Services on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of AWS Services on which filter will be applied."
            }
          },
          "awsUsageTypes": {
            "type": "array",
            "description": "This is the list of AWS Usage Types on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of AWS Usage Types on which filter will be applied."
            }
          },
          "azureSubscriptionGuids": {
            "type": "array",
            "description": "This is the list of Azure Subscription Guids on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of Azure Subscription Guids on which filter will be applied."
            }
          },
          "azureResourceGroups": {
            "type": "array",
            "description": "This is the list of Azure Resource Groups on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of Azure Resource Groups on which filter will be applied."
            }
          },
          "azureMeterCategories": {
            "type": "array",
            "description": "This is the list of Azure Meter Categories on which filter will be applied.",
            "items": {
              "type": "string",
              "description": "This is the list of Azure Meter Categories on which filter will be applied."
            }
          },
          "minActualAmount": {
            "type": "number",
            "description": "Fetch anomalies with Actual Amount greater-than or equal-to minActualAmount",
            "format": "double"
          },
          "minAnomalousSpend": {
            "type": "number",
            "description": "Fetch anomalies with Anomalous Spend greater-than or equal-to minAnomalousSpend",
            "format": "double"
          },
          "timeFilters": {
            "type": "array",
            "description": "List of filters to be applied on Anomaly Time",
            "items": {
              "$ref": "#/components/schemas/CCMTimeFilter"
            }
          },
          "orderBy": {
            "type": "array",
            "description": "The order by condition for anomaly query",
            "items": {
              "$ref": "#/components/schemas/CCMSort"
            }
          },
          "groupBy": {
            "type": "array",
            "description": "The group by clause for anomaly query",
            "items": {
              "$ref": "#/components/schemas/CCMGroupBy"
            }
          },
          "aggregations": {
            "type": "array",
            "description": "The aggregations for anomaly query",
            "items": {
              "$ref": "#/components/schemas/CCMAggregation"
            }
          },
          "searchText": {
            "type": "array",
            "description": "The search text entered to filter out rows",
            "items": {
              "type": "string",
              "description": "The search text entered to filter out rows"
            }
          },
          "offset": {
            "type": "integer",
            "description": "Query Offset",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "description": "Query Limit",
            "format": "int32"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Filter tags as a key-value pair."
            },
            "description": "Filter tags as a key-value pair."
          },
          "filterType": {
            "type": "string",
            "enum": [
              "Anomaly"
            ]
          }
        },
        "description": "Properties of the Anomaly Filter defined in Harness"
      },
      "CCMAggregation": {
        "type": "object",
        "properties": {
          "operationType": {
            "type": "string",
            "enum": [
              "SUM",
              "MAX",
              "MIN",
              "AVG",
              "COUNT"
            ]
          },
          "field": {
            "type": "string",
            "description": "List of all possible Fields",
            "enum": [
              "PERSPECTIVE_ID",
              "WORKLOAD",
              "WORKLOAD_TYPE",
              "CLUSTER_ID",
              "CLUSTER_NAME",
              "CLUSTER_NAMESPACE",
              "CLUSTER_NAMESPACE_ID",
              "CLUSTER_WORKLOAD",
              "CLUSTER_WORKLOAD_ID",
              "CLUSTER_NODE",
              "CLUSTER_STORAGE",
              "CLUSTER_APPLICATION",
              "CLUSTER_ENVIRONMENT",
              "CLUSTER_SERVICE",
              "CLUSTER_CLOUD_PROVIDER",
              "CLUSTER_ECS_SERVICE",
              "CLUSTER_ECS_SERVICE_ID",
              "CLUSTER_ECS_TASK",
              "CLUSTER_ECS_TASK_ID",
              "CLUSTER_ECS_LAUNCH_TYPE",
              "CLUSTER_ECS_LAUNCH_TYPE_ID",
              "NAMESPACE",
              "GCP_PRODUCT",
              "GCP_PROJECT",
              "GCP_SKU_ID",
              "GCP_SKU_DESCRIPTION",
              "AWS_ACCOUNT",
              "AWS_SERVICE",
              "AWS_INSTANCE_TYPE",
              "AWS_USAGE_TYPE",
              "AZURE_SUBSCRIPTION_GUID",
              "AZURE_METER_NAME",
              "AZURE_METER_CATEGORY",
              "AZURE_METER_SUBCATEGORY",
              "AZURE_RESOURCE_ID",
              "AZURE_RESOURCE_GROUP_NAME",
              "AZURE_RESOURCE_TYPE",
              "AZURE_RESOURCE",
              "AZURE_SERVICE_NAME",
              "AZURE_SERVICE_TIER",
              "AZURE_INSTANCE_ID",
              "AZURE_SUBSCRIPTION_NAME",
              "AZURE_PUBLISHER_NAME",
              "AZURE_PUBLISHER_TYPE",
              "AZURE_RESERVATION_ID",
              "AZURE_RESERVATION_NAME",
              "AZURE_FREQUENCY",
              "COMMON_PRODUCT",
              "COMMON_REGION",
              "COMMON_NONE",
              "CLOUD_PROVIDER",
              "STATUS",
              "REGION",
              "ANOMALY_TIME",
              "ACTUAL_COST",
              "EXPECTED_COST",
              "ANOMALOUS_SPEND",
              "COST_IMPACT",
              "TOTAL_COST",
              "IDLE_COST",
              "UNALLOCATED_COST",
              "ALL",
              "RULE_NAME",
              "RULE_SET_NAME"
            ]
          }
        },
        "description": "Fields which will be aggregated in the response"
      },
      "CCMGroupBy": {
        "type": "object",
        "properties": {
          "groupByField": {
            "type": "string",
            "description": "List of all possible Fields",
            "enum": [
              "PERSPECTIVE_ID",
              "WORKLOAD",
              "WORKLOAD_TYPE",
              "CLUSTER_ID",
              "CLUSTER_NAME",
              "CLUSTER_NAMESPACE",
              "CLUSTER_NAMESPACE_ID",
              "CLUSTER_WORKLOAD",
              "CLUSTER_WORKLOAD_ID",
              "CLUSTER_NODE",
              "CLUSTER_STORAGE",
              "CLUSTER_APPLICATION",
              "CLUSTER_ENVIRONMENT",
              "CLUSTER_SERVICE",
              "CLUSTER_CLOUD_PROVIDER",
              "CLUSTER_ECS_SERVICE",
              "CLUSTER_ECS_SERVICE_ID",
              "CLUSTER_ECS_TASK",
              "CLUSTER_ECS_TASK_ID",
              "CLUSTER_ECS_LAUNCH_TYPE",
              "CLUSTER_ECS_LAUNCH_TYPE_ID",
              "NAMESPACE",
              "GCP_PRODUCT",
              "GCP_PROJECT",
              "GCP_SKU_ID",
              "GCP_SKU_DESCRIPTION",
              "AWS_ACCOUNT",
              "AWS_SERVICE",
              "AWS_INSTANCE_TYPE",
              "AWS_USAGE_TYPE",
              "AZURE_SUBSCRIPTION_GUID",
              "AZURE_METER_NAME",
              "AZURE_METER_CATEGORY",
              "AZURE_METER_SUBCATEGORY",
              "AZURE_RESOURCE_ID",
              "AZURE_RESOURCE_GROUP_NAME",
              "AZURE_RESOURCE_TYPE",
              "AZURE_RESOURCE",
              "AZURE_SERVICE_NAME",
              "AZURE_SERVICE_TIER",
              "AZURE_INSTANCE_ID",
              "AZURE_SUBSCRIPTION_NAME",
              "AZURE_PUBLISHER_NAME",
              "AZURE_PUBLISHER_TYPE",
              "AZURE_RESERVATION_ID",
              "AZURE_RESERVATION_NAME",
              "AZURE_FREQUENCY",
              "COMMON_PRODUCT",
              "COMMON_REGION",
              "COMMON_NONE",
              "CLOUD_PROVIDER",
              "STATUS",
              "REGION",
              "ANOMALY_TIME",
              "ACTUAL_COST",
              "EXPECTED_COST",
              "ANOMALOUS_SPEND",
              "COST_IMPACT",
              "TOTAL_COST",
              "IDLE_COST",
              "UNALLOCATED_COST",
              "ALL",
              "RULE_NAME",
              "RULE_SET_NAME"
            ]
          }
        },
        "description": "The group by clause for anomaly query"
      },
      "CCMSort": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "List of all possible Fields",
            "enum": [
              "PERSPECTIVE_ID",
              "WORKLOAD",
              "WORKLOAD_TYPE",
              "CLUSTER_ID",
              "CLUSTER_NAME",
              "CLUSTER_NAMESPACE",
              "CLUSTER_NAMESPACE_ID",
              "CLUSTER_WORKLOAD",
              "CLUSTER_WORKLOAD_ID",
              "CLUSTER_NODE",
              "CLUSTER_STORAGE",
              "CLUSTER_APPLICATION",
              "CLUSTER_ENVIRONMENT",
              "CLUSTER_SERVICE",
              "CLUSTER_CLOUD_PROVIDER",
              "CLUSTER_ECS_SERVICE",
              "CLUSTER_ECS_SERVICE_ID",
              "CLUSTER_ECS_TASK",
              "CLUSTER_ECS_TASK_ID",
              "CLUSTER_ECS_LAUNCH_TYPE",
              "CLUSTER_ECS_LAUNCH_TYPE_ID",
              "NAMESPACE",
              "GCP_PRODUCT",
              "GCP_PROJECT",
              "GCP_SKU_ID",
              "GCP_SKU_DESCRIPTION",
              "AWS_ACCOUNT",
              "AWS_SERVICE",
              "AWS_INSTANCE_TYPE",
              "AWS_USAGE_TYPE",
              "AZURE_SUBSCRIPTION_GUID",
              "AZURE_METER_NAME",
              "AZURE_METER_CATEGORY",
              "AZURE_METER_SUBCATEGORY",
              "AZURE_RESOURCE_ID",
              "AZURE_RESOURCE_GROUP_NAME",
              "AZURE_RESOURCE_TYPE",
              "AZURE_RESOURCE",
              "AZURE_SERVICE_NAME",
              "AZURE_SERVICE_TIER",
              "AZURE_INSTANCE_ID",
              "AZURE_SUBSCRIPTION_NAME",
              "AZURE_PUBLISHER_NAME",
              "AZURE_PUBLISHER_TYPE",
              "AZURE_RESERVATION_ID",
              "AZURE_RESERVATION_NAME",
              "AZURE_FREQUENCY",
              "COMMON_PRODUCT",
              "COMMON_REGION",
              "COMMON_NONE",
              "CLOUD_PROVIDER",
              "STATUS",
              "REGION",
              "ANOMALY_TIME",
              "ACTUAL_COST",
              "EXPECTED_COST",
              "ANOMALOUS_SPEND",
              "COST_IMPACT",
              "TOTAL_COST",
              "IDLE_COST",
              "UNALLOCATED_COST",
              "ALL",
              "RULE_NAME",
              "RULE_SET_NAME"
            ]
          },
          "order": {
            "type": "string",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ]
          }
        },
        "description": "The order by condition for Rule query"
      },
      "CCMTimeFilter": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string",
            "description": "List of all possible Operators",
            "enum": [
              "NOT_IN",
              "IN",
              "EQUALS",
              "NOT_NULL",
              "NULL",
              "LIKE",
              "GREATER_THAN",
              "LESS_THAN",
              "GREATER_THAN_EQUALS_TO",
              "LESS_THAN_EQUALS_TO",
              "AFTER",
              "BEFORE"
            ]
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "List of filters to be applied on Anomaly Time"
      },
      "FilterStats": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Filter values available for a particular column/key."
      },
      "ResponseDTOListFilterStats": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterStats"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AnomalyData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "anomalyRelativeTime": {
            "type": "string"
          },
          "actualAmount": {
            "type": "number",
            "format": "double"
          },
          "expectedAmount": {
            "type": "number",
            "format": "double"
          },
          "anomalousSpend": {
            "type": "number",
            "format": "double"
          },
          "anomalousSpendPercentage": {
            "type": "number",
            "format": "double"
          },
          "resourceName": {
            "type": "string"
          },
          "resourceInfo": {
            "type": "string"
          },
          "entity": {
            "$ref": "#/components/schemas/EntityInfo"
          },
          "details": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "statusRelativeTime": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "cloudProvider": {
            "type": "string"
          },
          "anomalyScore": {
            "type": "number",
            "format": "double"
          },
          "userFeedback": {
            "type": "string",
            "enum": [
              "TRUE_ANOMALY",
              "FALSE_ANOMALY",
              "NOT_RESPONDED"
            ]
          }
        },
        "description": "This object contains details of a cost anomaly"
      },
      "EntityInfo": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "clusterName": {
            "type": "string"
          },
          "clusterId": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "workloadName": {
            "type": "string"
          },
          "workloadType": {
            "type": "string"
          },
          "gcpProjectId": {
            "type": "string"
          },
          "gcpProduct": {
            "type": "string"
          },
          "gcpSKUId": {
            "type": "string"
          },
          "gcpSKUDescription": {
            "type": "string"
          },
          "awsUsageAccountId": {
            "type": "string"
          },
          "awsServiceCode": {
            "type": "string"
          },
          "awsInstancetype": {
            "type": "string"
          },
          "awsUsageType": {
            "type": "string"
          },
          "azureSubscriptionGuid": {
            "type": "string"
          },
          "azureResourceGroup": {
            "type": "string"
          },
          "azureMeterCategory": {
            "type": "string"
          },
          "azureServiceName": {
            "type": "string"
          },
          "azureInstanceId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListAnomalyData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnomalyData"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PerspectiveAnomalyData": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "anomalyCount": {
            "type": "integer",
            "format": "int32"
          },
          "actualCost": {
            "type": "number",
            "format": "double"
          },
          "differenceFromExpectedCost": {
            "type": "number",
            "format": "double"
          },
          "associatedResources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityInfo"
            }
          },
          "resourceType": {
            "type": "string"
          }
        },
        "description": "This object contains the Anomalies associated with a perspective"
      },
      "ResponseDTOListPerspectiveAnomalyData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerspectiveAnomalyData"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PerspectiveQueryDTO": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "description": "The filters for perspective query",
            "items": {
              "$ref": "#/components/schemas/QLCEViewFilterWrapper"
            }
          },
          "groupBy": {
            "type": "array",
            "description": "The group by clause for perspective query",
            "items": {
              "$ref": "#/components/schemas/QLCEViewGroupBy"
            }
          }
        },
        "description": "The query object for perspective cost anomalies"
      },
      "QLCEViewFieldInput": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string"
          },
          "fieldName": {
            "type": "string"
          },
          "identifier": {
            "type": "string",
            "description": "Perspective filter Category, CLUSTER means Kubernetes",
            "enum": [
              "CLUSTER",
              "AWS",
              "GCP",
              "AZURE",
              "COMMON",
              "CUSTOM",
              "BUSINESS_MAPPING",
              "LABEL"
            ]
          },
          "identifierName": {
            "type": "string"
          }
        }
      },
      "QLCEViewFilter": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/QLCEViewFieldInput"
          },
          "operator": {
            "type": "string",
            "enum": [
              "NOT_IN",
              "IN",
              "EQUALS",
              "NOT_NULL",
              "NULL",
              "LIKE",
              "SEARCH"
            ]
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "QLCEViewFilterWrapper": {
        "type": "object",
        "properties": {
          "idFilter": {
            "$ref": "#/components/schemas/QLCEViewFilter"
          },
          "timeFilter": {
            "$ref": "#/components/schemas/QLCEViewTimeFilter"
          },
          "viewMetadataFilter": {
            "$ref": "#/components/schemas/QLCEViewMetadataFilter"
          },
          "ruleFilter": {
            "$ref": "#/components/schemas/QLCEViewRule"
          }
        },
        "description": "Get Recommendations for a perspective"
      },
      "QLCEViewGroupBy": {
        "type": "object",
        "properties": {
          "entityGroupBy": {
            "$ref": "#/components/schemas/QLCEViewFieldInput"
          },
          "timeTruncGroupBy": {
            "$ref": "#/components/schemas/QLCEViewTimeTruncGroupBy"
          }
        },
        "description": "The group by clause for perspective query"
      },
      "QLCEViewMetadataFilter": {
        "type": "object",
        "properties": {
          "viewId": {
            "type": "string"
          },
          "isPreview": {
            "type": "boolean"
          },
          "preview": {
            "type": "boolean"
          }
        }
      },
      "QLCEViewRule": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QLCEViewFilter"
            }
          }
        }
      },
      "QLCEViewTimeFilter": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/QLCEViewFieldInput"
          },
          "operator": {
            "type": "string",
            "enum": [
              "AFTER",
              "BEFORE"
            ]
          },
          "value": {
            "type": "number"
          }
        }
      },
      "QLCEViewTimeTruncGroupBy": {
        "type": "object",
        "properties": {
          "resolution": {
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "MONTH",
              "WEEK",
              "QUARTER",
              "YEAR"
            ]
          }
        }
      },
      "AnomalyFeedback": {
        "type": "object",
        "properties": {
          "feedback": {
            "type": "string",
            "description": "Anomaly feedback",
            "enum": [
              "TRUE_ANOMALY",
              "FALSE_ANOMALY",
              "NOT_RESPONDED"
            ]
          }
        },
        "description": "The query object for cost anomaly feedback"
      },
      "BIDashboardSummary": {
        "type": "object",
        "properties": {
          "dashboardName": {
            "type": "string",
            "description": "Name of the BI Dashboard"
          },
          "dashboardId": {
            "type": "string",
            "description": "Static Dashboard ID used in the dashboard's URL"
          },
          "cloudProvider": {
            "type": "string",
            "description": "Cloud Provider associated with the dashboard"
          },
          "description": {
            "type": "string",
            "description": "Brief Description about the dashboard"
          },
          "serviceType": {
            "type": "string",
            "description": "Service Type"
          },
          "redirectionURL": {
            "type": "string",
            "description": "URL of the dashboard page to which user should be redirected"
          }
        },
        "description": "BI Dashboard Summary"
      },
      "ResponseDTOListBIDashboardSummary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BIDashboardSummary"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AlertThreshold": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "format": "double"
          },
          "basedOn": {
            "type": "string",
            "description": "Whether the alert is based on Actual cost or next 30 days Forecasted Cost",
            "enum": [
              "ACTUAL_COST",
              "FORECASTED_COST"
            ]
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "slackWebhooks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "alertsSent": {
            "type": "integer",
            "format": "int32"
          },
          "crossedAt": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "A description of a single Alert"
      },
      "ApplicationBudgetScope": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BudgetScope"
          },
          {
            "type": "object",
            "properties": {
              "applicationIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "environmentType": {
                "type": "string",
                "enum": [
                  "PROD",
                  "NON_PROD",
                  "ALL"
                ]
              }
            }
          }
        ]
      },
      "Budget": {
        "required": [
          "accountId",
          "name"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "name": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/BudgetScope"
          },
          "type": {
            "type": "string",
            "description": "Whether the Budget is based on a specified amount or based on previous month's actual spend",
            "enum": [
              "SPECIFIED_AMOUNT",
              "PREVIOUS_MONTH_SPEND",
              "PREVIOUS_PERIOD_SPEND"
            ]
          },
          "budgetMonthlyBreakdown": {
            "$ref": "#/components/schemas/BudgetMonthlyBreakdown"
          },
          "budgetAmount": {
            "type": "number",
            "format": "double"
          },
          "period": {
            "type": "string",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "YEARLY"
            ]
          },
          "growthRate": {
            "type": "number",
            "format": "double"
          },
          "actualCost": {
            "type": "number",
            "format": "double"
          },
          "forecastCost": {
            "type": "number",
            "format": "double"
          },
          "lastMonthCost": {
            "type": "number",
            "format": "double"
          },
          "alertThresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertThreshold"
            }
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userGroupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parentBudgetGroupId": {
            "type": "string"
          },
          "notifyOnSlack": {
            "type": "boolean"
          },
          "isNgBudget": {
            "type": "boolean",
            "writeOnly": true
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "budgetHistory": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BudgetCostData"
            }
          },
          "disableCurrencyWarning": {
            "type": "boolean"
          },
          "ngBudget": {
            "type": "boolean"
          }
        },
        "description": "The Cloud Cost Budget definition"
      },
      "BudgetCostData": {
        "type": "object",
        "properties": {
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "actualCost": {
            "type": "number",
            "format": "double"
          },
          "forecastCost": {
            "type": "number",
            "format": "double"
          },
          "budgeted": {
            "type": "number",
            "format": "double"
          },
          "budgetVariance": {
            "type": "number",
            "format": "double"
          },
          "budgetVariancePercentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "BudgetMonthlyBreakdown": {
        "type": "object",
        "properties": {
          "budgetBreakdown": {
            "type": "string",
            "description": "Whether the Yearly budget breakdown is yearly or monthly",
            "enum": [
              "YEARLY",
              "MONTHLY"
            ]
          },
          "budgetMonthlyAmount": {
            "type": "array",
            "description": "Budgeted monthly amount for yearly budget",
            "items": {
              "$ref": "#/components/schemas/ValueDataPoint"
            }
          },
          "actualMonthlyCost": {
            "type": "array",
            "description": "Actual monthly cost for yearly budget",
            "items": {
              "type": "number",
              "description": "Actual monthly cost for yearly budget",
              "format": "double"
            }
          },
          "forecastMonthlyCost": {
            "type": "array",
            "description": "Forecasted monthly cost for yearly budget",
            "items": {
              "type": "number",
              "description": "Forecasted monthly cost for yearly budget",
              "format": "double"
            }
          },
          "yearlyLastPeriodCost": {
            "type": "array",
            "description": "Yearly monthly cost for last year budget",
            "items": {
              "type": "number",
              "description": "Yearly monthly cost for last year budget",
              "format": "double"
            }
          }
        },
        "description": "The budget monthly breakdown of a Yearly Budget"
      },
      "BudgetScope": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "budgetScopeType": {
            "type": "string"
          },
          "entityIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "entityNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "description": "The scope in which the Budget was created",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ClusterBudgetScope": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BudgetScope"
          },
          {
            "type": "object",
            "properties": {
              "clusterIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "PerspectiveBudgetScope": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BudgetScope"
          },
          {
            "type": "object",
            "properties": {
              "viewId": {
                "type": "string"
              },
              "viewName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ResponseDTOBudget": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Budget"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ValueDataPoint": {
        "type": "object",
        "properties": {
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "BudgetData": {
        "type": "object",
        "properties": {
          "costData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetCostData"
            }
          },
          "forecastCost": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "This object contains the Cost Data associated with a Budget"
      },
      "ResponseDTOBudgetData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BudgetData"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListBudget": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Budget"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CcmK8sMetaInfo": {
        "type": "object",
        "properties": {
          "clusterId": {
            "type": "string"
          },
          "clusterName": {
            "type": "string"
          },
          "ccmk8sConnectorId": {
            "type": "string"
          },
          "visibility": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optimisation": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CcmK8sMetaInfoResponseDTO": {
        "type": "object",
        "properties": {
          "ccmK8sMeta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CcmK8sMetaInfo"
            }
          }
        }
      },
      "ResponseDTOCcmK8sMetaInfoResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CcmK8sMetaInfoResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CcmK8sMetaDTO": {
        "type": "object",
        "properties": {
          "ccmK8sConnectorId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CostOverview": {
        "type": "object",
        "properties": {
          "Trend": {
            "type": "number",
            "description": "Cost trend"
          },
          "Cost": {
            "type": "number",
            "description": "Total cost"
          }
        },
        "description": "Overview of the cost."
      },
      "ResponseDTOCostOverview": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CostOverview"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CostDetailsQueryParams": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "description": "Filters to be applied on the response.",
            "items": {
              "$ref": "#/components/schemas/FieldFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "description": "Fields on which the response will be grouped by.",
            "items": {
              "type": "string",
              "description": "List of all possible Fields",
              "enum": [
                "PERSPECTIVE_ID",
                "WORKLOAD",
                "WORKLOAD_TYPE",
                "CLUSTER_ID",
                "CLUSTER_NAME",
                "CLUSTER_NAMESPACE",
                "CLUSTER_NAMESPACE_ID",
                "CLUSTER_WORKLOAD",
                "CLUSTER_WORKLOAD_ID",
                "CLUSTER_NODE",
                "CLUSTER_STORAGE",
                "CLUSTER_APPLICATION",
                "CLUSTER_ENVIRONMENT",
                "CLUSTER_SERVICE",
                "CLUSTER_CLOUD_PROVIDER",
                "CLUSTER_ECS_SERVICE",
                "CLUSTER_ECS_SERVICE_ID",
                "CLUSTER_ECS_TASK",
                "CLUSTER_ECS_TASK_ID",
                "CLUSTER_ECS_LAUNCH_TYPE",
                "CLUSTER_ECS_LAUNCH_TYPE_ID",
                "NAMESPACE",
                "GCP_PRODUCT",
                "GCP_PROJECT",
                "GCP_SKU_ID",
                "GCP_SKU_DESCRIPTION",
                "AWS_ACCOUNT",
                "AWS_SERVICE",
                "AWS_INSTANCE_TYPE",
                "AWS_USAGE_TYPE",
                "AZURE_SUBSCRIPTION_GUID",
                "AZURE_METER_NAME",
                "AZURE_METER_CATEGORY",
                "AZURE_METER_SUBCATEGORY",
                "AZURE_RESOURCE_ID",
                "AZURE_RESOURCE_GROUP_NAME",
                "AZURE_RESOURCE_TYPE",
                "AZURE_RESOURCE",
                "AZURE_SERVICE_NAME",
                "AZURE_SERVICE_TIER",
                "AZURE_INSTANCE_ID",
                "AZURE_SUBSCRIPTION_NAME",
                "AZURE_PUBLISHER_NAME",
                "AZURE_PUBLISHER_TYPE",
                "AZURE_RESERVATION_ID",
                "AZURE_RESERVATION_NAME",
                "AZURE_FREQUENCY",
                "COMMON_PRODUCT",
                "COMMON_REGION",
                "COMMON_NONE",
                "CLOUD_PROVIDER",
                "STATUS",
                "REGION",
                "ANOMALY_TIME",
                "ACTUAL_COST",
                "EXPECTED_COST",
                "ANOMALOUS_SPEND",
                "COST_IMPACT",
                "TOTAL_COST",
                "IDLE_COST",
                "UNALLOCATED_COST",
                "ALL",
                "RULE_NAME",
                "RULE_SET_NAME"
              ]
            }
          },
          "timeResolution": {
            "type": "string",
            "description": "Only applicable for Time Series Endpoints, defaults to DAY",
            "enum": [
              "HOUR",
              "DAY",
              "MONTH",
              "WEEK",
              "QUARTER",
              "YEAR"
            ]
          },
          "limit": {
            "type": "integer",
            "description": "Limit on the number of cost values returned, 0 by default.",
            "format": "int32"
          },
          "sortOrder": {
            "type": "string",
            "description": "Order of sorting on cost, Descending by default.",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ]
          },
          "offset": {
            "type": "integer",
            "description": "Offset on the cost values returned, 10 by default.",
            "format": "int32"
          },
          "skipRoundOff": {
            "type": "boolean",
            "description": "Skip Rounding off the cost values returned, false by default."
          }
        },
        "description": "Common query parameters for all cost details APIs"
      },
      "FieldFilter": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "List of all possible Fields",
            "enum": [
              "PERSPECTIVE_ID",
              "WORKLOAD",
              "WORKLOAD_TYPE",
              "CLUSTER_ID",
              "CLUSTER_NAME",
              "CLUSTER_NAMESPACE",
              "CLUSTER_NAMESPACE_ID",
              "CLUSTER_WORKLOAD",
              "CLUSTER_WORKLOAD_ID",
              "CLUSTER_NODE",
              "CLUSTER_STORAGE",
              "CLUSTER_APPLICATION",
              "CLUSTER_ENVIRONMENT",
              "CLUSTER_SERVICE",
              "CLUSTER_CLOUD_PROVIDER",
              "CLUSTER_ECS_SERVICE",
              "CLUSTER_ECS_SERVICE_ID",
              "CLUSTER_ECS_TASK",
              "CLUSTER_ECS_TASK_ID",
              "CLUSTER_ECS_LAUNCH_TYPE",
              "CLUSTER_ECS_LAUNCH_TYPE_ID",
              "NAMESPACE",
              "GCP_PRODUCT",
              "GCP_PROJECT",
              "GCP_SKU_ID",
              "GCP_SKU_DESCRIPTION",
              "AWS_ACCOUNT",
              "AWS_SERVICE",
              "AWS_INSTANCE_TYPE",
              "AWS_USAGE_TYPE",
              "AZURE_SUBSCRIPTION_GUID",
              "AZURE_METER_NAME",
              "AZURE_METER_CATEGORY",
              "AZURE_METER_SUBCATEGORY",
              "AZURE_RESOURCE_ID",
              "AZURE_RESOURCE_GROUP_NAME",
              "AZURE_RESOURCE_TYPE",
              "AZURE_RESOURCE",
              "AZURE_SERVICE_NAME",
              "AZURE_SERVICE_TIER",
              "AZURE_INSTANCE_ID",
              "AZURE_SUBSCRIPTION_NAME",
              "AZURE_PUBLISHER_NAME",
              "AZURE_PUBLISHER_TYPE",
              "AZURE_RESERVATION_ID",
              "AZURE_RESERVATION_NAME",
              "AZURE_FREQUENCY",
              "COMMON_PRODUCT",
              "COMMON_REGION",
              "COMMON_NONE",
              "CLOUD_PROVIDER",
              "STATUS",
              "REGION",
              "ANOMALY_TIME",
              "ACTUAL_COST",
              "EXPECTED_COST",
              "ANOMALOUS_SPEND",
              "COST_IMPACT",
              "TOTAL_COST",
              "IDLE_COST",
              "UNALLOCATED_COST",
              "ALL",
              "RULE_NAME",
              "RULE_SET_NAME"
            ]
          },
          "operator": {
            "type": "string",
            "description": "List of all possible Operators",
            "enum": [
              "NOT_IN",
              "IN",
              "EQUALS",
              "NOT_NULL",
              "NULL",
              "LIKE",
              "GREATER_THAN",
              "LESS_THAN",
              "GREATER_THAN_EQUALS_TO",
              "LESS_THAN_EQUALS_TO",
              "AFTER",
              "BEFORE"
            ]
          },
          "Values": {
            "type": "array",
            "description": "List of all values of the filter.",
            "items": {
              "type": "string",
              "description": "List of all values of the filter."
            }
          }
        },
        "description": "Filters return values as per the field, operator & List of string values provided"
      },
      "CCMEcsEntity": {
        "type": "object",
        "properties": {
          "launchType": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          }
        }
      },
      "CCMK8sEntity": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string"
          },
          "workload": {
            "type": "string"
          },
          "selectedLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/K8sLabel"
            }
          }
        }
      },
      "ClusterCostDetails": {
        "type": "object",
        "properties": {
          "totalCost": {
            "type": "number",
            "format": "double"
          },
          "idleCost": {
            "type": "number",
            "format": "double"
          },
          "unallocatedCost": {
            "type": "number",
            "format": "double"
          },
          "clusterType": {
            "type": "string"
          },
          "cluster": {
            "type": "string"
          },
          "clusterId": {
            "type": "string"
          },
          "k8s": {
            "$ref": "#/components/schemas/CCMK8sEntity"
          },
          "ecs": {
            "$ref": "#/components/schemas/CCMEcsEntity"
          }
        },
        "description": "Details of cluster cost"
      },
      "K8sLabel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListClusterCostDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterCostDetails"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ClusterCostDetailsQueryParams": {
        "type": "object",
        "properties": {
          "aggregations": {
            "type": "array",
            "description": "Fields which will be aggregated in the response",
            "items": {
              "$ref": "#/components/schemas/CCMAggregation"
            }
          },
          "filters": {
            "type": "array",
            "description": "Filters to be applied on the response.",
            "items": {
              "$ref": "#/components/schemas/FieldFilter"
            }
          },
          "groupBy": {
            "type": "array",
            "description": "Fields on which the response will be grouped by.",
            "items": {
              "type": "string",
              "description": "List of all possible Fields",
              "enum": [
                "PERSPECTIVE_ID",
                "WORKLOAD",
                "WORKLOAD_TYPE",
                "CLUSTER_ID",
                "CLUSTER_NAME",
                "CLUSTER_NAMESPACE",
                "CLUSTER_NAMESPACE_ID",
                "CLUSTER_WORKLOAD",
                "CLUSTER_WORKLOAD_ID",
                "CLUSTER_NODE",
                "CLUSTER_STORAGE",
                "CLUSTER_APPLICATION",
                "CLUSTER_ENVIRONMENT",
                "CLUSTER_SERVICE",
                "CLUSTER_CLOUD_PROVIDER",
                "CLUSTER_ECS_SERVICE",
                "CLUSTER_ECS_SERVICE_ID",
                "CLUSTER_ECS_TASK",
                "CLUSTER_ECS_TASK_ID",
                "CLUSTER_ECS_LAUNCH_TYPE",
                "CLUSTER_ECS_LAUNCH_TYPE_ID",
                "NAMESPACE",
                "GCP_PRODUCT",
                "GCP_PROJECT",
                "GCP_SKU_ID",
                "GCP_SKU_DESCRIPTION",
                "AWS_ACCOUNT",
                "AWS_SERVICE",
                "AWS_INSTANCE_TYPE",
                "AWS_USAGE_TYPE",
                "AZURE_SUBSCRIPTION_GUID",
                "AZURE_METER_NAME",
                "AZURE_METER_CATEGORY",
                "AZURE_METER_SUBCATEGORY",
                "AZURE_RESOURCE_ID",
                "AZURE_RESOURCE_GROUP_NAME",
                "AZURE_RESOURCE_TYPE",
                "AZURE_RESOURCE",
                "AZURE_SERVICE_NAME",
                "AZURE_SERVICE_TIER",
                "AZURE_INSTANCE_ID",
                "AZURE_SUBSCRIPTION_NAME",
                "AZURE_PUBLISHER_NAME",
                "AZURE_PUBLISHER_TYPE",
                "AZURE_RESERVATION_ID",
                "AZURE_RESERVATION_NAME",
                "AZURE_FREQUENCY",
                "COMMON_PRODUCT",
                "COMMON_REGION",
                "COMMON_NONE",
                "CLOUD_PROVIDER",
                "STATUS",
                "REGION",
                "ANOMALY_TIME",
                "ACTUAL_COST",
                "EXPECTED_COST",
                "ANOMALOUS_SPEND",
                "COST_IMPACT",
                "TOTAL_COST",
                "IDLE_COST",
                "UNALLOCATED_COST",
                "ALL",
                "RULE_NAME",
                "RULE_SET_NAME"
              ]
            }
          },
          "timeResolution": {
            "type": "string",
            "description": "Only applicable for Time Series Endpoints, defaults to DAY",
            "enum": [
              "HOUR",
              "DAY",
              "MONTH",
              "WEEK",
              "QUARTER",
              "YEAR"
            ]
          },
          "limit": {
            "type": "integer",
            "description": "Limit on the number of cost values returned, 0 by default.",
            "format": "int32"
          },
          "sortOrder": {
            "type": "string",
            "description": "Order of sorting on cost, Descending by default.",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ]
          },
          "offset": {
            "type": "integer",
            "description": "Offset on the cost values returned, 10 by default.",
            "format": "int32"
          },
          "skipRoundOff": {
            "type": "boolean",
            "description": "Skip Rounding off the cost values returned, false by default."
          },
          "selectedLabels": {
            "type": "array",
            "description": "The response will contain values corresponding to these labels",
            "items": {
              "type": "string",
              "description": "The response will contain values corresponding to these labels"
            }
          }
        },
        "description": "Common query parameters for all cluster cost details APIs"
      },
      "PerspectiveEntityStatsData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QLCEViewEntityStatsDataPoint"
            }
          }
        }
      },
      "QLCEViewEntityStatsDataPoint": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "costTrend": {
            "type": "number"
          },
          "isClusterPerspective": {
            "type": "boolean",
            "writeOnly": true
          },
          "clusterPerspective": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPerspectiveEntityStatsData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PerspectiveEntityStatsData"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "DataPoint": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/Reference"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "PerspectiveTimeSeriesData": {
        "type": "object",
        "properties": {
          "stats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesDataPoints"
            }
          },
          "cpuUtilValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesDataPoints"
            }
          },
          "memoryUtilValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesDataPoints"
            }
          },
          "cpuRequest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesDataPoints"
            }
          },
          "cpuLimit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesDataPoints"
            }
          },
          "memoryRequest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesDataPoints"
            }
          },
          "memoryLimit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesDataPoints"
            }
          }
        }
      },
      "Reference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ResponseDTOPerspectiveTimeSeriesData": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PerspectiveTimeSeriesData"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TimeSeriesDataPoints": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            }
          },
          "time": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ResponseDTORuleEnforcement": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RuleEnforcement"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RuleEnforcement": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "unique id"
          },
          "accountId": {
            "type": "string",
            "description": "account id"
          },
          "name": {
            "type": "string",
            "description": "name"
          },
          "description": {
            "type": "string",
            "description": "Description of the entity"
          },
          "tags": {
            "type": "array",
            "description": "Tags",
            "items": {
              "type": "string",
              "description": "Tags"
            }
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "cloudProvider": {
            "type": "string",
            "description": "cloudProvider",
            "enum": [
              "AWS"
            ]
          },
          "ruleIds": {
            "type": "array",
            "description": "rulesIds",
            "items": {
              "type": "string",
              "description": "rulesIds"
            }
          },
          "ruleSetIDs": {
            "type": "array",
            "description": "ruleSetIDs",
            "items": {
              "type": "string",
              "description": "ruleSetIDs"
            }
          },
          "executionSchedule": {
            "type": "string",
            "description": "executionSchedule"
          },
          "executionTimezone": {
            "type": "string",
            "description": "executionTimezone"
          },
          "targetAccounts": {
            "type": "array",
            "description": "targetAccounts",
            "items": {
              "type": "string",
              "description": "targetAccounts"
            }
          },
          "targetRegions": {
            "type": "array",
            "description": "targetRegions",
            "items": {
              "type": "string",
              "description": "targetRegions"
            }
          },
          "isDryRun": {
            "type": "boolean",
            "description": "isDryRun"
          },
          "deleted": {
            "type": "boolean",
            "description": "deleted"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "isEnabled"
          },
          "createdAt": {
            "type": "integer",
            "description": "Time at which the entity was created",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "description": "Time at which the entity was last updated",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          }
        },
        "description": "This object will contain the complete definition of a Cloud Cost Policy enforcement"
      },
      "CreateRuleEnforcementDTO": {
        "type": "object",
        "properties": {
          "ruleEnforcement": {
            "$ref": "#/components/schemas/RuleEnforcement"
          }
        }
      },
      "EnforcementCount": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "account id"
          },
          "ruleIds": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "rules ids and list of enforcement",
              "items": {
                "type": "string",
                "description": "rules ids and list of enforcement"
              }
            },
            "description": "rules ids and list of enforcement"
          },
          "ruleSetIds": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "rules pack ids and list of enforcement",
              "items": {
                "type": "string",
                "description": "rules pack ids and list of enforcement"
              }
            },
            "description": "rules pack ids and list of enforcement"
          }
        },
        "description": "This object will contain the complete definition of a Cloud Cost Enforcement Count"
      },
      "ResponseDTOEnforcementCount": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/EnforcementCount"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "EnforcementCountDTO": {
        "type": "object",
        "properties": {
          "enforcementCount": {
            "$ref": "#/components/schemas/EnforcementCountRequest"
          }
        }
      },
      "EnforcementCountRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "account id"
          },
          "ruleIds": {
            "type": "array",
            "description": "rulesName",
            "items": {
              "type": "string",
              "description": "rulesName"
            }
          },
          "ruleSetIds": {
            "type": "array",
            "description": "rulesSetName",
            "items": {
              "type": "string",
              "description": "rulesSetName"
            }
          }
        },
        "description": "This has the query to list Enforcement Count"
      },
      "ExecutionDetails": {
        "type": "object",
        "properties": {
          "enforcementIds": {
            "type": "array",
            "description": "list of enforcement ids and details",
            "items": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/ExecutionEnforcementDetails"
              },
              "description": "list of enforcement ids and details"
            }
          }
        },
        "description": "This object will contain the complete definition of a ExecutionDetails"
      },
      "ExecutionEnforcementDetails": {
        "type": "object",
        "properties": {
          "enforcementName": {
            "type": "string",
            "description": "Enforcement Name"
          },
          "schedule": {
            "type": "string",
            "description": "schedule"
          },
          "description": {
            "type": "string",
            "description": "description"
          },
          "accounts": {
            "type": "array",
            "description": "Target Account",
            "items": {
              "type": "string",
              "description": "Target Account"
            }
          },
          "regions": {
            "type": "array",
            "description": "Target Region",
            "items": {
              "type": "string",
              "description": "Target Region"
            }
          },
          "ruleIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "rules ids and list of enforcement"
            },
            "description": "rules ids and list of enforcement"
          },
          "ruleSetIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "rules pack ids and list of enforcement"
            },
            "description": "rules pack ids and list of enforcement"
          }
        },
        "description": "This object will contain the complete definition of a ExecutionEnforcementDetails"
      },
      "ResponseDTOExecutionDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ExecutionDetails"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ExecutionDetailDTO": {
        "type": "object",
        "properties": {
          "executionDetail": {
            "$ref": "#/components/schemas/ExecutionDetailRequest"
          }
        }
      },
      "ExecutionDetailRequest": {
        "type": "object",
        "properties": {
          "enforcementIds": {
            "type": "array",
            "description": "EnforcementIds",
            "items": {
              "type": "string",
              "description": "EnforcementIds"
            }
          }
        },
        "description": "This has the query for ExecutionDetailRequest"
      },
      "ResponseDTOListRuleEnforcement": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleEnforcement"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GovernanceEnqueueResponseDTO": {
        "type": "object",
        "properties": {
          "ruleExecutionId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseDTOGovernanceEnqueueResponseDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GovernanceEnqueueResponseDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "GovernanceJobEnqueueDTO": {
        "type": "object",
        "properties": {
          "ruleEnforcementId": {
            "type": "string"
          },
          "roleArn": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "ruleCloudProviderType": {
            "type": "string",
            "enum": [
              "AWS"
            ]
          },
          "ruleId": {
            "type": "string"
          },
          "policy": {
            "type": "string"
          },
          "targetAccountId": {
            "type": "string"
          },
          "targetRegion": {
            "type": "string"
          },
          "isDryRun": {
            "type": "boolean"
          },
          "isOOTB": {
            "type": "boolean"
          }
        }
      },
      "JsonNode": {
        "type": "object"
      },
      "ResponseDTOJsonNode": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTORuleList": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RuleList"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Rule": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "unique id"
          },
          "accountId": {
            "type": "string",
            "description": "account id"
          },
          "name": {
            "type": "string",
            "description": "name"
          },
          "description": {
            "type": "string",
            "description": "Description of the entity"
          },
          "rulesYaml": {
            "type": "string",
            "description": "Get YAML of the policy"
          },
          "tags": {
            "type": "array",
            "description": "Tags",
            "items": {
              "type": "string",
              "description": "Tags"
            }
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "cloudProvider": {
            "type": "string",
            "description": "cloudProvider",
            "enum": [
              "AWS"
            ]
          },
          "versionLabel": {
            "type": "string",
            "description": "versionLabel"
          },
          "isStablePolicy": {
            "type": "boolean",
            "description": "isStablePolicy"
          },
          "storeType": {
            "type": "string",
            "description": "storeType",
            "enum": [
              "INLINE",
              "REMOTE"
            ]
          },
          "isOOTB": {
            "type": "boolean",
            "description": "isOOTB"
          },
          "deleted": {
            "type": "boolean",
            "description": "deleted"
          },
          "createdAt": {
            "type": "integer",
            "description": "Time at which the entity was created",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "description": "Time at which the entity was last updated",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          }
        },
        "description": "This object will contain the complete definition of a Cloud Cost Policies"
      },
      "RuleList": {
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "description": "Total items",
            "format": "int32"
          },
          "rule": {
            "type": "array",
            "description": "List of rules executions",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          }
        },
        "description": "This object will contain the complete definition of a Cloud Cost Rule List"
      },
      "ListDTO": {
        "type": "object",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/RuleRequest"
          }
        }
      },
      "RuleRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "account id"
          },
          "isOOTB": {
            "type": "boolean",
            "description": "isOOTBPolicy"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "tags": {
            "type": "string",
            "description": "Tags"
          },
          "cloudProvider": {
            "type": "string",
            "description": "cloudProvider"
          },
          "policyIds": {
            "type": "array",
            "description": "policyIds",
            "items": {
              "type": "string",
              "description": "policyIds"
            }
          },
          "isStablePolicy": {
            "type": "boolean",
            "description": "isStablePolicy"
          },
          "search": {
            "type": "string",
            "description": "search"
          },
          "limit": {
            "type": "integer",
            "description": "limit",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "description": "offset",
            "format": "int32"
          },
          "orderBy": {
            "type": "array",
            "description": "The order by condition for Rule query",
            "items": {
              "$ref": "#/components/schemas/CCMSort"
            }
          }
        },
        "description": "This has the query to list the policies"
      },
      "ResponseDTORule": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Rule"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CreateRuleDTO": {
        "type": "object",
        "properties": {
          "rule": {
            "$ref": "#/components/schemas/Rule"
          }
        }
      },
      "CEViewFolder": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "unique id"
          },
          "accountId": {
            "type": "string",
            "description": "account id"
          },
          "name": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "description": "name"
          },
          "pinned": {
            "type": "boolean",
            "description": "pinned"
          },
          "tags": {
            "type": "array",
            "description": "Tags",
            "items": {
              "type": "string",
              "description": "Tags"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the entity"
          },
          "viewType": {
            "type": "string",
            "description": "view type",
            "enum": [
              "SAMPLE",
              "CUSTOMER",
              "DEFAULT"
            ]
          },
          "createdAt": {
            "type": "integer",
            "description": "Time at which the entity was created",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "description": "Time at which the entity was last updated",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          }
        },
        "description": "This object will contain the complete definition of a Cloud Cost Perspective"
      },
      "ResponseDTOCEViewFolder": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CEViewFolder"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CreatePerspectiveFolderDTO": {
        "type": "object",
        "properties": {
          "ceViewFolder": {
            "$ref": "#/components/schemas/CEViewFolder"
          },
          "perspectiveIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseDTOListCEViewFolder": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CEViewFolder"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Perspective": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "folderName": {
            "type": "string"
          },
          "isReportScheduledConfigured": {
            "type": "boolean",
            "writeOnly": true
          },
          "reportScheduledConfigured": {
            "type": "boolean"
          }
        },
        "description": "Perspective ID to name mapping"
      },
      "ResponseDTOListPerspective": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Perspective"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CEView": {
        "required": [
          "name",
          "viewVersion"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "name": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "viewVersion": {
            "type": "string"
          },
          "viewTimeRange": {
            "$ref": "#/components/schemas/ViewTimeRange"
          },
          "viewRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewRule"
            }
          },
          "dataSources": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Perspective filter Category, CLUSTER means Kubernetes",
              "enum": [
                "CLUSTER",
                "AWS",
                "GCP",
                "AZURE",
                "COMMON",
                "CUSTOM",
                "BUSINESS_MAPPING",
                "LABEL"
              ]
            }
          },
          "viewVisualization": {
            "$ref": "#/components/schemas/ViewVisualization"
          },
          "viewPreferences": {
            "$ref": "#/components/schemas/ViewPreferences"
          },
          "viewType": {
            "type": "string",
            "enum": [
              "SAMPLE",
              "CUSTOMER",
              "DEFAULT"
            ]
          },
          "viewState": {
            "type": "string",
            "enum": [
              "DRAFT",
              "COMPLETED"
            ]
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          }
        },
        "description": "This object will contain the complete definition of a Cloud Cost Perspective"
      },
      "ResponseDTOListCEView": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CEView"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ViewCondition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "This object defines a filter Condition, an array of filter Conditions are combined using AND operator",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ViewField": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "string"
          },
          "fieldName": {
            "type": "string"
          },
          "identifier": {
            "type": "string",
            "description": "Perspective filter Category, CLUSTER means Kubernetes",
            "enum": [
              "CLUSTER",
              "AWS",
              "GCP",
              "AZURE",
              "COMMON",
              "CUSTOM",
              "BUSINESS_MAPPING",
              "LABEL"
            ]
          },
          "identifierName": {
            "type": "string"
          }
        },
        "description": "An individual Perspective field"
      },
      "ViewIdCondition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ViewCondition"
          },
          {
            "type": "object",
            "properties": {
              "viewField": {
                "$ref": "#/components/schemas/ViewField"
              },
              "viewOperator": {
                "type": "string",
                "enum": [
                  "NOT_IN",
                  "IN",
                  "EQUALS",
                  "NOT_NULL",
                  "NULL",
                  "LIKE"
                ]
              },
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ViewPreferences": {
        "type": "object",
        "properties": {
          "includeOthers": {
            "type": "boolean"
          },
          "includeUnallocatedCost": {
            "type": "boolean"
          }
        }
      },
      "ViewRule": {
        "type": "object",
        "properties": {
          "viewConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewCondition"
            }
          }
        },
        "description": "This object will contain a Perspective Rule, an array of Perspective Rules are combined using OR operator"
      },
      "ViewTimeRange": {
        "type": "object",
        "properties": {
          "viewTimeRangeType": {
            "type": "string",
            "description": "The type of Perspective time range filter, select CUSTOM is you want a Perspective between a fixed set of startTime and endTime",
            "enum": [
              "LAST_7",
              "LAST_30",
              "LAST_MONTH",
              "CURRENT_MONTH",
              "CUSTOM"
            ]
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "The time interval on which you want to create a Perspective"
      },
      "ViewVisualization": {
        "type": "object",
        "properties": {
          "granularity": {
            "type": "string",
            "description": "Granularity of Perspective timeseries data",
            "enum": [
              "DAY",
              "MONTH"
            ]
          },
          "groupBy": {
            "$ref": "#/components/schemas/ViewField"
          },
          "chartType": {
            "type": "string",
            "description": "Perspective chart type",
            "enum": [
              "STACKED_TIME_SERIES",
              "STACKED_LINE_CHART"
            ]
          }
        }
      },
      "MovePerspectiveDTO": {
        "type": "object",
        "properties": {
          "newFolderId": {
            "type": "string"
          },
          "perspectiveIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CEReportSchedule": {
        "required": [
          "name",
          "recipients",
          "userCron",
          "viewsId"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "name": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "description": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "viewsId": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userCron": {
            "type": "string"
          },
          "recipients": {
            "maxItems": 50,
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accountId": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "userCronTimeZone": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/EmbeddedUser"
          },
          "nextExecution": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Cloud Cost Report Schedule contains definition of 'how often' and 'to whom' the Report will be sent"
      },
      "ResponseDTOListCEReportSchedule": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CEReportSchedule"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOCEView": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CEView"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTODouble": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "number",
            "format": "double"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOListValueDataPoint": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValueDataPoint"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CCMJiraDetails": {
        "type": "object",
        "properties": {
          "connectorRef": {
            "type": "string"
          },
          "jiraIssue": {
            "$ref": "#/components/schemas/JiraIssueNG"
          }
        }
      },
      "EC2InstanceDTO": {
        "type": "object",
        "properties": {
          "instanceFamily": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "memory": {
            "type": "string"
          },
          "vcpu": {
            "type": "string"
          },
          "cpuUtilisation": {
            "type": "string"
          },
          "memoryUtilisation": {
            "type": "string"
          },
          "monthlyCost": {
            "type": "string"
          }
        },
        "description": "Recommendation with cross instance family"
      },
      "EC2InstanceRecommendation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "awsAccountId": {
            "type": "string"
          },
          "CurrentConfigurations": {
            "$ref": "#/components/schemas/EC2InstanceDTO"
          },
          "showTerminated": {
            "type": "boolean"
          },
          "SameFamilyRecommendation": {
            "$ref": "#/components/schemas/EC2InstanceDTO"
          },
          "CrossFamilyRecommendation": {
            "$ref": "#/components/schemas/EC2InstanceDTO"
          },
          "jiraDetails": {
            "$ref": "#/components/schemas/CCMJiraDetails"
          }
        },
        "description": "EC2 instance recommendation"
      },
      "JiraIssueNG": {
        "required": [
          "fields",
          "id",
          "key",
          "restUrl"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "restUrl": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ResponseDTOEC2InstanceRecommendation": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/EC2InstanceRecommendation"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "Cost": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "number"
          },
          "memory": {
            "type": "number"
          }
        }
      },
      "ECSRecommendationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "clusterName": {
            "type": "string"
          },
          "serviceArn": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "launchType": {
            "type": "string",
            "enum": [
              "EC2",
              "FARGATE",
              "EXTERNAL"
            ]
          },
          "current": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "percentileBased": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "lastDayCost": {
            "$ref": "#/components/schemas/Cost"
          },
          "cpuHistogram": {
            "$ref": "#/components/schemas/HistogramExp"
          },
          "memoryHistogram": {
            "$ref": "#/components/schemas/HistogramExp"
          },
          "jiraDetails": {
            "$ref": "#/components/schemas/CCMJiraDetails"
          }
        }
      },
      "HistogramExp": {
        "type": "object",
        "properties": {
          "firstBucketSize": {
            "type": "number",
            "format": "double"
          },
          "growthRatio": {
            "type": "number",
            "format": "double"
          },
          "numBuckets": {
            "type": "integer",
            "format": "int32"
          },
          "minBucket": {
            "type": "integer",
            "format": "int32"
          },
          "maxBucket": {
            "type": "integer",
            "format": "int32"
          },
          "bucketWeights": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "totalWeight": {
            "type": "number",
            "format": "double"
          },
          "precomputed": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        }
      },
      "ResponseDTOECSRecommendationDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ECSRecommendationDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ClusterRecommendationAccuracy": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "number",
            "format": "double"
          },
          "masterPrice": {
            "type": "number",
            "format": "double"
          },
          "memory": {
            "type": "number",
            "format": "double"
          },
          "nodes": {
            "type": "integer",
            "format": "int64"
          },
          "regularNodes": {
            "type": "integer",
            "format": "int64"
          },
          "regularPrice": {
            "type": "number",
            "format": "double"
          },
          "spotNodes": {
            "type": "integer",
            "format": "int64"
          },
          "spotPrice": {
            "type": "number",
            "format": "double"
          },
          "totalPrice": {
            "type": "number",
            "format": "double"
          },
          "workerPrice": {
            "type": "number",
            "format": "double"
          },
          "zone": {
            "type": "string"
          }
        }
      },
      "NodePool": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "sumNodes": {
            "type": "integer",
            "format": "int64"
          },
          "vm": {
            "$ref": "#/components/schemas/VirtualMachine"
          },
          "vmClass": {
            "type": "string"
          }
        }
      },
      "NodePoolId": {
        "type": "object",
        "properties": {
          "nodepoolname": {
            "type": "string"
          },
          "clusterid": {
            "type": "string"
          }
        }
      },
      "NodeRecommendationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "nodePoolId": {
            "$ref": "#/components/schemas/NodePoolId"
          },
          "resourceRequirement": {
            "$ref": "#/components/schemas/RecommendClusterRequest"
          },
          "current": {
            "$ref": "#/components/schemas/RecommendationResponse"
          },
          "recommended": {
            "$ref": "#/components/schemas/RecommendationResponse"
          },
          "totalResourceUsage": {
            "$ref": "#/components/schemas/TotalResourceUsage"
          },
          "jiraDetails": {
            "$ref": "#/components/schemas/CCMJiraDetails"
          }
        }
      },
      "RecommendClusterRequest": {
        "type": "object",
        "properties": {
          "allowBurst": {
            "type": "boolean"
          },
          "allowOlderGen": {
            "type": "boolean"
          },
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maxNodes": {
            "type": "integer",
            "format": "int64"
          },
          "minNodes": {
            "type": "integer",
            "format": "int64"
          },
          "networkPerf": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "onDemandPct": {
            "type": "integer",
            "format": "int64"
          },
          "sameSize": {
            "type": "boolean"
          },
          "sumCpu": {
            "type": "number",
            "format": "double"
          },
          "sumGpu": {
            "type": "integer",
            "format": "int64"
          },
          "sumMem": {
            "type": "number",
            "format": "double"
          },
          "zone": {
            "type": "string"
          },
          "minCpu": {
            "type": "number",
            "format": "double"
          },
          "minMem": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "RecommendationResponse": {
        "type": "object",
        "properties": {
          "accuracy": {
            "$ref": "#/components/schemas/ClusterRecommendationAccuracy"
          },
          "nodePools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodePool"
            }
          },
          "provider": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "instanceCategory": {
            "type": "string",
            "enum": [
              "ON_DEMAND",
              "SPOT",
              "RESERVED"
            ]
          }
        }
      },
      "ResponseDTONodeRecommendationDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/NodeRecommendationDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TotalResourceUsage": {
        "type": "object",
        "properties": {
          "sumcpu": {
            "type": "number",
            "format": "double"
          },
          "summemory": {
            "type": "number",
            "format": "double"
          },
          "maxcpu": {
            "type": "number",
            "format": "double"
          },
          "maxmemory": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "VirtualMachine": {
        "type": "object",
        "properties": {
          "avgPrice": {
            "type": "number",
            "format": "double"
          },
          "burst": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "cpusPerVm": {
            "type": "number",
            "format": "double"
          },
          "currentGen": {
            "type": "boolean"
          },
          "gpusPerVm": {
            "type": "number",
            "format": "double"
          },
          "memPerVm": {
            "type": "number",
            "format": "double"
          },
          "allocatableCpusPerVm": {
            "type": "number",
            "format": "double"
          },
          "allocatableMemPerVm": {
            "type": "number",
            "format": "double"
          },
          "networkPerf": {
            "type": "string"
          },
          "networkPerfCategory": {
            "type": "string"
          },
          "onDemandPrice": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string"
          },
          "zones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContainerHistogramDTO": {
        "type": "object",
        "properties": {
          "containerName": {
            "type": "string"
          },
          "cpuHistogram": {
            "$ref": "#/components/schemas/HistogramExp"
          },
          "memoryHistogram": {
            "$ref": "#/components/schemas/HistogramExp"
          },
          "containerRecommendation": {
            "$ref": "#/components/schemas/ContainerRecommendation"
          }
        }
      },
      "ContainerRecommendation": {
        "type": "object",
        "properties": {
          "current": {
            "$ref": "#/components/schemas/ResourceRequirement"
          },
          "burstable": {
            "$ref": "#/components/schemas/ResourceRequirement"
          },
          "guaranteed": {
            "$ref": "#/components/schemas/ResourceRequirement"
          },
          "recommended": {
            "$ref": "#/components/schemas/ResourceRequirement"
          },
          "percentileBased": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ResourceRequirement"
            }
          },
          "lastDayCost": {
            "$ref": "#/components/schemas/Cost"
          },
          "numDays": {
            "type": "integer",
            "format": "int32"
          },
          "totalSamplesCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ResourceRequirement": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "limits": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOWorkloadRecommendationDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/WorkloadRecommendationDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "WorkloadRecommendationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "containerRecommendations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ContainerRecommendation"
            }
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerHistogramDTO"
            }
          },
          "lastDayCost": {
            "$ref": "#/components/schemas/Cost"
          },
          "jiraDetails": {
            "$ref": "#/components/schemas/CCMJiraDetails"
          }
        }
      },
      "ResponseDTOInteger": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "integer",
            "format": "int32"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CCMRecommendationFilterProperties": {
        "type": "object",
        "properties": {
          "k8sRecommendationFilterPropertiesDTO": {
            "$ref": "#/components/schemas/K8sRecommendationFilterProperties"
          },
          "perspectiveFilters": {
            "type": "array",
            "description": "Get Recommendations for a perspective",
            "items": {
              "$ref": "#/components/schemas/QLCEViewFilterWrapper"
            }
          },
          "minSaving": {
            "type": "number",
            "description": "Fetch recommendations with Saving more than minSaving",
            "format": "double"
          },
          "minCost": {
            "type": "number",
            "description": "Fetch recommendations with Cost more than minCost",
            "format": "double"
          },
          "offset": {
            "type": "integer",
            "description": "Query Offset",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "description": "Query Limit",
            "format": "int64"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Filter tags as a key-value pair."
            },
            "description": "Filter tags as a key-value pair."
          },
          "filterType": {
            "type": "string",
            "enum": [
              "CCMRecommendation"
            ]
          }
        },
        "description": "Properties of the CCMRecommendation Filter defined in Harness"
      },
      "K8sRecommendationFilterProperties": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "List of ids which will be applied as filter for Recommendations",
            "items": {
              "type": "string",
              "description": "List of ids which will be applied as filter for Recommendations"
            }
          },
          "names": {
            "type": "array",
            "description": "List of names which will be applied as filter for Recommendations",
            "items": {
              "type": "string",
              "description": "List of names which will be applied as filter for Recommendations"
            }
          },
          "namespaces": {
            "type": "array",
            "description": "List of namespaces which will be applied as filter for Recommendations",
            "items": {
              "type": "string",
              "description": "List of namespaces which will be applied as filter for Recommendations"
            }
          },
          "clusterNames": {
            "type": "array",
            "description": "List of clusterNames which will be applied as filter for Recommendations",
            "items": {
              "type": "string",
              "description": "List of clusterNames which will be applied as filter for Recommendations"
            }
          },
          "resourceTypes": {
            "type": "array",
            "description": "List of resourceTypes which will be applied as filter for Recommendations",
            "items": {
              "type": "string",
              "description": "List of resourceTypes which will be applied as filter for Recommendations",
              "enum": [
                "WORKLOAD",
                "NODE_POOL",
                "ECS_SERVICE",
                "EC2_INSTANCE"
              ]
            }
          },
          "recommendationStates": {
            "type": "array",
            "description": "List of recommendationStates which will be applied as filter for Recommendations",
            "items": {
              "type": "string",
              "description": "List of recommendationStates which will be applied as filter for Recommendations",
              "enum": [
                "OPEN",
                "APPLIED",
                "IGNORED"
              ]
            }
          }
        },
        "description": "Properties of the K8sRecommendation Filter defined in Harness"
      },
      "FilterValues": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "$ref": "#/components/schemas/CCMRecommendationFilterProperties"
          }
        },
        "description": "The applicable 'columns' values are 'name', 'resourceType', 'namespace', 'clusterName'"
      },
      "RecommendationDetailsDTO": {
        "type": "object"
      },
      "RecommendationItem": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "clusterName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "monthlySaving": {
            "type": "number",
            "format": "double"
          },
          "monthlyCost": {
            "type": "number",
            "format": "double"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "WORKLOAD",
              "NODE_POOL",
              "ECS_SERVICE",
              "EC2_INSTANCE"
            ]
          },
          "recommendationState": {
            "type": "string",
            "enum": [
              "OPEN",
              "APPLIED",
              "IGNORED"
            ]
          },
          "jiraConnectorRef": {
            "type": "string"
          },
          "jiraIssueKey": {
            "type": "string"
          },
          "jiraStatus": {
            "type": "string"
          },
          "recommendationDetails": {
            "$ref": "#/components/schemas/RecommendationDetailsDTO"
          }
        },
        "description": "A single Cloud Cost Recommendation entity."
      },
      "Recommendations": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationItem"
            }
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "The Cloud Cost Recommendations list response"
      },
      "ResponseDTORecommendations": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Recommendations"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOVoid": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "object"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RecommendationOverviewStats": {
        "type": "object",
        "properties": {
          "totalMonthlyCost": {
            "type": "number",
            "format": "double"
          },
          "totalMonthlySaving": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ResponseDTORecommendationOverviewStats": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RecommendationOverviewStats"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOCCMJiraDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CCMJiraDetails"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CCMJiraCreateDTO": {
        "type": "object",
        "properties": {
          "recommendationId": {
            "type": "string"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "WORKLOAD",
              "NODE_POOL",
              "ECS_SERVICE",
              "EC2_INSTANCE"
            ]
          },
          "connectorRef": {
            "type": "string"
          },
          "projectKey": {
            "type": "string"
          },
          "issueType": {
            "type": "string"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RecommendationEC2InstanceId": {
        "type": "object",
        "properties": {
          "awsAccountId": {
            "type": "string"
          },
          "instanceId": {
            "type": "string"
          }
        }
      },
      "RecommendationECSServiceId": {
        "type": "object",
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "ecsServiceName": {
            "type": "string"
          }
        }
      },
      "RecommendationNodepoolId": {
        "type": "object",
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "nodepoolName": {
            "type": "string"
          }
        }
      },
      "RecommendationWorkloadId": {
        "type": "object",
        "properties": {
          "clusterName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "workloadName": {
            "type": "string"
          }
        }
      },
      "RecommendationsIgnoreList": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "workloadIgnoreList": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationWorkloadId"
            }
          },
          "nodepoolIgnoreList": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationNodepoolId"
            }
          },
          "ecsServiceIgnoreList": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationECSServiceId"
            }
          },
          "ec2InstanceIgnoreList": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationEC2InstanceId"
            }
          }
        }
      },
      "ResponseDTORecommendationsIgnoreList": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/RecommendationsIgnoreList"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RecommendationsIgnoreResourcesDTO": {
        "type": "object",
        "properties": {
          "workloads": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationWorkloadId"
            }
          },
          "nodepools": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationNodepoolId"
            }
          },
          "ecsServices": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationECSServiceId"
            }
          },
          "ec2Instances": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationEC2InstanceId"
            }
          }
        }
      },
      "CfApiKey": {
        "description": "The API key is used by SDKs to connect to Harness Feature Flags",
        "properties": {
          "apiKey": {
            "description": "The Key will be shown only on create. On subsequent GET calls, only the masked APIKeys will be returned",
            "example": "b03af1cd-bd3f-472b-a4b0-c9c9c09c642e",
            "type": "string"
          },
          "identifier": {
            "description": "The environment that this key was created in",
            "example": "production",
            "type": "string"
          },
          "key": {
            "description": "A hash of API key",
            "example": "3c940273c34e8a9b21",
            "type": "string"
          },
          "name": {
            "description": "The user friendly identifier for the API Key",
            "example": "Production Server Key",
            "type": "string"
          },
          "type": {
            "description": "The type of key depending on the SDK that is being used.",
            "enum": [
              "server",
              "client"
            ],
            "example": "server",
            "type": "string"
          }
        },
        "required": [
          "name",
          "apiKey",
          "identifier",
          "type"
        ],
        "type": "object"
      },
      "ApiKeyRequestType": {
        "description": "The type of key depending on the SDK that is being used.",
        "enum": [
          "Server",
          "Client"
        ],
        "example": "Server",
        "type": "string"
      },
      "ApiKeys": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "properties": {
              "apiKeys": {
                "items": {
                  "$ref": "#/components/schemas/CfApiKey"
                },
                "type": "array"
              }
            }
          }
        ],
        "description": "A list of API Keys",
        "type": "object"
      },
      "Clause": {
        "description": "A clause describes what conditions are used to evaluate a flag",
        "properties": {
          "attribute": {
            "description": "The attribute to use in the clause.  This can be any target attribute",
            "example": "identifier",
            "type": "string"
          },
          "id": {
            "description": "The unique ID for the clause",
            "example": 32434243,
            "type": "string"
          },
          "negate": {
            "description": "Is the operation negated?",
            "example": false,
            "type": "boolean"
          },
          "op": {
            "description": "The type of operation such as equals, starts_with, contains",
            "example": "starts_with",
            "type": "string"
          },
          "values": {
            "description": "The values that are compared against the operator",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "attribute",
          "op",
          "negate",
          "values"
        ],
        "type": "object"
      },
      "Distribution": {
        "description": "Describes a distribution rule",
        "properties": {
          "bucketBy": {
            "description": "The attribute to use when distributing targets across buckets",
            "type": "string"
          },
          "variations": {
            "description": "A list of variations and the weight that should be given to each",
            "items": {
              "$ref": "#/components/schemas/WeightedVariation"
            },
            "type": "array"
          }
        },
        "required": [
          "bucketBy",
          "variations"
        ],
        "type": "object"
      },
      "CfError": {
        "properties": {
          "code": {
            "description": "The http error code",
            "example": 404,
            "type": "string"
          },
          "details": {
            "description": "Additional details about the error",
            "type": "object"
          },
          "message": {
            "description": "The reason the request failed",
            "example": "Error retrieving projects, organization 'default_org' does not exist",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "Feature": {
        "description": "A Feature Flag response",
        "properties": {
          "archived": {
            "description": "Indicates if the flag has been archived and is no longer used",
            "example": false,
            "type": "boolean"
          },
          "createdAt": {
            "description": "The date the flag was created in milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "defaultOffVariation": {
            "description": "The default value returned when a flag is off",
            "example": true,
            "type": "string"
          },
          "defaultOnVariation": {
            "description": "The default value returned when a flag is on",
            "example": true,
            "type": "string"
          },
          "description": {
            "description": "A description for this flag",
            "example": "A flag to control a new feature in production",
            "type": "string"
          },
          "envProperties": {
            "description": "The Feature Flag rules for a given environment",
            "properties": {
              "defaultServe": {
                "$ref": "#/components/schemas/Serve"
              },
              "environment": {
                "description": "The environment identifier",
                "type": "string"
              },
              "modifiedAt": {
                "description": "The last time the flag was modified in this environment",
                "format": "int64",
                "type": "integer"
              },
              "offVariation": {
                "description": "The variation to serve for this flag in this environment when the flag is off",
                "type": "string"
              },
              "pipelineConfigured": {
                "type": "boolean"
              },
              "pipelineDetails": {
                "$ref": "#/components/schemas/FeaturePipeline"
              },
              "pipelineErrorReason": {
                "type": "string"
              },
              "pipelineErrorState": {
                "type": "boolean"
              },
              "rules": {
                "description": "A list of rules to use when evaluating this flag in this environment",
                "items": {
                  "$ref": "#/components/schemas/ServingRule"
                },
                "type": "array"
              },
              "state": {
                "$ref": "#/components/schemas/FeatureState"
              },
              "variationMap": {
                "description": "A list of the variations that will be served to specific targets or target groups in an environment.",
                "items": {
                  "$ref": "#/components/schemas/VariationMap"
                },
                "type": "array"
              },
              "version": {
                "description": "The version of the flag.  This is incremented each time it is changed",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "state",
              "defaultServe",
              "environment",
              "offVariation",
              "pipelineConfigured"
            ],
            "type": "object"
          },
          "evaluation": {
            "description": "The value that the flag will return for the current user",
            "example": true,
            "type": "string"
          },
          "evaluationIdentifier": {
            "description": "The identifier for the returned evaluation",
            "example": "on-variation",
            "type": "string"
          },
          "identifier": {
            "description": "The Feature Flag identifier",
            "example": "bool-flag",
            "type": "string"
          },
          "kind": {
            "description": "The type of Feature flag",
            "enum": [
              "boolean",
              "int",
              "string",
              "json"
            ],
            "example": "boolean",
            "type": "string"
          },
          "modifiedAt": {
            "description": "The date the flag was last modified in milliseconds",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The name of the Feature Flag",
            "example": "My Boolean Flag",
            "type": "string"
          },
          "owner": {
            "description": "The user who created the flag",
            "example": "johndoe",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permanent": {
            "description": "Indicates if this is a permanent flag, or one that should expire",
            "example": true,
            "type": "boolean"
          },
          "prerequisites": {
            "items": {
              "$ref": "#/components/schemas/Prerequisite"
            },
            "type": "array"
          },
          "project": {
            "description": "The project this Feature belongs to",
            "example": "test-project",
            "type": "string"
          },
          "results": {
            "description": "The results shows which variations have been evaluated, and how many times each of these have been evaluated.",
            "items": {
              "$ref": "#/components/schemas/Results"
            },
            "type": "array"
          },
          "services": {
            "description": "A list of services linked to this Feature Flag",
            "items": {
              "$ref": "#/components/schemas/Service"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/FeatureStatus"
          },
          "tags": {
            "description": "A list of tags for this Feature Flag",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          },
          "variations": {
            "description": "The variations that can be returned for this flag",
            "items": {
              "$ref": "#/components/schemas/Variation"
            },
            "minItems": 2,
            "type": "array"
          }
        },
        "required": [
          "project",
          "identifier",
          "createdAt",
          "kind",
          "name",
          "variations",
          "defaultOnVariation",
          "defaultOffVariation"
        ],
        "type": "object"
      },
      "FeatureCounts": {
        "properties": {
          "totalActive": {
            "description": "The total number of flags with a active status in a project/environment",
            "example": 5,
            "type": "integer"
          },
          "totalEnabled": {
            "description": "The total number of flags that are turned on in a project/environment",
            "example": 2,
            "type": "integer"
          },
          "totalFeatures": {
            "description": "The total number of flags in the project/environment",
            "example": 10,
            "type": "integer"
          },
          "totalPermanent": {
            "description": "The total number of permanent flags in a project/environment",
            "example": 7,
            "type": "integer"
          },
          "totalPotentiallyStale": {
            "description": "The total number of flags with a potentially-stale status in a project/environment",
            "example": 3,
            "type": "integer"
          },
          "totalRecentlyAccessed": {
            "description": "The total number of flags with a recently-accessed status in a project/environment",
            "example": 2,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FeatureFlagRequestKind": {
        "enum": [
          "boolean",
          "int",
          "string",
          "json"
        ],
        "example": "boolean",
        "type": "string"
      },
      "FeaturePipeline": {
        "description": "A pipeline configured to update a feature",
        "properties": {
          "createdAt": {
            "description": "creation date in milliseconds",
            "type": "integer"
          },
          "description": {
            "description": "The description of the pipeline",
            "type": "string"
          },
          "identifier": {
            "description": "The identifier of the pipeline",
            "type": "string"
          },
          "lastUpdatedAt": {
            "description": "last updated date in milliseconds",
            "type": "integer"
          },
          "name": {
            "description": "The name of the pipeline",
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "name"
        ],
        "type": "object"
      },
      "FeatureResponseMetadata": {
        "properties": {
          "details": {
            "description": "Additional metadata about the request",
            "properties": {
              "governanceMetadata": {
                "description": "Summary of governance checks including any warnings",
                "type": "object"
              },
              "pipelineMetadata": {
                "description": "Info about the pipeline whether a pipeline was triggered",
                "properties": {
                  "pipelineExecutionId": {
                    "description": "The ID of the pipeline execution",
                    "type": "string"
                  },
                  "pipelineTriggered": {
                    "description": "Whether a pipeline was triggered",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "FeatureState": {
        "description": "The state of a flag either off or on",
        "enum": [
          "on",
          "off"
        ],
        "type": "string"
      },
      "FeatureStatus": {
        "description": "Indicates when the flag was last evaluated",
        "properties": {
          "lastAccess": {
            "type": "integer"
          },
          "status": {
            "enum": [
              "active",
              "inactive",
              "never-requested"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "lastAccess"
        ],
        "type": "object"
      },
      "Features": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "properties": {
              "featureCounts": {
                "$ref": "#/components/schemas/FeatureCounts"
              },
              "features": {
                "items": {
                  "$ref": "#/components/schemas/Feature"
                },
                "type": "array"
              }
            }
          }
        ],
        "description": "A list of Feature Flags",
        "type": "object"
      },
      "FlagBasicInfo": {
        "description": "A flag Identifier and name",
        "properties": {
          "identifier": {
            "description": "The flag identifier",
            "example": "test-flag",
            "type": "string"
          },
          "name": {
            "description": "The user friendly flag name",
            "example": "Test Flag",
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "name"
        ],
        "type": "object"
      },
      "FlagBasicInfos": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "properties": {
              "featureFlags": {
                "items": {
                  "$ref": "#/components/schemas/FlagBasicInfo"
                },
                "type": "array"
              }
            }
          }
        ],
        "description": "A list of Flags",
        "type": "object"
      },
      "GitDetails": {
        "description": "The commit message to use as part of a gitsync operation",
        "properties": {
          "commitMsg": {
            "description": "A description of the change or action",
            "example": "Turning on flag test-flag for production",
            "type": "string"
          }
        },
        "required": [
          "commitMsg"
        ],
        "type": "object"
      },
      "GitSyncPatchOperation": {
        "properties": {
          "comment": {
            "description": "A comment explaining the reason for this patch operation",
            "example": "This is a comment string",
            "type": "string"
          },
          "executionTime": {
            "description": "Time of execution in unix epoch milliseconds when the scheduled changes will be applied",
            "type": "integer"
          },
          "gitDetails": {
            "$ref": "#/components/schemas/GitDetails"
          },
          "instructions": {
            "$ref": "#/components/schemas/PatchInstruction"
          }
        },
        "required": [
          "instructions"
        ],
        "type": "object"
      },
      "Pagination": {
        "properties": {
          "itemCount": {
            "description": "The total number of items",
            "example": 1,
            "type": "integer"
          },
          "pageCount": {
            "description": "The total number of pages",
            "example": 100,
            "type": "integer"
          },
          "pageIndex": {
            "description": "The current page",
            "example": 0,
            "type": "integer"
          },
          "pageSize": {
            "description": "The number of items per page",
            "example": 1,
            "type": "integer"
          },
          "version": {
            "description": "The version of this object.  The version will be incremented each time the object is modified",
            "example": 5,
            "type": "integer"
          }
        },
        "required": [
          "pageCount",
          "itemCount",
          "pageSize",
          "pageIndex"
        ],
        "type": "object"
      },
      "PatchInstruction": {
        "description": "A list of Patch Instructions",
        "items": {
          "properties": {
            "kind": {
              "description": "The name of the modification you would like to perform on a resource.",
              "example": "enableFeatureFlag",
              "type": "string"
            },
            "parameters": {
              "example": {
                "ruleId": "TestRule",
                "variationID": "TestVariation"
              },
              "type": "object"
            }
          },
          "required": [
            "kind",
            "parameters"
          ]
        },
        "type": "array"
      },
      "Prerequisite": {
        "description": "Feature Flag pre-requisites",
        "properties": {
          "feature": {
            "description": "The feature identifier that is the prerequisite",
            "type": "string"
          },
          "variations": {
            "description": "A list of variations that must be met",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "feature",
          "variations"
        ],
        "type": "object"
      },
      "Results": {
        "description": "This result object shows details of how many times a variation has been evaluated",
        "properties": {
          "count": {
            "description": "The number of times this variation has been returned in a evaluation",
            "type": "integer"
          },
          "variationIdentifier": {
            "description": "The unique variation identifier",
            "example": "defaultOnVariation",
            "type": "string"
          },
          "variationName": {
            "description": "The user friendly variation name",
            "example": "Default On Variation",
            "type": "string"
          }
        },
        "required": [
          "variationIdentifier",
          "variationName",
          "count"
        ],
        "type": "object"
      },
      "Segment": {
        "description": "A Target Group (Segment) response",
        "properties": {
          "createdAt": {
            "description": "The data and time in milliseconds when the group was created",
            "format": "int64",
            "type": "integer"
          },
          "environment": {
            "description": "The environment this target group belongs to",
            "example": "Production",
            "type": "string"
          },
          "excluded": {
            "description": "A list of Targets who are excluded from this target group",
            "items": {
              "$ref": "#/components/schemas/Target"
            },
            "type": "array"
          },
          "identifier": {
            "description": "Unique identifier for the target group.",
            "type": "string"
          },
          "included": {
            "description": "A list of Targets who belong to this target group",
            "items": {
              "$ref": "#/components/schemas/Target"
            },
            "type": "array"
          },
          "modifiedAt": {
            "description": "The data and time in milliseconds when the group was last modified",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "Name of the target group.",
            "example": "Beta Testers",
            "type": "string"
          },
          "rules": {
            "description": "An array of rules that can cause a user to be included in this segment.",
            "items": {
              "$ref": "#/components/schemas/Clause"
            },
            "type": "array"
          },
          "tags": {
            "description": "Tags for this target group",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          },
          "version": {
            "description": "The version of this group.  Each time it is modified the version is incremented",
            "example": 1,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "identifier",
          "name"
        ],
        "type": "object"
      },
      "SegmentFlag": {
        "description": "Details of a Feature Flag that has been included in a Target Group (Segment)",
        "properties": {
          "description": {
            "description": "A description of the feature flag",
            "type": "string"
          },
          "environment": {
            "description": "The environment identifier for the feature flag",
            "type": "string"
          },
          "identifier": {
            "description": "The identifier of the feature flag",
            "example": "simple-bool",
            "type": "string"
          },
          "name": {
            "description": "The name of the feature flag",
            "example": "Simple Bool",
            "type": "string"
          },
          "project": {
            "description": "The project identifier for the feature flag",
            "type": "string"
          },
          "ruleId": {
            "description": "The unique identifier for this rule",
            "type": "string"
          },
          "type": {
            "description": "How the the flag has been included, either directly or via a custom rule",
            "enum": [
              "DIRECT",
              "CONDITION"
            ],
            "type": "string"
          },
          "variation": {
            "description": "The identifier for the variation of the flag that should be served to members of the group",
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "type",
          "project",
          "environment",
          "name",
          "variation"
        ],
        "type": "object"
      },
      "Segments": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "properties": {
              "segments": {
                "items": {
                  "$ref": "#/components/schemas/Segment"
                },
                "type": "array"
              }
            }
          }
        ],
        "description": "A list of Target Groups (Segments)",
        "type": "object"
      },
      "Serve": {
        "description": "Describe the distribution rule and the variation that should be served to the target",
        "properties": {
          "distribution": {
            "$ref": "#/components/schemas/Distribution"
          },
          "variation": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Service": {
        "description": "A Harness service linked to a flag",
        "properties": {
          "identifier": {
            "description": "The identifier of the service",
            "type": "string"
          },
          "name": {
            "description": "The name of the service",
            "type": "string"
          }
        },
        "required": [
          "name",
          "identifier"
        ],
        "type": "object"
      },
      "ServingRule": {
        "description": "The rule used to determine what variation to serve to a target",
        "properties": {
          "clauses": {
            "description": "A list of clauses to use in the rule",
            "items": {
              "$ref": "#/components/schemas/Clause"
            },
            "type": "array"
          },
          "priority": {
            "description": "The rules priority relative to other rules.  The rules are evaluated in order with 1 being the highest",
            "example": 1,
            "type": "integer"
          },
          "ruleId": {
            "description": "The unique identifier for this rule",
            "type": "string"
          },
          "serve": {
            "$ref": "#/components/schemas/Serve"
          }
        },
        "required": [
          "priority",
          "clauses",
          "serve"
        ],
        "type": "object"
      },
      "Tag": {
        "description": "A tag has a name and value",
        "properties": {
          "name": {
            "description": "The name of the tag",
            "type": "string"
          },
          "value": {
            "description": "The value of the tag",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Target": {
        "description": "A Target object",
        "properties": {
          "account": {
            "description": "The account ID that the target belongs to",
            "example": "abcXDdffdaffd",
            "type": "string"
          },
          "anonymous": {
            "description": "Indicates if this target is anonymous",
            "type": "boolean"
          },
          "attributes": {
            "description": "a JSON representation of the attributes for this target",
            "example": {
              "age": 20,
              "location": "Belfast"
            },
            "type": "object"
          },
          "createdAt": {
            "description": "The date and time in milliseconds when this Target was created",
            "format": "int64",
            "type": "integer"
          },
          "environment": {
            "description": "The identifier for the environment that the target belongs to",
            "type": "string"
          },
          "identifier": {
            "description": "The unique identifier for this target",
            "example": "john-doe",
            "type": "string"
          },
          "name": {
            "description": "The name of this Target",
            "example": "John Doe",
            "type": "string"
          },
          "org": {
            "description": "The identifier for the organization that the target belongs to",
            "type": "string"
          },
          "project": {
            "description": "The identifier for the project that this target belongs to",
            "type": "string"
          },
          "segments": {
            "description": "A list of Target Groups (Segments) that this Target belongs to",
            "items": {
              "$ref": "#/components/schemas/Segment"
            },
            "type": "array"
          }
        },
        "required": [
          "identifier",
          "name",
          "environment",
          "project",
          "account",
          "org"
        ],
        "type": "object"
      },
      "TargetDetail": {
        "description": "Details of which Target Groups (Segments) a target is included in or excluded from",
        "properties": {
          "excludedSegments": {
            "description": "A list of target groups (segments) that the target is excluded from.",
            "items": {
              "$ref": "#/components/schemas/TargetDetailSegment"
            },
            "type": "array"
          },
          "identifier": {
            "description": "The unique identifier for the target",
            "type": "string"
          },
          "includedSegments": {
            "description": "A list of target groups (segments) that the target is included in.",
            "items": {
              "$ref": "#/components/schemas/TargetDetailSegment"
            },
            "type": "array"
          },
          "ruleSegments": {
            "description": "A list of target groups (segments) that the target is included in via group rules.",
            "items": {
              "$ref": "#/components/schemas/TargetDetailSegment"
            },
            "type": "array"
          }
        },
        "required": [
          "identifier",
          "environment",
          "project",
          "account",
          "org"
        ],
        "type": "object"
      },
      "TargetDetailSegment": {
        "properties": {
          "identifier": {
            "description": "The unique identifier",
            "type": "string"
          },
          "name": {
            "description": "The name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TargetMap": {
        "description": "Target map provides the details of a target that belongs to a flag",
        "properties": {
          "identifier": {
            "description": "The identifier for the target",
            "type": "string"
          },
          "name": {
            "description": "The name of the target",
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "name"
        ],
        "type": "object"
      },
      "Targets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "properties": {
              "targets": {
                "items": {
                  "$ref": "#/components/schemas/Target"
                },
                "type": "array"
              }
            }
          }
        ],
        "description": "A list of Targets",
        "type": "object"
      },
      "Variation": {
        "description": "A variation of a flag that can be returned to a target",
        "properties": {
          "description": {
            "description": "A description of the variation",
            "type": "string"
          },
          "identifier": {
            "description": "The unique identifier for the variation",
            "example": "off-variation",
            "type": "string"
          },
          "name": {
            "description": "The user friendly name of the variation",
            "example": "Off VAriation",
            "type": "string"
          },
          "value": {
            "description": "The variation value to serve such as true or false for a boolean flag",
            "example": true,
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "value"
        ],
        "type": "object"
      },
      "VariationMap": {
        "description": "A mapping of variations to targets and target groups (segments).  The targets listed here should receive this variation.",
        "properties": {
          "targetSegments": {
            "description": "A list of target groups (segments)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "targets": {
            "description": "A list of target mappings",
            "items": {
              "$ref": "#/components/schemas/TargetMap"
            },
            "type": "array"
          },
          "variation": {
            "description": "The variation identifier",
            "example": "off-variation",
            "type": "string"
          }
        },
        "required": [
          "variation"
        ],
        "type": "object"
      },
      "WeightedVariation": {
        "description": "A variation and the weighting it should receive as part of a percentage rollout",
        "properties": {
          "variation": {
            "description": "The variation identifier",
            "example": "off-variation",
            "type": "string"
          },
          "weight": {
            "description": "The weight to be given to the variation in percent",
            "example": 50,
            "type": "integer"
          }
        },
        "required": [
          "variation",
          "weight"
        ],
        "type": "object"
      },
      "DeleteAccessPointPayload": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "with_resources": {
            "type": "boolean"
          }
        }
      },
      "LwService": {
        "required": [
          "cloud_account_id",
          "kind",
          "name",
          "org_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "org_id": {
            "type": "string"
          },
          "account_identifier": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "fulfilment": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "idle_time_mins": {
            "type": "integer",
            "format": "int64"
          },
          "host_name": {
            "type": "string"
          },
          "health_check": {
            "type": "object",
            "properties": {}
          },
          "custom_domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "match_all_subdomains": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "routing": {
            "$ref": "#/components/schemas/RoutingData"
          },
          "opts": {
            "$ref": "#/components/schemas/Opts"
          },
          "created_at": {
            "type": "string"
          },
          "access_point_id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/ServiceMetadata"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "ServiceV2": {
        "required": [
          "cloud_account_id",
          "kind",
          "name",
          "org_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "org_id": {
            "type": "string"
          },
          "account_identifier": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "fulfilment": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "idle_time_mins": {
            "type": "integer",
            "format": "int64"
          },
          "host_name": {
            "type": "string"
          },
          "health_check": {
            "type": "object",
            "properties": {}
          },
          "custom_domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "match_all_subdomains": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "routing": {
            "$ref": "#/components/schemas/RoutingDataV2"
          },
          "created_at": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/ServiceMetadata"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "ServiceMetadata": {
        "type": "object",
        "properties": {
          "cloud_provider_details": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "target_group_details": {
            "type": "object",
            "properties": {}
          },
          "service_errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceError"
            }
          },
          "kubernetes_connector_id": {
            "type": "string"
          },
          "autostopping_proxy_config": {
            "type": "object",
            "properties": {
              "http": {
                "$ref": "#/components/schemas/HTTPProxy"
              },
              "tcp": {
                "$ref": "#/components/schemas/HTTPProxy"
              }
            }
          }
        }
      },
      "ServiceError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "action": {
            "type": "string"
          }
        }
      },
      "ServiceDep": {
        "type": "object"
      },
      "ServiceHealthResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "SaveServiceRequest": {
        "type": "object",
        "properties": {
          "deps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDep"
            }
          },
          "service": {
            "$ref": "#/components/schemas/LwService"
          },
          "apply_now": {
            "type": "boolean"
          }
        }
      },
      "SaveServiceRequestV2": {
        "type": "object",
        "properties": {
          "deps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDep"
            }
          },
          "service": {
            "$ref": "#/components/schemas/ServiceV2"
          },
          "apply_now": {
            "type": "boolean"
          }
        }
      },
      "Resource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "availability_zone": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "launch_time": {
            "type": "string"
          },
          "ipv4": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "private_ipv4": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "object",
            "properties": {},
            "description": "tag key as attribute key and tag value as attribute value"
          },
          "resource_type": {
            "type": "string"
          },
          "provider_name": {
            "type": "string"
          },
          "is_spot": {
            "type": "boolean"
          },
          "platform": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "number"
          },
          "metadata": {
            "type": "object",
            "properties": {}
          },
          "provider_type": {
            "type": "string"
          }
        }
      },
      "AllResourcesOfAccountResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          }
        }
      },
      "ServiceUsageRecord": {
        "type": "object",
        "properties": {
          "service_id": {
            "type": "number"
          },
          "path": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          },
          "idle_time_mins": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          }
        }
      },
      "LwServiceResponse": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/LwService"
          }
        }
      },
      "ServicesResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LwService"
            }
          }
        }
      },
      "ServiceDepTree": {
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/LwService"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDepTree"
            }
          }
        }
      },
      "InstanceBasedRoutingData": {
        "type": "object",
        "properties": {
          "filter_text": {
            "type": "string"
          },
          "scale_group": {
            "$ref": "#/components/schemas/ASGMinimal"
          }
        }
      },
      "InstanceBasedRoutingDataV2": {
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/FilterObject"
          },
          "scale_group": {
            "$ref": "#/components/schemas/ASGMinimal"
          }
        }
      },
      "FilterObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resource_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vpc_id": {
            "type": "string"
          },
          "zones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "Proxy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "HTTPProxy": {
        "required": [
          "proxy",
          "ports"
        ],
        "type": "object",
        "properties": {
          "proxy": {
            "$ref": "#/components/schemas/Proxy"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortConfig"
            }
          }
        }
      },
      "TCPProxy": {
        "required": [
          "proxy"
        ],
        "type": "object",
        "properties": {
          "proxy": {
            "$ref": "#/components/schemas/Proxy"
          },
          "ssh": {
            "type": "integer"
          },
          "rdp": {
            "type": "integer"
          },
          "ports": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "Opts": {
        "type": "object",
        "properties": {
          "preserve_private_ip": {
            "type": "boolean"
          },
          "delete_cloud_resources": {
            "type": "boolean"
          },
          "always_use_private_ip": {
            "type": "boolean"
          },
          "access_details": {
            "type": "object",
            "properties": {}
          },
          "hide_progress_page": {
            "type": "boolean"
          }
        }
      },
      "PortConfig": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string"
          },
          "target_protocol": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "target_port": {
            "type": "integer"
          },
          "server_name": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "routing_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingRule"
            }
          }
        }
      },
      "RoutingRule": {
        "type": "object",
        "properties": {
          "path_match": {
            "type": "string"
          }
        }
      },
      "RoutingData": {
        "type": "object",
        "properties": {
          "instance": {
            "$ref": "#/components/schemas/InstanceBasedRoutingData"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortConfig"
            }
          },
          "lb": {
            "type": "string"
          },
          "k8s": {
            "type": "object",
            "properties": {
              "RuleJson": {
                "type": "string"
              },
              "ConnectorID": {
                "type": "string"
              },
              "Namespace": {
                "type": "string"
              }
            }
          },
          "custom_domain_providers": {
            "type": "object",
            "properties": {}
          },
          "container_svc": {
            "$ref": "#/components/schemas/ContainerSvc"
          },
          "database": {
            "$ref": "#/components/schemas/RDSDatabase"
          }
        }
      },
      "RoutingDataV2": {
        "type": "object",
        "properties": {
          "instance": {
            "$ref": "#/components/schemas/InstanceBasedRoutingDataV2"
          },
          "lb": {
            "type": "string"
          },
          "k8s": {
            "type": "object",
            "properties": {
              "RuleJson": {
                "type": "string"
              },
              "ConnectorID": {
                "type": "string"
              },
              "Namespace": {
                "type": "string"
              }
            }
          },
          "custom_domain_providers": {
            "type": "object",
            "properties": {}
          },
          "container_svc": {
            "$ref": "#/components/schemas/ContainerSvc"
          },
          "database": {
            "$ref": "#/components/schemas/RDSDatabase"
          },
          "http": {
            "$ref": "#/components/schemas/HTTPProxy"
          },
          "tcp": {
            "$ref": "#/components/schemas/TCPProxy"
          }
        }
      },
      "RDSDatabase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ContainerSvc": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "task_count": {
            "type": "number"
          }
        }
      },
      "AccessPointMeta": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "certificate_id": {
            "type": "string"
          },
          "security_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dns": {
            "type": "object",
            "properties": {
              "route53": {
                "type": "object",
                "properties": {
                  "hosted_zone_id": {
                    "type": "string"
                  }
                }
              },
              "others": {
                "type": "string"
              }
            }
          },
          "albArn": {
            "type": "string"
          },
          "resource_group": {
            "type": "string"
          },
          "fe_ip_id": {
            "type": "string"
          },
          "subnet_id": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "app_gateway_id": {
            "type": "string"
          },
          "subnet_name": {
            "type": "string"
          },
          "fe_ip_name": {
            "type": "string"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateData"
          },
          "func_region": {
            "type": "string"
          }
        }
      },
      "CertificateData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "AccessPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "account_id": {
            "type": "string"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "org_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "host_name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vpc": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "submitted",
              "errored"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/AccessPointMeta"
          },
          "subnets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "security_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "editables": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateAccessPointResponse": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/AccessPoint"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "ListAccessPointResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessPoint"
            }
          }
        }
      },
      "GetAccessPointResponse": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/AccessPoint"
          }
        }
      },
      "CumulativeSavings": {
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "potential_cost": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "actual_cost": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "savings": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "total_savings": {
            "type": "number",
            "format": "float"
          },
          "total_potential": {
            "type": "number",
            "format": "float"
          },
          "total_cost": {
            "type": "number",
            "format": "float"
          },
          "savings_percent": {
            "type": "number",
            "format": "float"
          },
          "total_active_services": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "CumulativeSavingsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/CumulativeSavings"
          }
        }
      },
      "AccessPointActivityResponse": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/ServiceUsageRecord"
          }
        }
      },
      "ServiceDiagnosticsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDiagnostics"
            }
          }
        }
      },
      "ASGMinimal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "desired": {
            "type": "integer"
          },
          "min": {
            "type": "integer"
          },
          "max": {
            "type": "integer"
          },
          "on_demand": {
            "type": "integer"
          },
          "spot": {
            "type": "integer"
          },
          "mixed_instance": {
            "type": "boolean"
          },
          "cloud_account_id": {
            "type": "string"
          },
          "provider_name": {
            "type": "string"
          },
          "target_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetGroupMinimal"
            }
          },
          "region": {
            "type": "string"
          },
          "availability_zones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "TargetGroupMinimal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "protocol": {
            "type": "string"
          },
          "vpc": {
            "type": "string"
          }
        }
      },
      "SaveStaticSchedulesRequest": {
        "type": "object",
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/FixedSchedule"
          },
          "id": {
            "type": "number"
          }
        }
      },
      "FixedSchedule": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the schedule"
          },
          "id": {
            "type": "number",
            "description": "ID of fixed schedule",
            "readOnly": true
          },
          "account": {
            "type": "string",
            "description": "ID of account"
          },
          "description": {
            "type": "string",
            "description": "Description of fixed schedule"
          },
          "resources": {
            "type": "array",
            "description": "List of resources to be controlled by the schedule",
            "items": {
              "$ref": "#/components/schemas/StaticScheduleResource"
            }
          },
          "details": {
            "$ref": "#/components/schemas/OccurrenceSchedule"
          }
        }
      },
      "StaticScheduleResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the resource to be controlled by schedule. For AutoStopping rule, this would be the ID of the rule"
          },
          "type": {
            "type": "string",
            "description": "Type of the resource to be controlled",
            "enum": [
              "autostop_rule"
            ]
          }
        },
        "description": "Details of an independent resource that can be controlled by a schedule"
      },
      "OccurrenceSchedule": {
        "type": "object",
        "properties": {
          "uptime": {
            "$ref": "#/components/schemas/TimeSchedule"
          },
          "downtime": {
            "$ref": "#/components/schemas/TimeSchedule"
          },
          "timezone": {
            "type": "string",
            "description": "Time zone in which the schedule should be applied"
          }
        },
        "description": "Details of time schedule by which the resource should be controlled"
      },
      "TimeSchedule": {
        "type": "object",
        "properties": {
          "period": {
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "description": "Start time of the period",
                "example": "2021-10-19T08:35:00.927Z"
              },
              "end": {
                "type": "string",
                "description": "End time of the period",
                "example": "2021-10-19T08:37:58.927Z"
              }
            },
            "description": "For schedules that uses an exact time period"
          },
          "days": {
            "type": "object",
            "properties": {
              "days": {
                "type": "array",
                "description": "Days of week on which the schedule should be executed",
                "items": {
                  "type": "number"
                }
              },
              "all_day": {
                "type": "boolean",
                "description": "Equivalent to selecting all days"
              },
              "start_time": {
                "$ref": "#/components/schemas/TimeInDay"
              },
              "end_time": {
                "$ref": "#/components/schemas/TimeInDay"
              }
            },
            "description": "For specifying a recurring schedule in terms of week days"
          }
        },
        "description": "Specifies the occurrence schedule. Occurrence schedule can either be specified as period or as days"
      },
      "TimeInDay": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "number",
            "description": "Hour"
          },
          "min": {
            "type": "number",
            "description": "Minutes"
          }
        }
      },
      "FixedSchedulesListResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixedSchedule"
            }
          }
        }
      },
      "ServiceDiagnostics": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message if success were to be false"
          },
          "name": {
            "type": "string",
            "description": "Name of the check"
          },
          "success": {
            "type": "boolean",
            "description": "Flag which specifies if a diagnostic check is successful"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "AuditFailure": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "description": "This is Failure entity as defied in Harness"
      },
      "AuditError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "detailedMessage": {
            "type": "string"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditResponseMessage"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/ErrorMetadata"
          }
        },
        "description": "This is Error entity as defined in Harness"
      },
      "AuditResponseMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "DEFAULT_ERROR_CODE",
              "INVALID_ARGUMENT",
              "INVALID_EMAIL",
              "DOMAIN_NOT_ALLOWED_TO_REGISTER",
              "COMMNITY_EDITION_NOT_FOUND",
              "DEPLOY_MODE_IS_NOT_ON_PREM",
              "USER_ALREADY_REGISTERED",
              "USER_INVITATION_DOES_NOT_EXIST",
              "USER_DOES_NOT_EXIST",
              "USER_INVITE_OPERATION_FAILED",
              "USER_DISABLED",
              "ACCOUNT_DOES_NOT_EXIST",
              "INACTIVE_ACCOUNT",
              "ACCOUNT_MIGRATED",
              "USER_DOMAIN_NOT_ALLOWED",
              "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
              "RESOURCE_NOT_FOUND",
              "INVALID_FORMAT",
              "ROLE_DOES_NOT_EXIST",
              "EMAIL_NOT_VERIFIED",
              "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
              "INVALID_TOKEN",
              "REVOKED_TOKEN",
              "INVALID_CAPTCHA_TOKEN",
              "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
              "EXPIRED_TOKEN",
              "INVALID_AGENT_MTLS_AUTHORITY",
              "TOKEN_ALREADY_REFRESHED_ONCE",
              "ACCESS_DENIED",
              "NG_ACCESS_DENIED",
              "INVALID_CREDENTIAL",
              "INVALID_CREDENTIALS_THIRD_PARTY",
              "INVALID_KEY",
              "INVALID_CONNECTOR_TYPE",
              "INVALID_KEYPATH",
              "INVALID_VARIABLE",
              "UNKNOWN_HOST",
              "UNREACHABLE_HOST",
              "INVALID_PORT",
              "SSH_SESSION_TIMEOUT",
              "SOCKET_CONNECTION_ERROR",
              "CONNECTION_ERROR",
              "SOCKET_CONNECTION_TIMEOUT",
              "WINRM_COMMAND_EXECUTION_TIMEOUT",
              "CONNECTION_TIMEOUT",
              "SSH_CONNECTION_ERROR",
              "USER_GROUP_ERROR",
              "INVALID_EXECUTION_ID",
              "ERROR_IN_GETTING_CHANNEL_STREAMS",
              "UNEXPECTED",
              "UNKNOWN_ERROR",
              "UNKNOWN_EXECUTOR_TYPE_ERROR",
              "DUPLICATE_STATE_NAMES",
              "TRANSITION_NOT_LINKED",
              "TRANSITION_TO_INCORRECT_STATE",
              "TRANSITION_TYPE_NULL",
              "STATES_WITH_DUP_TRANSITIONS",
              "BARRIERS_NOT_RUNNING_CONCURRENTLY",
              "NON_FORK_STATES",
              "NON_REPEAT_STATES",
              "INITIAL_STATE_NOT_DEFINED",
              "FILE_INTEGRITY_CHECK_FAILED",
              "INVALID_URL",
              "FILE_DOWNLOAD_FAILED",
              "PLATFORM_SOFTWARE_DELETE_ERROR",
              "INVALID_CSV_FILE",
              "INVALID_REQUEST",
              "SCHEMA_VALIDATION_FAILED",
              "FILTER_CREATION_ERROR",
              "INVALID_YAML_ERROR",
              "PLAN_CREATION_ERROR",
              "INVALID_INFRA_STATE",
              "PIPELINE_ALREADY_TRIGGERED",
              "NON_EXISTING_PIPELINE",
              "DUPLICATE_COMMAND_NAMES",
              "INVALID_PIPELINE",
              "COMMAND_DOES_NOT_EXIST",
              "DUPLICATE_ARTIFACTSTREAM_NAMES",
              "DUPLICATE_HOST_NAMES",
              "STATE_NOT_FOR_TYPE",
              "STATE_MACHINE_ISSUE",
              "STATE_DISCONTINUE_FAILED",
              "STATE_PAUSE_FAILED",
              "PAUSE_ALL_ALREADY",
              "RESUME_ALL_ALREADY",
              "ROLLBACK_ALREADY",
              "ABORT_ALL_ALREADY",
              "EXPIRE_ALL_ALREADY",
              "RETRY_FAILED",
              "UNKNOWN_ARTIFACT_TYPE",
              "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
              "INIT_TIMEOUT",
              "LICENSE_EXPIRED",
              "NOT_LICENSED",
              "REQUEST_TIMEOUT",
              "WORKFLOW_ALREADY_TRIGGERED",
              "JENKINS_ERROR",
              "INVALID_ARTIFACT_SOURCE",
              "INVALID_ARTIFACT_SERVER",
              "INVALID_CLOUD_PROVIDER",
              "UPDATE_NOT_ALLOWED",
              "DELETE_NOT_ALLOWED",
              "APPDYNAMICS_CONFIGURATION_ERROR",
              "APM_CONFIGURATION_ERROR",
              "SPLUNK_CONFIGURATION_ERROR",
              "ELK_CONFIGURATION_ERROR",
              "LOGZ_CONFIGURATION_ERROR",
              "SUMO_CONFIGURATION_ERROR",
              "INSTANA_CONFIGURATION_ERROR",
              "APPDYNAMICS_ERROR",
              "STACKDRIVER_ERROR",
              "STACKDRIVER_CONFIGURATION_ERROR",
              "NEWRELIC_CONFIGURATION_ERROR",
              "NEWRELIC_ERROR",
              "DYNA_TRACE_CONFIGURATION_ERROR",
              "DYNA_TRACE_ERROR",
              "CLOUDWATCH_ERROR",
              "CLOUDWATCH_CONFIGURATION_ERROR",
              "PROMETHEUS_CONFIGURATION_ERROR",
              "DATA_DOG_CONFIGURATION_ERROR",
              "SERVICE_GUARD_CONFIGURATION_ERROR",
              "ENCRYPTION_NOT_CONFIGURED",
              "UNAVAILABLE_DELEGATES",
              "WORKFLOW_EXECUTION_IN_PROGRESS",
              "PIPELINE_EXECUTION_IN_PROGRESS",
              "AWS_ACCESS_DENIED",
              "AWS_CLUSTER_NOT_FOUND",
              "AWS_SERVICE_NOT_FOUND",
              "IMAGE_NOT_FOUND",
              "ILLEGAL_ARGUMENT",
              "IMAGE_TAG_NOT_FOUND",
              "DELEGATE_NOT_AVAILABLE",
              "INVALID_YAML_PAYLOAD",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "UNRECOGNIZED_YAML_FIELDS",
              "COULD_NOT_MAP_BEFORE_YAML",
              "MISSING_BEFORE_YAML",
              "MISSING_YAML",
              "NON_EMPTY_DELETIONS",
              "GENERAL_YAML_ERROR",
              "GENERAL_YAML_INFO",
              "YAML_GIT_SYNC_ERROR",
              "GIT_CONNECTION_ERROR",
              "GIT_ERROR",
              "ARTIFACT_SERVER_ERROR",
              "ENCRYPT_DECRYPT_ERROR",
              "SECRET_MANAGEMENT_ERROR",
              "SECRET_NOT_FOUND",
              "KMS_OPERATION_ERROR",
              "GCP_KMS_OPERATION_ERROR",
              "VAULT_OPERATION_ERROR",
              "AWS_SECRETS_MANAGER_OPERATION_ERROR",
              "AZURE_KEY_VAULT_OPERATION_ERROR",
              "UNSUPPORTED_OPERATION_EXCEPTION",
              "FEATURE_UNAVAILABLE",
              "GENERAL_ERROR",
              "BASELINE_CONFIGURATION_ERROR",
              "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
              "INVALID_AUTHENTICATION_MECHANISM",
              "INVALID_SAML_CONFIGURATION",
              "INVALID_OAUTH_CONFIGURATION",
              "INVALID_LDAP_CONFIGURATION",
              "USER_GROUP_SYNC_FAILURE",
              "USER_GROUP_ALREADY_EXIST",
              "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
              "EXPLANATION",
              "HINT",
              "NOT_WHITELISTED_IP",
              "INVALID_TOTP_TOKEN",
              "EMAIL_FAILED",
              "SSL_HANDSHAKE_FAILED",
              "NO_APPS_ASSIGNED",
              "INVALID_INFRA_CONFIGURATION",
              "TEMPLATES_LINKED",
              "USER_HAS_NO_PERMISSIONS",
              "USER_NOT_AUTHORIZED",
              "USER_ALREADY_PRESENT",
              "EMAIL_ERROR",
              "INVALID_USAGE_RESTRICTION",
              "USAGE_RESTRICTION_ERROR",
              "STATE_EXECUTION_INSTANCE_NOT_FOUND",
              "DELEGATE_TASK_RETRY",
              "KUBERNETES_API_TASK_EXCEPTION",
              "KUBERNETES_TASK_EXCEPTION",
              "KUBERNETES_YAML_ERROR",
              "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
              "READ_FILE_FROM_GCP_STORAGE_FAILED",
              "FILE_NOT_FOUND_ERROR",
              "USAGE_LIMITS_EXCEEDED",
              "EVENT_PUBLISH_FAILED",
              "CUSTOM_APPROVAL_ERROR",
              "JIRA_ERROR",
              "EXPRESSION_EVALUATION_FAILED",
              "KUBERNETES_VALUES_ERROR",
              "KUBERNETES_CLUSTER_ERROR",
              "INCORRECT_SIGN_IN_MECHANISM",
              "OAUTH_LOGIN_FAILED",
              "INVALID_TERRAFORM_TARGETS_REQUEST",
              "TERRAFORM_EXECUTION_ERROR",
              "FILE_READ_FAILED",
              "FILE_SIZE_EXCEEDS_LIMIT",
              "CLUSTER_NOT_FOUND",
              "MARKETPLACE_TOKEN_NOT_FOUND",
              "INVALID_MARKETPLACE_TOKEN",
              "INVALID_TICKETING_SERVER",
              "SERVICENOW_ERROR",
              "PASSWORD_EXPIRED",
              "USER_LOCKED",
              "PASSWORD_STRENGTH_CHECK_FAILED",
              "ACCOUNT_DISABLED",
              "INVALID_ACCOUNT_PERMISSION",
              "PAGERDUTY_ERROR",
              "HEALTH_ERROR",
              "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
              "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
              "INVALID_DASHBOARD_UPDATE_REQUEST",
              "DUPLICATE_FIELD",
              "INVALID_AZURE_VAULT_CONFIGURATION",
              "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
              "INVALID_ROLLBACK",
              "DATA_COLLECTION_ERROR",
              "SUMO_DATA_COLLECTION_ERROR",
              "DEPLOYMENT_GOVERNANCE_ERROR",
              "BATCH_PROCESSING_ERROR",
              "GRAPHQL_ERROR",
              "FILE_CREATE_ERROR",
              "ILLEGAL_STATE",
              "GIT_DIFF_COMMIT_NOT_IN_ORDER",
              "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
              "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
              "POD_NOT_FOUND_ERROR",
              "COMMAND_EXECUTION_ERROR",
              "REGISTRY_EXCEPTION",
              "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
              "ENGINE_IO_EXCEPTION",
              "ENGINE_OUTCOME_EXCEPTION",
              "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
              "CACHE_NOT_FOUND_EXCEPTION",
              "ENGINE_ENTITY_UPDATE_EXCEPTION",
              "SHELL_EXECUTION_EXCEPTION",
              "TEMPLATE_NOT_FOUND",
              "AZURE_SERVICE_EXCEPTION",
              "AZURE_CLIENT_EXCEPTION",
              "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
              "TIMEOUT_ENGINE_EXCEPTION",
              "NO_AVAILABLE_DELEGATES",
              "NO_GLOBAL_DELEGATE_ACCOUNT",
              "NO_INSTALLED_DELEGATES",
              "DUPLICATE_DELEGATE_EXCEPTION",
              "GCP_MARKETPLACE_EXCEPTION",
              "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
              "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
              "OPTIMISTIC_LOCKING_EXCEPTION",
              "NG_PIPELINE_EXECUTION_EXCEPTION",
              "NG_PIPELINE_CREATE_EXCEPTION",
              "RESOURCE_NOT_FOUND_EXCEPTION",
              "PMS_INITIALIZE_SDK_EXCEPTION",
              "UNEXPECTED_SNIPPET_EXCEPTION",
              "UNEXPECTED_SCHEMA_EXCEPTION",
              "CONNECTOR_VALIDATION_EXCEPTION",
              "TIMESCALE_NOT_AVAILABLE",
              "MIGRATION_EXCEPTION",
              "REQUEST_PROCESSING_INTERRUPTED",
              "SECRET_MANAGER_ID_NOT_FOUND",
              "GCP_SECRET_MANAGER_OPERATION_ERROR",
              "GCP_SECRET_OPERATION_ERROR",
              "GIT_OPERATION_ERROR",
              "TASK_FAILURE_ERROR",
              "INSTANCE_STATS_PROCESS_ERROR",
              "INSTANCE_STATS_MIGRATION_ERROR",
              "DEPLOYMENT_MIGRATION_ERROR",
              "CG_LICENSE_USAGE_ERROR",
              "INSTANCE_STATS_AGGREGATION_ERROR",
              "UNRESOLVED_EXPRESSIONS_ERROR",
              "KRYO_HANDLER_NOT_FOUND_ERROR",
              "DELEGATE_ERROR_HANDLER_EXCEPTION",
              "DELEGATE_INSTALLATION_COMMAND_NOT_SUPPORTED_EXCEPTION",
              "UNEXPECTED_TYPE_ERROR",
              "EXCEPTION_HANDLER_NOT_FOUND",
              "CONNECTOR_NOT_FOUND_EXCEPTION",
              "GCP_SERVER_ERROR",
              "HTTP_RESPONSE_EXCEPTION",
              "SCM_NOT_FOUND_ERROR",
              "SCM_CONFLICT_ERROR",
              "SCM_CONFLICT_ERROR_V2",
              "SCM_UNPROCESSABLE_ENTITY",
              "PROCESS_EXECUTION_EXCEPTION",
              "SCM_UNAUTHORIZED",
              "SCM_BAD_REQUEST",
              "SCM_INTERNAL_SERVER_ERROR",
              "DATA",
              "CONTEXT",
              "PR_CREATION_ERROR",
              "URL_NOT_REACHABLE",
              "URL_NOT_PROVIDED",
              "ENGINE_EXPRESSION_EVALUATION_ERROR",
              "ENGINE_FUNCTOR_ERROR",
              "JIRA_CLIENT_ERROR",
              "SCM_NOT_MODIFIED",
              "APPROVAL_STEP_NG_ERROR",
              "BUCKET_SERVER_ERROR",
              "GIT_SYNC_ERROR",
              "TEMPLATE_EXCEPTION",
              "ENTITY_REFERENCE_EXCEPTION",
              "ACTIVE_SERVICE_INSTANCES_PRESENT_EXCEPTION",
              "INVALID_INPUT_SET",
              "INVALID_OVERLAY_INPUT_SET",
              "RESOURCE_ALREADY_EXISTS",
              "INVALID_JSON_PAYLOAD",
              "POLICY_EVALUATION_FAILURE",
              "POLICY_SET_ERROR",
              "INVALID_ARTIFACTORY_REGISTRY_REQUEST",
              "INVALID_NEXUS_REGISTRY_REQUEST",
              "ENTITY_NOT_FOUND",
              "INVALID_AZURE_CONTAINER_REGISTRY_REQUEST",
              "AZURE_AUTHENTICATION_ERROR",
              "AZURE_CONFIG_ERROR",
              "DATA_PROCESSING_ERROR",
              "INVALID_AZURE_AKS_REQUEST",
              "AWS_IAM_ERROR",
              "AWS_CF_ERROR",
              "AWS_INSTANCE_ERROR",
              "AWS_VPC_ERROR",
              "AWS_TAG_ERROR",
              "AWS_ASG_ERROR",
              "AWS_LOAD_BALANCER_ERROR",
              "SCM_INTERNAL_SERVER_ERROR_V2",
              "SCM_UNAUTHORIZED_ERROR_V2",
              "TOO_MANY_REQUESTS",
              "INVALID_IDENTIFIER_REF",
              "SPOTINST_NULL_ERROR",
              "SCM_UNEXPECTED_ERROR",
              "DUPLICATE_FILE_IMPORT",
              "AZURE_APP_SERVICES_TASK_EXCEPTION",
              "AZURE_ARM_TASK_EXCEPTION",
              "AZURE_BP_TASK_EXCEPTION",
              "MEDIA_NOT_SUPPORTED",
              "AWS_ECS_ERROR",
              "AWS_APPLICATION_AUTO_SCALING",
              "AWS_ECS_SERVICE_NOT_ACTIVE",
              "AWS_ECS_CLIENT_ERROR",
              "AWS_STS_ERROR",
              "FREEZE_EXCEPTION",
              "DELEGATE_TASK_EXPIRED",
              "DELEGATE_TASK_VALIDATION_FAILED",
              "MONGO_EXECUTION_TIMEOUT_EXCEPTION",
              "DELEGATE_NOT_REGISTERED",
              "TERRAFORM_VAULT_SECRET_CLEANUP_FAILURE",
              "APPROVAL_REJECTION",
              "TERRAGRUNT_EXECUTION_ERROR",
              "ADFS_ERROR",
              "TERRAFORM_CLOUD_ERROR"
            ]
          },
          "level": {
            "type": "string",
            "enum": [
              "INFO",
              "ERROR"
            ]
          },
          "message": {
            "type": "string"
          },
          "exception": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "moduleVersion": {
                      "type": "string"
                    },
                    "methodName": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": {
                      "type": "string"
                    },
                    "nativeMethod": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "suppressed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "stackTrace": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "classLoaderName": {
                            "type": "string"
                          },
                          "moduleName": {
                            "type": "string"
                          },
                          "moduleVersion": {
                            "type": "string"
                          },
                          "methodName": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "lineNumber": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "className": {
                            "type": "string"
                          },
                          "nativeMethod": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "localizedMessage": {
                      "type": "string"
                    }
                  }
                }
              },
              "localizedMessage": {
                "type": "string"
              }
            }
          },
          "failureTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXPIRED",
                "DELEGATE_PROVISIONING",
                "CONNECTIVITY",
                "AUTHENTICATION",
                "VERIFICATION_FAILURE",
                "APPLICATION_ERROR",
                "AUTHORIZATION_ERROR",
                "TIMEOUT_ERROR",
                "POLICY_EVALUATION_FAILURE",
                "INPUT_TIMEOUT_FAILURE",
                "APPROVAL_REJECTION",
                "DELEGATE_RESTART"
              ]
            }
          }
        }
      },
      "AddCollaboratorAuditEventData": {
        "required": [
          "source",
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEventData"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/Source"
              }
            }
          }
        ]
      },
      "AuditEvent": {
        "required": [
          "action",
          "authenticationInfo",
          "insertId",
          "module",
          "resource",
          "resourceScope",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "auditId": {
            "type": "string",
            "description": "Identifier of the Audit."
          },
          "insertId": {
            "type": "string",
            "description": "Insert Identifier of the Audit."
          },
          "resourceScope": {
            "$ref": "#/components/schemas/AuditResourceScope"
          },
          "httpRequestInfo": {
            "$ref": "#/components/schemas/HttpRequestInfo"
          },
          "requestMetadata": {
            "$ref": "#/components/schemas/RequestMetadata"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "authenticationInfo": {
            "$ref": "#/components/schemas/AuthenticationInfo"
          },
          "module": {
            "type": "string",
            "description": "Type of module associated with the Audit.",
            "enum": [
              "CD",
              "CI",
              "CV",
              "CF",
              "CE",
              "STO",
              "CHAOS",
              "SRM",
              "CODE",
              "CORE",
              "PMS",
              "TEMPLATESERVICE",
              "GOVERNANCE",
              "IACM"
            ]
          },
          "environment": {
            "$ref": "#/components/schemas/Environment"
          },
          "resource": {
            "$ref": "#/components/schemas/AuditResource"
          },
          "yamlDiffRecord": {
            "$ref": "#/components/schemas/YamlDiffRecord"
          },
          "action": {
            "type": "string",
            "description": "Action type associated with the Audit.",
            "enum": [
              "CREATE",
              "UPDATE",
              "RESTORE",
              "DELETE",
              "FORCE_DELETE",
              "UPSERT",
              "INVITE",
              "RESEND_INVITE",
              "REVOKE_INVITE",
              "ADD_COLLABORATOR",
              "REMOVE_COLLABORATOR",
              "CREATE_TOKEN",
              "REVOKE_TOKEN",
              "LOGIN",
              "LOGIN2FA",
              "UNSUCCESSFUL_LOGIN",
              "ADD_MEMBERSHIP",
              "REMOVE_MEMBERSHIP",
              "ERROR_BUDGET_RESET"
            ]
          },
          "auditEventData": {
            "$ref": "#/components/schemas/AuditEventData"
          },
          "internalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Internal information."
            },
            "description": "Internal information."
          }
        },
        "description": "This has the AuditEvent details defined in Harness."
      },
      "AuditEventData": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AuthenticationInfo": {
        "required": [
          "principal"
        ],
        "type": "object",
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/AuditPrincipal"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "labels"
            },
            "description": "labels"
          }
        },
        "description": "This has the AuthenticationInfo details defined in Harness."
      },
      "ChaosAuditEventData": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEventData"
          },
          {
            "type": "object",
            "properties": {
              "eventModule": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Environment": {
        "required": [
          "identifier",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PreProduction",
              "Production"
            ]
          },
          "identifier": {
            "type": "string"
          }
        },
        "description": "List of Environments"
      },
      "FeatureFlagAuditEventData": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEventData"
          },
          {
            "type": "object",
            "properties": {
              "environment": {
                "type": "string"
              }
            }
          }
        ]
      },
      "HttpRequestInfo": {
        "type": "object",
        "properties": {
          "requestMethod": {
            "type": "string"
          }
        }
      },
      "InvitationSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Source"
          }
        ]
      },
      "OpaAuditEventData": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEventData"
          },
          {
            "type": "object",
            "properties": {
              "eventModule": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PageResponseAuditEvent": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditEvent"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AuditPrincipal": {
        "required": [
          "identifier",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "SYSTEM",
              "API_KEY",
              "SERVICE_ACCOUNT"
            ]
          },
          "identifier": {
            "type": "string"
          }
        },
        "description": "List of Principals"
      },
      "RequestMetadata": {
        "type": "object",
        "properties": {
          "clientIP": {
            "type": "string"
          }
        }
      },
      "AuditResource": {
        "required": [
          "identifier",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Resource Type"
          },
          "identifier": {
            "type": "string",
            "description": "Resource Identifier"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Map of additional information about the Resource."
            },
            "description": "Map of additional information about the Resource."
          }
        },
        "description": "This contains info about Resource saved as a part of Audit Event"
      },
      "AuditResourceScope": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Identifier of Account"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Identifier of Organization"
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Identifier of Project"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Additional information about the Resource Scope"
            },
            "description": "Additional information about the Resource Scope"
          }
        },
        "description": "This has scope details for the resource defined in Harness."
      },
      "ResponseDTOPageResponseAuditEvent": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseAuditEvent"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AuditRoleBinding": {
        "type": "object",
        "properties": {
          "roleIdentifier": {
            "type": "string"
          },
          "resourceGroupIdentifier": {
            "type": "string"
          }
        }
      },
      "Source": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TemplateEventData": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEventData"
          },
          {
            "type": "object",
            "properties": {
              "comments": {
                "type": "string"
              },
              "templateUpdateEventType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "UserInvitationAuditEventData": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEventData"
          },
          {
            "type": "object",
            "properties": {
              "roleBindings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuditRoleBinding"
                }
              }
            }
          }
        ]
      },
      "UserInviteAuditEventData": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEventData"
          },
          {
            "type": "object",
            "properties": {
              "roleBindings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuditRoleBinding"
                }
              }
            }
          }
        ]
      },
      "UserMembershipAuditEventData": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditEventData"
          },
          {
            "type": "object",
            "properties": {
              "mechanism": {
                "type": "string"
              }
            }
          }
        ]
      },
      "YamlDiffRecord": {
        "type": "object",
        "properties": {
          "oldYaml": {
            "type": "string",
            "description": "Previous YAML version"
          },
          "newYaml": {
            "type": "string",
            "description": "Current YAML version"
          }
        },
        "description": "This has the YAML Difference of the record."
      },
      "AuditFilterProperties": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "description": "List of Resource Scopes",
            "items": {
              "$ref": "#/components/schemas/AuditResourceScope"
            }
          },
          "resources": {
            "type": "array",
            "description": "List of Resources",
            "items": {
              "$ref": "#/components/schemas/AuditResource"
            }
          },
          "modules": {
            "type": "array",
            "description": "List of Module Types",
            "items": {
              "type": "string",
              "description": "List of Module Types",
              "enum": [
                "CD",
                "CI",
                "CV",
                "CF",
                "CE",
                "STO",
                "CHAOS",
                "SRM",
                "CODE",
                "CORE",
                "PMS",
                "TEMPLATESERVICE",
                "GOVERNANCE",
                "IACM"
              ]
            }
          },
          "actions": {
            "type": "array",
            "description": "List of Actions",
            "items": {
              "type": "string",
              "description": "List of Actions",
              "enum": [
                "CREATE",
                "UPDATE",
                "RESTORE",
                "DELETE",
                "FORCE_DELETE",
                "UPSERT",
                "INVITE",
                "RESEND_INVITE",
                "REVOKE_INVITE",
                "ADD_COLLABORATOR",
                "REMOVE_COLLABORATOR",
                "CREATE_TOKEN",
                "REVOKE_TOKEN",
                "LOGIN",
                "LOGIN2FA",
                "UNSUCCESSFUL_LOGIN",
                "ADD_MEMBERSHIP",
                "REMOVE_MEMBERSHIP",
                "ERROR_BUDGET_RESET"
              ]
            }
          },
          "environments": {
            "type": "array",
            "description": "List of Environments",
            "items": {
              "$ref": "#/components/schemas/Environment"
            }
          },
          "principals": {
            "type": "array",
            "description": "List of Principals",
            "items": {
              "$ref": "#/components/schemas/AuditPrincipal"
            }
          },
          "staticFilter": {
            "type": "string",
            "description": "Pre-defined Filter",
            "enum": [
              "EXCLUDE_LOGIN_EVENTS",
              "EXCLUDE_SYSTEM_EVENTS"
            ]
          },
          "startTime": {
            "type": "integer",
            "description": "Used to specify a start time for retrieving Audit events that occurred at or after the time indicated.",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "description": "Used to specify the end time for retrieving Audit events that occurred at or before the time indicated.",
            "format": "int64"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Filter tags as a key-value pair."
            },
            "description": "Filter tags as a key-value pair."
          },
          "filterType": {
            "type": "string",
            "description": "This specifies the corresponding Entity of the filter.",
            "enum": [
              "Audit"
            ]
          }
        },
        "description": "This contains the Audit Event filter information. This is used to filter Audit Events depending on the information provided."
      },
      "TemplateCacheResponseMetadata": {
        "required": [
          "cacheState",
          "lastUpdatedAt",
          "ttlLeft"
        ],
        "type": "object",
        "properties": {
          "cacheState": {
            "type": "string",
            "enum": [
              "VALID_CACHE",
              "STALE_CACHE",
              "UNKNOWN"
            ]
          },
          "ttlLeft": {
            "type": "integer",
            "format": "int64"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "This tells the state of the cache from which the template was fetched."
      },
      "ResponseDTOTemplateWrapperResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TemplateWrapperResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "TemplateTemplateResponse": {
        "required": [
          "accountId",
          "identifier",
          "name",
          "yaml"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "yaml": {
            "type": "string"
          },
          "versionLabel": {
            "type": "string"
          },
          "isStableTemplate": {
            "type": "boolean",
            "writeOnly": true
          },
          "templateEntityType": {
            "type": "string",
            "enum": [
              "Step",
              "Stage",
              "Pipeline",
              "CustomDeployment",
              "MonitoredService",
              "SecretManager",
              "ArtifactSource",
              "StepGroup"
            ]
          },
          "childType": {
            "type": "string"
          },
          "templateScope": {
            "type": "string",
            "enum": [
              "account",
              "org",
              "project",
              "unknown"
            ]
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "gitDetails": {
            "$ref": "#/components/schemas/EntityGitDetails"
          },
          "entityValidityDetails": {
            "$ref": "#/components/schemas/EntityGitDetails"
          },
          "lastUpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "storeType": {
            "type": "string",
            "enum": [
              "INLINE",
              "REMOTE"
            ]
          },
          "connectorRef": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "cacheResponseMetadata": {
            "$ref": "#/components/schemas/TemplateCacheResponseMetadata"
          },
          "stableTemplate": {
            "type": "boolean"
          }
        },
        "description": "This contains details of the Template Response"
      },
      "TemplateWrapperResponse": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "writeOnly": true
          },
          "templateResponseDTO": {
            "$ref": "#/components/schemas/TemplateTemplateResponse"
          },
          "valid": {
            "type": "boolean"
          }
        },
        "description": "This contains details of the Template Wrapper Response"
      },
      "ResponseDTOTemplateResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TemplateTemplateResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ChangeSourceDTO": {
        "required": [
          "identifier",
          "name",
          "spec"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "HarnessCDNextGen",
              "PagerDuty",
              "K8sCluster",
              "HarnessCD",
              "HarnessFF",
              "CustomDeploy",
              "CustomIncident",
              "CustomInfrastructure",
              "CustomFF"
            ]
          },
          "enabled": {
            "type": "boolean"
          },
          "spec": {
            "$ref": "#/components/schemas/ChangeSourceSpec"
          },
          "category": {
            "type": "string",
            "enum": [
              "Deployment",
              "Infrastructure",
              "Alert",
              "FeatureFlag"
            ]
          }
        }
      },
      "ChangeSourceSpec": {
        "type": "object"
      },
      "HealthSource": {
        "required": [
          "identifier",
          "name",
          "spec"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "AppDynamics",
              "NewRelic",
              "StackdriverLog",
              "Stackdriver",
              "Prometheus",
              "Splunk",
              "DatadogMetrics",
              "DatadogLog",
              "Dynatrace",
              "ErrorTracking",
              "CustomHealthMetric",
              "CustomHealthLog",
              "SplunkMetric",
              "ElasticSearch",
              "CloudWatchMetrics",
              "AwsPrometheus",
              "SumologicMetrics",
              "SumologicLogs"
            ]
          },
          "version": {
            "type": "string",
            "enum": [
              "v2"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/HealthSourceSpec"
          }
        }
      },
      "HealthSourceSpec": {
        "required": [
          "connectorRef"
        ],
        "type": "object",
        "properties": {
          "connectorRef": {
            "type": "string"
          }
        }
      },
      "MonitoredService": {
        "required": [
          "identifier",
          "name",
          "orgIdentifier",
          "projectIdentifier",
          "serviceRef",
          "type"
        ],
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Application",
              "Infrastructure"
            ]
          },
          "description": {
            "type": "string"
          },
          "serviceRef": {
            "type": "string"
          },
          "environmentRef": {
            "type": "string"
          },
          "environmentRefList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "sources": {
            "$ref": "#/components/schemas/Sources"
          },
          "dependencies": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDependencyDTO"
            }
          },
          "notificationRuleRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationRuleRefDTO"
            }
          },
          "template": {
            "$ref": "#/components/schemas/TemplateDTO"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "description": "This is the Monitored Service entity defined in Harness"
      },
      "MonitoredServiceResponse": {
        "required": [
          "monitoredService"
        ],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "monitoredService": {
            "$ref": "#/components/schemas/MonitoredService"
          }
        }
      },
      "NotificationRuleRefDTO": {
        "required": [
          "enabled",
          "notificationRuleRef"
        ],
        "type": "object",
        "properties": {
          "notificationRuleRef": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "RestResponseMonitoredServiceResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/MonitoredServiceResponse"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "ServiceDependencyDTO": {
        "type": "object",
        "properties": {
          "monitoredServiceIdentifier": {
            "type": "string"
          },
          "dependencyMetadata": {
            "$ref": "#/components/schemas/ServiceDependencyMetadata"
          }
        }
      },
      "ServiceDependencyMetadata": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "KUBERNETES"
            ]
          },
          "supportedChangeSourceTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HarnessCDNextGen",
                "PagerDuty",
                "K8sCluster",
                "HarnessCD",
                "HarnessFF",
                "CustomDeploy",
                "CustomIncident",
                "CustomInfrastructure",
                "CustomFF"
              ]
            }
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Sources": {
        "type": "object",
        "properties": {
          "healthSources": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthSource"
            }
          },
          "changeSources": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeSourceDTO"
            }
          }
        }
      },
      "TemplateDTO": {
        "required": [
          "templateRef",
          "versionLabel"
        ],
        "type": "object",
        "properties": {
          "templateRef": {
            "type": "string"
          },
          "versionLabel": {
            "type": "string"
          }
        }
      },
      "ProjectParams": {
        "required": [
          "accountIdentifier"
        ],
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          }
        }
      },
      "ResponseDTOMonitoredServiceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MonitoredServiceResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "HealthSourceSummary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        }
      },
      "MonitoredServiceWithHealthSources": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "healthSources": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthSourceSummary"
            }
          }
        }
      },
      "ResponseDTOListMonitoredServiceWithHealthSources": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoredServiceWithHealthSources"
            }
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "AnomaliesSummaryDTO": {
        "type": "object",
        "properties": {
          "logsAnomalies": {
            "type": "integer",
            "format": "int64"
          },
          "timeSeriesAnomalies": {
            "type": "integer",
            "format": "int64"
          },
          "totalAnomalies": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RestResponseAnomaliesSummaryDTO": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/AnomaliesSummaryDTO"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "CountServiceDTO": {
        "type": "object",
        "properties": {
          "allServicesCount": {
            "type": "integer",
            "format": "int32"
          },
          "servicesAtRiskCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "HealthSourceDTO": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "APP_DYNAMICS",
              "SPLUNK",
              "SPLUNK_METRIC",
              "STACKDRIVER",
              "STACKDRIVER_LOG",
              "KUBERNETES",
              "NEW_RELIC",
              "PROMETHEUS",
              "DATADOG_METRICS",
              "DATADOG_LOG",
              "ERROR_TRACKING",
              "DYNATRACE",
              "CUSTOM_HEALTH_METRIC",
              "CUSTOM_HEALTH_LOG",
              "ELASTICSEARCH",
              "CLOUDWATCH_METRICS",
              "AWS_PROMETHEUS",
              "SUMOLOGIC_METRICS",
              "SUMOLOGIC_LOG"
            ]
          },
          "verificationType": {
            "type": "string",
            "enum": [
              "TIME_SERIES",
              "LOG"
            ]
          }
        }
      },
      "RestResponseListHealthSourceDTO": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthSourceDTO"
            }
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "PageResponseMonitoredServiceResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoredServiceResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseMonitoredServiceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseMonitoredServiceResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "MonitoredServiceChangeDetailSLO": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "outOfRange": {
            "type": "boolean"
          }
        }
      },
      "RestResponseListMonitoredServiceChangeDetailSLO": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoredServiceChangeDetailSLO"
            }
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "CategoryCountDetails": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "countInPrecedingWindow": {
            "type": "integer",
            "format": "int64"
          },
          "percentageChange": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ChangeSummaryDTO": {
        "type": "object",
        "properties": {
          "categoryCountMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CategoryCountDetails"
            }
          },
          "total": {
            "$ref": "#/components/schemas/CategoryCountDetails"
          }
        }
      },
      "HistoricalTrend": {
        "type": "object",
        "properties": {
          "healthScores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskData"
            }
          }
        }
      },
      "MonitoredServiceListItemDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "serviceRef": {
            "type": "string"
          },
          "environmentRef": {
            "type": "string"
          },
          "environmentRefList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "serviceName": {
            "type": "string"
          },
          "environmentName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Application",
              "Infrastructure"
            ]
          },
          "healthMonitoringEnabled": {
            "type": "boolean"
          },
          "currentHealthScore": {
            "$ref": "#/components/schemas/RiskData"
          },
          "dependentHealthScore": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskData"
            }
          },
          "historicalTrend": {
            "$ref": "#/components/schemas/HistoricalTrend"
          },
          "changeSummary": {
            "$ref": "#/components/schemas/ChangeSummaryDTO"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "serviceMonitoringEnabled": {
            "type": "boolean"
          },
          "sloHealthIndicators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SloHealthIndicatorDTO"
            }
          }
        }
      },
      "RiskData": {
        "type": "object",
        "properties": {
          "healthScore": {
            "type": "integer",
            "format": "int32"
          },
          "riskStatus": {
            "type": "string",
            "enum": [
              "NO_DATA",
              "NO_ANALYSIS",
              "HEALTHY",
              "OBSERVE",
              "NEED_ATTENTION",
              "UNHEALTHY"
            ]
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "timeRangeParams": {
            "$ref": "#/components/schemas/TimeRangeParams"
          }
        }
      },
      "SloHealthIndicatorDTO": {
        "type": "object",
        "properties": {
          "serviceLevelObjectiveIdentifier": {
            "type": "string"
          },
          "monitoredServiceIdentifier": {
            "type": "string"
          },
          "errorBudgetRemainingPercentage": {
            "type": "number",
            "format": "double"
          },
          "errorBudgetRemainingMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "errorBudgetBurnRate": {
            "type": "number",
            "format": "double"
          },
          "errorBudgetRisk": {
            "type": "string",
            "enum": [
              "EXHAUSTED",
              "UNHEALTHY",
              "NEED_ATTENTION",
              "OBSERVE",
              "HEALTHY"
            ]
          }
        }
      },
      "TimeRangeParams": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiCallLogDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CVNGLog"
          },
          {
            "type": "object",
            "properties": {
              "requests": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiCallLogDTOField"
                }
              },
              "responses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiCallLogDTOField"
                }
              },
              "requestTime": {
                "type": "integer",
                "format": "int64"
              },
              "responseTime": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ApiCallLogDTOField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "JSON",
              "XML",
              "NUMBER",
              "URL",
              "TEXT",
              "TIMESTAMP"
            ]
          }
        }
      },
      "CVNGLog": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "traceableId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CVNGLogTag"
            }
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "traceableType": {
            "type": "string",
            "enum": [
              "ONBOARDING",
              "VERIFICATION_TASK"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "ApiCallLog",
              "ExecutionLog"
            ]
          }
        },
        "description": "This is the CVNG Log entity defined in Harness",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "CVNGLogTag": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "TIMESTAMP",
              "STRING",
              "DEBUG"
            ]
          }
        }
      },
      "ExecutionLogDTO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CVNGLog"
          },
          {
            "type": "object",
            "properties": {
              "log": {
                "type": "string"
              },
              "logLevel": {
                "type": "string",
                "enum": [
                  "INFO",
                  "WARN",
                  "ERROR"
                ]
              }
            }
          }
        ]
      },
      "PageResponseCVNGLog": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CVNGLog"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "RestResponsePageResponseCVNGLog": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/PageResponseCVNGLog"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "HealthScoreDTO": {
        "type": "object",
        "properties": {
          "currentHealthScore": {
            "$ref": "#/components/schemas/RiskData"
          },
          "dependentHealthScore": {
            "$ref": "#/components/schemas/RiskData"
          }
        }
      },
      "ResponseDTOHealthScoreDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/HealthScoreDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "CVNGEmailChannelSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CVNGNotificationChannelSpec"
          },
          {
            "type": "object",
            "properties": {
              "userGroups": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "recipients": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "CVNGMSTeamsChannelSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CVNGNotificationChannelSpec"
          },
          {
            "type": "object",
            "properties": {
              "msTeamKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "userGroups": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "CVNGNotificationChannel": {
        "required": [
          "spec"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Email",
              "Slack",
              "PagerDuty",
              "MsTeams"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/CVNGNotificationChannelSpec"
          }
        }
      },
      "CVNGNotificationChannelSpec": {
        "type": "object"
      },
      "CVNGPagerDutyChannelSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CVNGNotificationChannelSpec"
          },
          {
            "type": "object",
            "properties": {
              "userGroups": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "integrationKey": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CVNGSlackChannelSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CVNGNotificationChannelSpec"
          },
          {
            "type": "object",
            "properties": {
              "userGroups": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "webhookUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ChangeImpactConditionSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationRuleConditionSpec"
          },
          {
            "type": "object",
            "properties": {
              "changeEventTypes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "Deployment",
                    "Infrastructure",
                    "Incident"
                  ]
                }
              },
              "threshold": {
                "maximum": 100,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "period": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ChangeObservedConditionSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationRuleConditionSpec"
          },
          {
            "type": "object",
            "properties": {
              "changeEventTypes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "Deployment",
                    "Infrastructure",
                    "Incident"
                  ]
                }
              }
            }
          }
        ]
      },
      "ErrorBudgetBurnRateConditionSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationRuleConditionSpec"
          },
          {
            "type": "object",
            "properties": {
              "threshold": {
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "lookBackDuration": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ErrorBudgetRemainingMinutesConditionSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationRuleConditionSpec"
          },
          {
            "type": "object",
            "properties": {
              "threshold": {
                "type": "number",
                "format": "double"
              }
            }
          }
        ]
      },
      "ErrorBudgetRemainingPercentageConditionSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationRuleConditionSpec"
          },
          {
            "type": "object",
            "properties": {
              "threshold": {
                "minimum": 0,
                "type": "number",
                "format": "double"
              }
            }
          }
        ]
      },
      "ErrorTrackingConditionSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationRuleConditionSpec"
          },
          {
            "type": "object",
            "properties": {
              "errorTrackingEventTypes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "Exceptions",
                    "LogErrors",
                    "HttpErrors",
                    "CustomErrors",
                    "TimeoutErrors"
                  ]
                }
              },
              "errorTrackingEventStatus": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "NewEvents"
                  ]
                }
              }
            }
          }
        ]
      },
      "HealthScoreConditionSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationRuleConditionSpec"
          },
          {
            "type": "object",
            "properties": {
              "threshold": {
                "maximum": 100,
                "minimum": 0,
                "type": "number",
                "format": "double"
              },
              "period": {
                "type": "string"
              }
            }
          }
        ]
      },
      "NotificationRule": {
        "required": [
          "conditions",
          "identifier",
          "name",
          "notificationMethod",
          "type"
        ],
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MonitoredService",
              "ServiceLevelObjective"
            ]
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationRuleCondition"
            }
          },
          "notificationMethod": {
            "$ref": "#/components/schemas/CVNGNotificationChannel"
          }
        },
        "description": "This is the Notification Rule entity defined in Harness"
      },
      "NotificationRuleCondition": {
        "required": [
          "spec"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ErrorBudgetRemainingPercentage",
              "ErrorBudgetRemainingMinutes",
              "ErrorBudgetBurnRate",
              "ChangeImpact",
              "HealthScore",
              "ChangeObserved",
              "CodeErrors"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/NotificationRuleConditionSpec"
          }
        }
      },
      "NotificationRuleConditionSpec": {
        "type": "object"
      },
      "NotificationRuleResponse": {
        "required": [
          "notificationRule"
        ],
        "type": "object",
        "properties": {
          "notificationRule": {
            "$ref": "#/components/schemas/NotificationRule"
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageResponseNotificationRuleResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationRuleResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseNotificationRuleResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseNotificationRuleResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOHistoricalTrend": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/HistoricalTrend"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "MetricDTO": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "metricName": {
            "type": "string"
          }
        }
      },
      "RestResponseListMetricDTO": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricDTO"
            }
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "PageResponseMonitoredServiceListItemDTO": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoredServiceListItemDTO"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseMonitoredServiceListItemDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseMonitoredServiceListItemDTO"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "HealthMonitoringFlagResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "healthMonitoringEnabled": {
            "type": "boolean"
          }
        }
      },
      "RestResponseHealthMonitoringFlagResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/HealthMonitoringFlagResponse"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "RestResponseString": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "string"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "MSDropdownResponse": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "serviceRef": {
            "type": "string"
          },
          "environmentRef": {
            "type": "string"
          }
        }
      },
      "PageResponseMSDropdownResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MSDropdownResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseMSDropdownResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseMSDropdownResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "ResponseDTOSLORiskCountResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SLORiskCountResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RiskCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          }
        }
      },
      "SLORiskCountResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "riskCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskCount"
            }
          }
        }
      },
      "CalenderSLOTargetSpec": {
        "required": [
          "spec"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SLOTargetSpec"
          },
          {
            "type": "object",
            "properties": {
              "spec": {
                "$ref": "#/components/schemas/CalenderSpec"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Weekly",
                  "Monthly",
                  "Quarterly"
                ]
              }
            }
          }
        ]
      },
      "CalenderSpec": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "MonthlyCalenderSpec": {
        "required": [
          "dayOfMonth"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CalenderSpec"
          },
          {
            "type": "object",
            "properties": {
              "dayOfMonth": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "QuarterlyCalenderSpec": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CalenderSpec"
          }
        ]
      },
      "RollingSLOTargetSpec": {
        "required": [
          "periodLength"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SLOTargetSpec"
          },
          {
            "type": "object",
            "properties": {
              "periodLength": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SLOTargetFilterDTO": {
        "required": [
          "spec"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Rolling",
              "Calender"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/SLOTargetSpec"
          }
        }
      },
      "SLOTargetSpec": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "WeeklyCalendarSpec": {
        "required": [
          "dayOfWeek"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CalenderSpec"
          },
          {
            "type": "object",
            "properties": {
              "dayOfWeek": {
                "type": "string",
                "enum": [
                  "Mon",
                  "Tue",
                  "Wed",
                  "Thu",
                  "Fri",
                  "Sat",
                  "Sun"
                ]
              }
            }
          }
        ]
      },
      "PageResponseSLOConsumptionBreakdown": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SLOConsumptionBreakdown"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseSLOConsumptionBreakdown": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseSLOConsumptionBreakdown"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SLOConsumptionBreakdown": {
        "required": [
          "contributedErrorBudgetBurned",
          "environmentIdentifier",
          "errorBudgetBurned",
          "monitoredServiceIdentifier",
          "projectParams",
          "serviceName",
          "sliStatusPercentage",
          "sliType",
          "sloIdentifier",
          "sloName",
          "sloTargetPercentage",
          "weightagePercentage"
        ],
        "type": "object",
        "properties": {
          "sloIdentifier": {
            "type": "string"
          },
          "sloName": {
            "type": "string"
          },
          "monitoredServiceIdentifier": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "environmentIdentifier": {
            "type": "string"
          },
          "sliType": {
            "type": "string",
            "enum": [
              "Availability",
              "Latency"
            ]
          },
          "weightagePercentage": {
            "type": "number",
            "format": "double"
          },
          "sloTargetPercentage": {
            "type": "number",
            "format": "double"
          },
          "sliStatusPercentage": {
            "type": "number",
            "format": "double"
          },
          "errorBudgetBurned": {
            "type": "integer",
            "format": "int32"
          },
          "contributedErrorBudgetBurned": {
            "type": "integer",
            "format": "int32"
          },
          "projectParams": {
            "$ref": "#/components/schemas/ProjectParams"
          },
          "orgName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          }
        }
      },
      "BurnRate": {
        "required": [
          "currentRatePercentage"
        ],
        "type": "object",
        "properties": {
          "currentRatePercentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MonitoredServiceDetail": {
        "type": "object",
        "properties": {
          "monitoredServiceIdentifier": {
            "type": "string"
          },
          "monitoredServiceName": {
            "type": "string"
          },
          "healthSourceIdentifier": {
            "type": "string"
          },
          "healthSourceName": {
            "type": "string"
          },
          "serviceIdentifier": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "environmentIdentifier": {
            "type": "string"
          },
          "environmentName": {
            "type": "string"
          },
          "projectParams": {
            "$ref": "#/components/schemas/ProjectParams"
          },
          "projectName": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          }
        }
      },
      "Point": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOSLODashboardDetail": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SLODashboardDetail"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SLODashboardDetail": {
        "type": "object",
        "properties": {
          "sloDashboardWidget": {
            "$ref": "#/components/schemas/SLODashboardWidget"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "timeRangeFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRangeFilter"
            }
          }
        }
      },
      "SLODashboardWidget": {
        "required": [
          "burnRate",
          "currentPeriodEndTime",
          "currentPeriodLengthDays",
          "currentPeriodStartTime",
          "errorBudgetBurndown",
          "errorBudgetRemaining",
          "errorBudgetRemainingPercentage",
          "errorBudgetRisk",
          "sloIdentifier",
          "sloPerformanceTrend",
          "sloTargetPercentage",
          "sloTargetType",
          "sloType",
          "timeRemainingDays",
          "title",
          "totalErrorBudget"
        ],
        "type": "object",
        "properties": {
          "sloIdentifier": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "monitoredServiceIdentifier": {
            "type": "string"
          },
          "monitoredServiceName": {
            "type": "string"
          },
          "healthSourceIdentifier": {
            "type": "string"
          },
          "healthSourceName": {
            "type": "string"
          },
          "serviceIdentifier": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "environmentIdentifier": {
            "type": "string"
          },
          "environmentName": {
            "type": "string"
          },
          "monitoredServiceDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoredServiceDetail"
            }
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "Availability",
              "Latency"
            ]
          },
          "sloType": {
            "type": "string",
            "enum": [
              "Simple",
              "Composite"
            ]
          },
          "burnRate": {
            "$ref": "#/components/schemas/BurnRate"
          },
          "timeRemainingDays": {
            "type": "integer",
            "format": "int32"
          },
          "errorBudgetRemainingPercentage": {
            "type": "number",
            "format": "double"
          },
          "errorBudgetRemaining": {
            "type": "integer",
            "format": "int32"
          },
          "totalErrorBudget": {
            "type": "integer",
            "format": "int32"
          },
          "sloTargetType": {
            "type": "string",
            "enum": [
              "Rolling",
              "Calender"
            ]
          },
          "currentPeriodLengthDays": {
            "type": "integer",
            "format": "int32"
          },
          "currentPeriodStartTime": {
            "type": "integer",
            "format": "int64"
          },
          "currentPeriodEndTime": {
            "type": "integer",
            "format": "int64"
          },
          "sloTargetPercentage": {
            "type": "number",
            "format": "double"
          },
          "errorBudgetBurndown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point"
            }
          },
          "sloPerformanceTrend": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point"
            }
          },
          "isRecalculatingSLI": {
            "type": "boolean",
            "writeOnly": true
          },
          "isCalculatingSLI": {
            "type": "boolean",
            "writeOnly": true
          },
          "errorBudgetRisk": {
            "type": "string",
            "enum": [
              "EXHAUSTED",
              "UNHEALTHY",
              "NEED_ATTENTION",
              "OBSERVE",
              "HEALTHY"
            ]
          },
          "calculatingSLI": {
            "type": "boolean"
          },
          "recalculatingSLI": {
            "type": "boolean"
          }
        }
      },
      "TimeRangeFilter": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "durationMilliSeconds": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageResponseSLODashboardWidget": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SLODashboardWidget"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseSLODashboardWidget": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseSLODashboardWidget"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "PageResponseSLOHealthListView": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SLOHealthListView"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseSLOHealthListView": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseSLOHealthListView"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "SLOHealthListView": {
        "required": [
          "burnRate",
          "errorBudgetRemaining",
          "errorBudgetRemainingPercentage",
          "errorBudgetRisk",
          "name",
          "noOfActiveAlerts",
          "projectParams",
          "sloIdentifier",
          "sloTargetPercentage",
          "sloTargetType",
          "sloType",
          "totalErrorBudget",
          "userJourneys"
        ],
        "type": "object",
        "properties": {
          "sloIdentifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "monitoredServiceIdentifier": {
            "type": "string"
          },
          "monitoredServiceName": {
            "type": "string"
          },
          "healthSourceIdentifier": {
            "type": "string"
          },
          "healthSourceName": {
            "type": "string"
          },
          "serviceIdentifier": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "environmentIdentifier": {
            "type": "string"
          },
          "environmentName": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "userJourneyName": {
            "type": "string"
          },
          "userJourneys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserJourneyDTO"
            }
          },
          "burnRate": {
            "type": "number",
            "format": "double"
          },
          "errorBudgetRemainingPercentage": {
            "type": "number",
            "format": "double"
          },
          "errorBudgetRemaining": {
            "type": "integer",
            "format": "int32"
          },
          "totalErrorBudget": {
            "type": "integer",
            "format": "int32"
          },
          "sloTargetType": {
            "type": "string",
            "enum": [
              "Rolling",
              "Calender"
            ]
          },
          "sliType": {
            "type": "string",
            "enum": [
              "Availability",
              "Latency"
            ]
          },
          "sloType": {
            "type": "string",
            "enum": [
              "Simple",
              "Composite"
            ]
          },
          "sloTargetPercentage": {
            "type": "number",
            "format": "double"
          },
          "noOfActiveAlerts": {
            "type": "integer",
            "format": "int32"
          },
          "projectParams": {
            "$ref": "#/components/schemas/ProjectParams"
          },
          "errorBudgetRisk": {
            "type": "string",
            "enum": [
              "EXHAUSTED",
              "UNHEALTHY",
              "NEED_ATTENTION",
              "OBSERVE",
              "HEALTHY"
            ]
          }
        }
      },
      "UserJourneyDTO": {
        "required": [
          "identifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SLODashboardApiFilter": {
        "type": "object",
        "properties": {
          "userJourneyIdentifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "monitoredServiceIdentifier": {
            "type": "string"
          },
          "sliTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Availability",
                "Latency"
              ]
            }
          },
          "targetTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Rolling",
                "Calender"
              ]
            }
          },
          "errorBudgetRisks": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EXHAUSTED",
                "UNHEALTHY",
                "NEED_ATTENTION",
                "OBSERVE",
                "HEALTHY"
              ]
            }
          },
          "searchFilter": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Simple",
              "Composite"
            ]
          },
          "sloTargetFilterDTO": {
            "$ref": "#/components/schemas/SLOTargetFilterDTO"
          },
          "compositeSLOIdentifier": {
            "type": "string"
          },
          "childResource": {
            "type": "boolean"
          }
        }
      },
      "DataPoints": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          },
          "timeStamp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RestResponseTimeGraphResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/TimeGraphResponse"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "TimeGraphResponse": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "dataPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoints"
            }
          }
        }
      },
      "CompositeServiceLevelObjectiveSpec": {
        "required": [
          "serviceLevelObjectivesDetails"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceLevelObjectiveSpec"
          },
          {
            "type": "object",
            "properties": {
              "serviceLevelObjectivesDetails": {
                "maxItems": 20,
                "minItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelObjectiveDetailsDTO"
                }
              }
            }
          }
        ]
      },
      "ServiceLevelObjectiveDetailsDTO": {
        "required": [
          "accountId",
          "orgIdentifier",
          "projectIdentifier",
          "serviceLevelObjectiveRef",
          "weightagePercentage"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "serviceLevelObjectiveRef": {
            "type": "string"
          },
          "weightagePercentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "AbstractServiceLevelObjective": {
        "required": [
          "identifier",
          "name",
          "sloTarget",
          "spec",
          "type",
          "userJourneyRefs"
        ],
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userJourneyRefs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sloTarget": {
            "$ref": "#/components/schemas/SLOTargetDTO"
          },
          "type": {
            "type": "string",
            "enum": [
              "Simple",
              "Composite"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/ServiceLevelObjectiveSpec"
          },
          "notificationRuleRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationRuleRefDTO"
            }
          }
        },
        "description": "This is the Service Level Objective V2 entity defined in Harness"
      },
      "RatioSLIMetricSpec": {
        "required": [
          "eventType",
          "metric1",
          "metric2",
          "thresholdType",
          "thresholdValue"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SLIMetricSpec"
          },
          {
            "type": "object",
            "properties": {
              "eventType": {
                "type": "string",
                "enum": [
                  "Good",
                  "Bad"
                ]
              },
              "metric1": {
                "type": "string"
              },
              "metric2": {
                "type": "string"
              },
              "thresholdValue": {
                "type": "number",
                "format": "double"
              },
              "thresholdType": {
                "type": "string",
                "enum": [
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              }
            }
          }
        ]
      },
      "RestResponseServiceLevelObjectiveV2Response": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/ServiceLevelObjectiveV2Response"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "SLIMetricSpec": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SLOTargetDTO": {
        "required": [
          "sloTargetPercentage",
          "spec"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Rolling",
              "Calender"
            ]
          },
          "sloTargetPercentage": {
            "type": "number",
            "format": "double"
          },
          "spec": {
            "$ref": "#/components/schemas/SLOTargetSpec"
          }
        }
      },
      "ServiceLevelIndicatorDTO": {
        "required": [
          "sliMissingDataType",
          "spec",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Availability",
              "Latency"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/ServiceLevelIndicatorSpec"
          },
          "sliMissingDataType": {
            "type": "string",
            "enum": [
              "Good",
              "Bad",
              "Ignore"
            ]
          },
          "healthSourceRef": {
            "type": "string"
          }
        }
      },
      "ServiceLevelIndicatorSpec": {
        "required": [
          "spec"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Threshold",
              "Ratio"
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/SLIMetricSpec"
          }
        }
      },
      "ServiceLevelObjectiveSpec": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ServiceLevelObjectiveV2Response": {
        "required": [
          "serviceLevelObjectiveV2"
        ],
        "type": "object",
        "properties": {
          "serviceLevelObjectiveV2": {
            "$ref": "#/components/schemas/AbstractServiceLevelObjective"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SimpleServiceLevelObjectiveSpec": {
        "required": [
          "healthSourceRef",
          "monitoredServiceRef",
          "serviceLevelIndicatorType",
          "serviceLevelIndicators"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceLevelObjectiveSpec"
          },
          {
            "type": "object",
            "properties": {
              "monitoredServiceRef": {
                "type": "string"
              },
              "healthSourceRef": {
                "type": "string"
              },
              "serviceLevelIndicatorType": {
                "type": "string",
                "enum": [
                  "Availability",
                  "Latency"
                ]
              },
              "serviceLevelIndicators": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceLevelIndicatorDTO"
                }
              }
            }
          }
        ]
      },
      "ThresholdSLIMetricSpec": {
        "required": [
          "metric1",
          "thresholdType",
          "thresholdValue"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SLIMetricSpec"
          },
          {
            "type": "object",
            "properties": {
              "metric1": {
                "type": "string"
              },
              "thresholdValue": {
                "type": "number",
                "format": "double"
              },
              "thresholdType": {
                "type": "string",
                "enum": [
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              }
            }
          }
        ]
      },
      "PageResponseServiceLevelObjectiveV2Response": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceLevelObjectiveV2Response"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseServiceLevelObjectiveV2Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseServiceLevelObjectiveV2Response"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RestResponseListSLOErrorBudgetReset": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SLOErrorBudgetReset"
            }
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "SLOErrorBudgetReset": {
        "type": "object",
        "properties": {
          "serviceLevelObjectiveIdentifier": {
            "type": "string"
          },
          "errorBudgetIncrementPercentage": {
            "type": "number",
            "format": "double"
          },
          "errorBudgetIncrementMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "remainingErrorBudgetAtReset": {
            "type": "integer",
            "format": "int32"
          },
          "errorBudgetAtReset": {
            "type": "integer",
            "format": "int32"
          },
          "reason": {
            "type": "string"
          },
          "validUntil": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "This is the SLO Error Budget Reset entity defined in Harness"
      },
      "RestResponseServiceLevelObjectiveResponse": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/ServiceLevelObjectiveResponse"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "ServiceLevelObjective": {
        "required": [
          "healthSourceRef",
          "identifier",
          "monitoredServiceRef",
          "name",
          "orgIdentifier",
          "projectIdentifier",
          "serviceLevelIndicators",
          "target",
          "userJourneyRef"
        ],
        "type": "object",
        "properties": {
          "orgIdentifier": {
            "type": "string"
          },
          "projectIdentifier": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userJourneyRef": {
            "type": "string"
          },
          "monitoredServiceRef": {
            "type": "string"
          },
          "healthSourceRef": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "Availability",
              "Latency"
            ]
          },
          "serviceLevelIndicators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceLevelIndicatorDTO"
            }
          },
          "target": {
            "$ref": "#/components/schemas/SLOTargetDTO"
          },
          "notificationRuleRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationRuleRefDTO"
            }
          }
        },
        "description": "This is the Service Level Objective entity defined in Harness"
      },
      "ServiceLevelObjectiveResponse": {
        "required": [
          "serviceLevelObjective"
        ],
        "type": "object",
        "properties": {
          "serviceLevelObjective": {
            "$ref": "#/components/schemas/ServiceLevelObjective"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifiedAt": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageResponseServiceLevelObjectiveResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int64"
          },
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageSize": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceLevelObjectiveResponse"
            }
          },
          "pageIndex": {
            "type": "integer",
            "format": "int64"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ResponseDTOPageResponseServiceLevelObjectiveResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE",
              "ERROR"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseServiceLevelObjectiveResponse"
          },
          "metaData": {
            "type": "object"
          },
          "correlationId": {
            "type": "string"
          }
        }
      },
      "RestResponseSLOErrorBudgetReset": {
        "type": "object",
        "properties": {
          "metaData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "resource": {
            "$ref": "#/components/schemas/SLOErrorBudgetReset"
          },
          "responseMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            }
          }
        }
      },
      "apicorev1Event": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ObjectMeta"
          },
          "involvedObject": {
            "$ref": "#/components/schemas/v1ObjectReference"
          },
          "reason": {
            "type": "string",
            "title": "This should be a short, machine understandable string that gives the reason\nfor the transition into the object's current status.\nTODO: provide exact specification for format.\n+optional"
          },
          "message": {
            "type": "string",
            "title": "A human-readable description of the status of this operation.\nTODO: decide on maximum length.\n+optional"
          },
          "source": {
            "$ref": "#/components/schemas/v1EventSource"
          },
          "firstTimestamp": {
            "$ref": "#/components/schemas/v1Time"
          },
          "lastTimestamp": {
            "$ref": "#/components/schemas/v1Time"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "title": "The number of times this event has occurred.\n+optional"
          },
          "type": {
            "type": "string",
            "title": "Type of this event (Normal, Warning), new types could be added in the future\n+optional"
          },
          "eventTime": {
            "$ref": "#/components/schemas/v1MicroTime"
          },
          "series": {
            "$ref": "#/components/schemas/v1EventSeries"
          },
          "action": {
            "type": "string",
            "title": "What action was taken/failed regarding to the Regarding object.\n+optional"
          },
          "related": {
            "$ref": "#/components/schemas/v1ObjectReference"
          },
          "reportingComponent": {
            "type": "string",
            "title": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.\n+optional"
          },
          "reportingInstance": {
            "type": "string",
            "title": "ID of the controller instance, e.g. `kubelet-xyzf`.\n+optional"
          }
        },
        "description": "Event is a report of an event somewhere in the cluster.  Events\nhave a limited retention time and triggers and messages may evolve\nwith time.  Event consumers should not rely on the timing of an event\nwith a given Reason reflecting a consistent underlying trigger, or the\ncontinued existence of events with that Reason.  Events should be\ntreated as informative, best-effort, supplemental data."
      },
      "applicationsApplication": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ObjectMeta"
          },
          "spec": {
            "$ref": "#/components/schemas/applicationsApplicationSpec"
          },
          "status": {
            "$ref": "#/components/schemas/applicationsApplicationStatus"
          },
          "operation": {
            "$ref": "#/components/schemas/applicationsOperation"
          }
        },
        "title": "Application is a definition of Application resource.\n+genclient\n+genclient:noStatus\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n+kubebuilder:resource:path=applications,shortName=app;apps\n+kubebuilder:printcolumn:name=\"Sync Status\",type=string,JSONPath=`.status.sync.status`\n+kubebuilder:printcolumn:name=\"Health Status\",type=string,JSONPath=`.status.health.status`\n+kubebuilder:printcolumn:name=\"Revision\",type=string,JSONPath=`.status.sync.revision`,priority=10"
      },
      "applicationsApplicationCondition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "title": "Type is an application condition type"
          },
          "message": {
            "type": "string",
            "title": "Message contains human-readable message indicating details about condition"
          },
          "lastTransitionTime": {
            "$ref": "#/components/schemas/v1Time"
          }
        },
        "title": "ApplicationCondition contains details about an application condition, which is usally an error or warning"
      },
      "applicationsApplicationCreateRequest": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/applicationsApplication"
          },
          "upsert": {
            "type": "boolean"
          },
          "validate": {
            "type": "boolean"
          },
          "project": {
            "type": "string"
          }
        }
      },
      "applicationsApplicationDeleteRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "cascade": {
            "type": "boolean"
          },
          "propagationPolicy": {
            "type": "string"
          }
        }
      },
      "applicationsApplicationDestination": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "title": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace specifies the target namespace for the application's resources.\nThe namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace"
          },
          "name": {
            "type": "string",
            "title": "Name is an alternate way of specifying the target cluster by its symbolic name"
          }
        },
        "title": "ApplicationDestination holds information about the application's destination"
      },
      "applicationsApplicationList": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ListMeta"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsApplication"
            }
          }
        },
        "title": "ApplicationList is list of Application resources\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object"
      },
      "applicationsApplicationManifestQuery": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          }
        },
        "title": "ManifestQuery is a query for manifest resources"
      },
      "applicationsApplicationPatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "patch": {
            "type": "string"
          },
          "patchType": {
            "type": "string"
          }
        },
        "title": "ApplicationPatchRequest is a request to patch an application"
      },
      "applicationsApplicationPodLogsQuery": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "podName": {
            "type": "string"
          },
          "container": {
            "type": "string"
          },
          "sinceSeconds": {
            "type": "string",
            "format": "int64"
          },
          "sinceTime": {
            "$ref": "#/components/schemas/v1Time"
          },
          "tailLines": {
            "type": "string",
            "format": "int64"
          },
          "follow": {
            "type": "boolean"
          },
          "untilTime": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "previous": {
            "type": "boolean"
          }
        }
      },
      "applicationsApplicationQuery": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "the application's name"
          },
          "refresh": {
            "type": "string",
            "title": "forces application reconciliation if set to true"
          },
          "project": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "the project names to restrict returned list applications"
          },
          "resourceVersion": {
            "type": "string",
            "description": "when specified with a watch call, shows changes that occur after that particular version of a resource."
          },
          "selector": {
            "type": "string",
            "title": "the selector to to restrict returned list to applications only with matched labels"
          },
          "repo": {
            "type": "string",
            "title": "the repoURL to restrict returned list applications"
          }
        },
        "title": "ApplicationQuery is a query for application resources"
      },
      "applicationsApplicationResourceDeleteRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "force": {
            "type": "boolean"
          },
          "orphan": {
            "type": "boolean"
          }
        }
      },
      "applicationsApplicationResourceEventsQuery": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "resourceNamespace": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "resourceUID": {
            "type": "string"
          }
        },
        "title": "ApplicationEventsQuery is a query for application resource events"
      },
      "applicationsApplicationResourcePatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "patch": {
            "type": "string"
          },
          "patchType": {
            "type": "string"
          }
        }
      },
      "applicationsApplicationResourceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "applicationsApplicationResourceResponse": {
        "type": "object",
        "properties": {
          "manifest": {
            "type": "string"
          }
        }
      },
      "applicationsApplicationResponse": {
        "type": "object"
      },
      "applicationsApplicationRollbackRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "int64"
          },
          "dryRun": {
            "type": "boolean"
          },
          "prune": {
            "type": "boolean"
          }
        }
      },
      "applicationsApplicationSource": {
        "type": "object",
        "properties": {
          "repoURL": {
            "type": "string",
            "title": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests"
          },
          "path": {
            "type": "string",
            "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git."
          },
          "targetRevision": {
            "type": "string",
            "description": "TargetRevision defines the revision of the source to sync the application to.\nIn case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.\nIn case of Helm, this is a semver tag for the Chart's version."
          },
          "helm": {
            "$ref": "#/components/schemas/applicationsApplicationSourceHelm"
          },
          "kustomize": {
            "$ref": "#/components/schemas/applicationsApplicationSourceKustomize"
          },
          "ksonnet": {
            "$ref": "#/components/schemas/applicationsApplicationSourceKsonnet"
          },
          "directory": {
            "$ref": "#/components/schemas/applicationsApplicationSourceDirectory"
          },
          "plugin": {
            "$ref": "#/components/schemas/applicationsApplicationSourcePlugin"
          },
          "chart": {
            "type": "string",
            "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo."
          }
        },
        "title": "ApplicationSource contains all information about the source of an application"
      },
      "applicationsApplicationSourceDirectory": {
        "type": "object",
        "properties": {
          "recurse": {
            "type": "boolean",
            "title": "Recurse specifies whether to scan a directory recursively for manifests"
          },
          "jsonnet": {
            "$ref": "#/components/schemas/applicationsApplicationSourceJsonnet"
          },
          "exclude": {
            "type": "string",
            "title": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation"
          },
          "include": {
            "type": "string",
            "title": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation"
          }
        },
        "title": "ApplicationSourceDirectory holds options for applications of type plain YAML or Jsonnet"
      },
      "applicationsApplicationSourceHelm": {
        "type": "object",
        "properties": {
          "valueFiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "ValuesFiles is a list of Helm value files to use when generating a template"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsHelmParameter"
            },
            "title": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation"
          },
          "releaseName": {
            "type": "string",
            "title": "ReleaseName is the Helm release name to use. If omitted it will use the application name"
          },
          "values": {
            "type": "string",
            "title": "Values specifies Helm values to be passed to helm template, typically defined as a block"
          },
          "fileParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsHelmFileParameter"
            },
            "title": "FileParameters are file parameters to the helm template"
          },
          "version": {
            "type": "string",
            "title": "Version is the Helm version to use for templating (either \"2\" or \"3\")"
          },
          "passCredentials": {
            "type": "boolean",
            "title": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)"
          }
        },
        "title": "ApplicationSourceHelm holds helm specific options"
      },
      "applicationsApplicationSourceJsonnet": {
        "type": "object",
        "properties": {
          "extVars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsJsonnetVar"
            },
            "title": "ExtVars is a list of Jsonnet External Variables"
          },
          "tlas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsJsonnetVar"
            },
            "title": "TLAS is a list of Jsonnet Top-level Arguments"
          },
          "libs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Additional library search dirs"
          }
        },
        "title": "ApplicationSourceJsonnet holds options specific to applications of type Jsonnet"
      },
      "applicationsApplicationSourceKsonnet": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment is a ksonnet application environment name"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsKsonnetParameter"
            },
            "title": "Parameters are a list of ksonnet component parameter override values"
          }
        },
        "title": "ApplicationSourceKsonnet holds ksonnet specific options"
      },
      "applicationsApplicationSourceKustomize": {
        "type": "object",
        "properties": {
          "namePrefix": {
            "type": "string",
            "title": "NamePrefix is a prefix appended to resources for Kustomize apps"
          },
          "nameSuffix": {
            "type": "string",
            "title": "NameSuffix is a suffix appended to resources for Kustomize apps"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Images is a list of Kustomize image override specifications"
          },
          "commonLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "CommonLabels is a list of additional labels to add to rendered manifests"
          },
          "version": {
            "type": "string",
            "title": "Version controls which version of Kustomize to use for rendering manifests"
          },
          "commonAnnotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "CommonAnnotations is a list of additional annotations to add to rendered manifests"
          },
          "forceCommonLabels": {
            "type": "boolean",
            "title": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps"
          },
          "forceCommonAnnotations": {
            "type": "boolean",
            "title": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps"
          }
        },
        "title": "ApplicationSourceKustomize holds options specific to an Application source specific to Kustomize"
      },
      "applicationsApplicationSourcePlugin": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "env": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsEnvEntry"
            }
          }
        },
        "title": "ApplicationSourcePlugin holds options specific to config management plugins"
      },
      "applicationsApplicationSpec": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/applicationsApplicationSource"
          },
          "destination": {
            "$ref": "#/components/schemas/applicationsApplicationDestination"
          },
          "project": {
            "type": "string",
            "description": "Project is a reference to the project this application belongs to.\nThe empty string means that application belongs to the 'default' project."
          },
          "syncPolicy": {
            "$ref": "#/components/schemas/applicationsSyncPolicy"
          },
          "ignoreDifferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceIgnoreDifferences"
            },
            "title": "IgnoreDifferences is a list of resources and their fields which should be ignored during comparison"
          },
          "info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsInfo"
            },
            "title": "Info contains a list of information (URLs, email addresses, and plain text) that relates to the application"
          },
          "revisionHistoryLimit": {
            "type": "string",
            "format": "int64",
            "description": "RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.\nThis should only be changed in exceptional circumstances.\nSetting to zero will store no history. This will reduce storage used.\nIncreasing will increase the space used to store the history, so we do not recommend increasing it.\nDefault is 10."
          }
        },
        "description": "ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision."
      },
      "applicationsApplicationStatus": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceStatus"
            },
            "title": "Resources is a list of Kubernetes resources managed by this application"
          },
          "sync": {
            "$ref": "#/components/schemas/applicationsSyncStatus"
          },
          "health": {
            "$ref": "#/components/schemas/applicationsHealthStatus"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsRevisionHistory"
            },
            "title": "History contains information about the application's sync history"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsApplicationCondition"
            },
            "title": "Conditions is a list of currently observed application conditions"
          },
          "reconciledAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "operationState": {
            "$ref": "#/components/schemas/applicationsOperationState"
          },
          "observedAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "sourceType": {
            "type": "string",
            "title": "SourceType specifies the type of this application"
          },
          "summary": {
            "$ref": "#/components/schemas/applicationsApplicationSummary"
          }
        },
        "title": "ApplicationStatus contains status information for the application"
      },
      "applicationsApplicationSummary": {
        "type": "object",
        "properties": {
          "externalURLs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ExternalURLs holds all external URLs of application child resources."
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Images holds all images of application child resources."
          }
        },
        "title": "ApplicationSummary contains information about URLs and container images used by an application"
      },
      "applicationsApplicationSyncRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "dryRun": {
            "type": "boolean"
          },
          "prune": {
            "type": "boolean"
          },
          "strategy": {
            "$ref": "#/components/schemas/applicationsSyncStrategy"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsSyncOperationResource"
            }
          },
          "manifests": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "infos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsInfo"
            }
          },
          "retryStrategy": {
            "$ref": "#/components/schemas/applicationsRetryStrategy"
          },
          "syncOptions": {
            "$ref": "#/components/schemas/applicationsSyncOptions"
          }
        },
        "title": "ApplicationSyncRequest is a request to apply the config state to live state"
      },
      "applicationsApplicationSyncWindow": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string"
          },
          "schedule": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "manualSync": {
            "type": "boolean"
          }
        }
      },
      "applicationsApplicationSyncWindowsQuery": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "applicationsApplicationSyncWindowsResponse": {
        "type": "object",
        "properties": {
          "activeWindows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsApplicationSyncWindow"
            }
          },
          "assignedWindows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsApplicationSyncWindow"
            }
          },
          "canSync": {
            "type": "boolean"
          }
        }
      },
      "applicationsApplicationTree": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceNode"
            },
            "description": "Nodes contains list of nodes which either directly managed by the application and children of directly managed nodes."
          },
          "orphanedNodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceNode"
            },
            "description": "OrphanedNodes contains if or orphaned nodes: nodes which are not managed by the app but in the same namespace. List is populated only if orphaned resources enabled in app project."
          },
          "hosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsHostInfo"
            },
            "title": "Hosts holds list of Kubernetes nodes that run application related pods"
          }
        },
        "title": "ApplicationTree holds nodes which belongs to the application\nTODO: describe purpose of this type"
      },
      "applicationsApplicationUpdateRequest": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/applicationsApplication"
          },
          "validate": {
            "type": "boolean"
          }
        }
      },
      "applicationsApplicationUpdateSpecRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/components/schemas/applicationsApplicationSpec"
          },
          "validate": {
            "type": "boolean"
          }
        },
        "title": "ApplicationUpdateSpecRequest is a request to update application spec"
      },
      "applicationsApplicationWatchEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "application": {
            "$ref": "#/components/schemas/applicationsApplication"
          }
        },
        "description": "ApplicationWatchEvent contains information about application change."
      },
      "applicationsBackoff": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "string",
            "title": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")"
          },
          "factor": {
            "type": "string",
            "format": "int64",
            "title": "Factor is a factor to multiply the base duration after each failed retry"
          },
          "maxDuration": {
            "type": "string",
            "title": "MaxDuration is the maximum amount of time allowed for the backoff strategy"
          }
        },
        "title": "Backoff is the backoff strategy to use on subsequent retries for failing syncs"
      },
      "applicationsComparedTo": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/applicationsApplicationSource"
          },
          "destination": {
            "$ref": "#/components/schemas/applicationsApplicationDestination"
          }
        },
        "title": "ComparedTo contains application source and target which was used for resources comparison"
      },
      "applicationsEnvEntry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name is the name of the variable, usually expressed in uppercase"
          },
          "value": {
            "type": "string",
            "title": "Value is the value of the variable"
          }
        },
        "title": "EnvEntry represents an entry in the application's environment"
      },
      "applicationsHealthStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "title": "Status holds the status code of the application or resource"
          },
          "message": {
            "type": "string",
            "title": "Message is a human-readable informational message describing the health status"
          }
        },
        "title": "HealthStatus contains information about the currently observed health state of an application or resource"
      },
      "applicationsHelmFileParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name is the name of the Helm parameter"
          },
          "path": {
            "type": "string",
            "title": "Path is the path to the file containing the values for the Helm parameter"
          }
        },
        "title": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation"
      },
      "applicationsHelmParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name is the name of the Helm parameter"
          },
          "value": {
            "type": "string",
            "title": "Value is the value for the Helm parameter"
          },
          "forceString": {
            "type": "boolean",
            "title": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings"
          }
        },
        "title": "HelmParameter is a parameter that's passed to helm template during manifest generation"
      },
      "applicationsHostInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "resourcesInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsHostResourceInfo"
            }
          },
          "systemInfo": {
            "$ref": "#/components/schemas/v1NodeSystemInfo"
          }
        },
        "title": "HostInfo holds host name and resources metrics\nTODO: describe purpose of this type\nTODO: describe members of this type"
      },
      "applicationsHostResourceInfo": {
        "type": "object",
        "properties": {
          "resourceName": {
            "type": "string"
          },
          "requestedByApp": {
            "type": "string",
            "format": "int64"
          },
          "requestedByNeighbors": {
            "type": "string",
            "format": "int64"
          },
          "capacity": {
            "type": "string",
            "format": "int64"
          }
        },
        "title": "TODO: describe this type"
      },
      "applicationsInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "applicationsInfoItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name is a human readable title for this piece of information."
          },
          "value": {
            "type": "string",
            "description": "Value is human readable content."
          }
        },
        "title": "InfoItem contains arbitrary, human readable information about an application"
      },
      "applicationsJsonnetVar": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "code": {
            "type": "boolean"
          }
        },
        "title": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation"
      },
      "applicationsKsonnetParameter": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "title": "KsonnetParameter is a ksonnet component parameter"
      },
      "applicationsLogEntry": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "timeStamp": {
            "$ref": "#/components/schemas/v1Time"
          },
          "last": {
            "type": "boolean"
          },
          "timeStampStr": {
            "type": "string"
          },
          "podName": {
            "type": "string"
          }
        }
      },
      "applicationsManagedResourcesResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceDiff"
            }
          }
        }
      },
      "applicationsOperation": {
        "type": "object",
        "properties": {
          "sync": {
            "$ref": "#/components/schemas/applicationsSyncOperation"
          },
          "initiatedBy": {
            "$ref": "#/components/schemas/applicationsOperationInitiator"
          },
          "info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsInfo"
            },
            "title": "Info is a list of informational items for this operation"
          },
          "retry": {
            "$ref": "#/components/schemas/applicationsRetryStrategy"
          }
        },
        "title": "Operation contains information about a requested or running operation"
      },
      "applicationsOperationInitiator": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "title": "Username contains the name of a user who started operation"
          },
          "automated": {
            "type": "boolean",
            "description": "Automated is set to true if operation was initiated automatically by the application controller."
          }
        },
        "title": "OperationInitiator contains information about the initiator of an operation"
      },
      "applicationsOperationState": {
        "type": "object",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/applicationsOperation"
          },
          "phase": {
            "type": "string",
            "title": "Phase is the current phase of the operation"
          },
          "message": {
            "type": "string",
            "description": "Message holds any pertinent messages when attempting to perform operation (typically errors)."
          },
          "syncResult": {
            "$ref": "#/components/schemas/applicationsSyncOperationResult"
          },
          "startedAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "finishedAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "retryCount": {
            "type": "string",
            "format": "int64",
            "title": "RetryCount contains time of operation retries"
          }
        },
        "title": "OperationState contains information about state of a running operation"
      },
      "applicationsOperationTerminateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "applicationsOperationTerminateResponse": {
        "type": "object"
      },
      "applicationsResourceAction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceActionParam"
            }
          },
          "disabled": {
            "type": "boolean"
          }
        },
        "title": "TODO: describe this type\nTODO: describe members of this type"
      },
      "applicationsResourceActionParam": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "default": {
            "type": "string"
          }
        },
        "title": "TODO: describe this type\nTODO: describe members of this type"
      },
      "applicationsResourceActionRunRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "resourceName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "action": {
            "type": "string"
          }
        }
      },
      "applicationsResourceActionsListResponse": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceAction"
            }
          }
        }
      },
      "applicationsResourceDiff": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "targetState": {
            "type": "string",
            "title": "TargetState contains the JSON serialized resource manifest defined in the Git/Helm"
          },
          "liveState": {
            "type": "string",
            "title": "TargetState contains the JSON live resource manifest"
          },
          "diff": {
            "type": "string",
            "title": "Diff contains the JSON patch between target and live resource\nDeprecated: use NormalizedLiveState and PredictedLiveState to render the difference"
          },
          "hook": {
            "type": "boolean"
          },
          "normalizedLiveState": {
            "type": "string",
            "title": "NormalizedLiveState contains JSON serialized live resource state with applied normalizations"
          },
          "predictedLiveState": {
            "type": "string",
            "title": "PredictedLiveState contains JSON serialized resource state that is calculated based on normalized and target resource state"
          },
          "resourceVersion": {
            "type": "string"
          },
          "modified": {
            "type": "boolean"
          }
        },
        "title": "ResourceDiff holds the diff of a live and target resource object\nTODO: describe members of this type"
      },
      "applicationsResourceIgnoreDifferences": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "jsonPointers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "jqPathExpressions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "managedFieldsManagers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the\ndesired state defined in the SCM and won't be displayed in diffs"
          }
        },
        "description": "ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state."
      },
      "applicationsResourceNetworkingInfo": {
        "type": "object",
        "properties": {
          "targetLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "targetRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceRef"
            }
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ingress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1LoadBalancerIngress"
            }
          },
          "externalURLs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ExternalURLs holds list of URLs which should be available externally. List is populated for ingress resources using rules hostnames."
          }
        },
        "title": "ResourceNetworkingInfo holds networking resource related information\nTODO: describe members of this type"
      },
      "applicationsResourceNode": {
        "type": "object",
        "properties": {
          "resourceRef": {
            "$ref": "#/components/schemas/applicationsResourceRef"
          },
          "parentRefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceRef"
            }
          },
          "info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsInfoItem"
            }
          },
          "networkingInfo": {
            "$ref": "#/components/schemas/applicationsResourceNetworkingInfo"
          },
          "resourceVersion": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "health": {
            "$ref": "#/components/schemas/applicationsHealthStatus"
          },
          "createdAt": {
            "$ref": "#/components/schemas/v1Time"
          }
        },
        "title": "ResourceNode contains information about live resource and its children\nTODO: describe members of this type"
      },
      "applicationsResourceRef": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "title": "ResourceRef includes fields which uniquely identify a resource"
      },
      "applicationsResourceResult": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "title": "Group specifies the API group of the resource"
          },
          "version": {
            "type": "string",
            "title": "Version specifies the API version of the resource"
          },
          "kind": {
            "type": "string",
            "title": "Kind specifies the API kind of the resource"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace specifies the target namespace of the resource"
          },
          "name": {
            "type": "string",
            "title": "Name specifies the name of the resource"
          },
          "status": {
            "type": "string",
            "title": "Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks"
          },
          "message": {
            "type": "string",
            "title": "Message contains an informational or error message for the last sync OR operation"
          },
          "hookType": {
            "type": "string",
            "title": "HookType specifies the type of the hook. Empty for non-hook resources"
          },
          "hookPhase": {
            "type": "string",
            "description": "HookPhase contains the state of any operation associated with this resource OR hook\nThis can also contain values for non-hook resources."
          },
          "syncPhase": {
            "type": "string",
            "title": "SyncPhase indicates the particular phase of the sync that this result was acquired in"
          }
        },
        "title": "ResourceResult holds the operation result details of a specific resource"
      },
      "applicationsResourceStatus": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "health": {
            "$ref": "#/components/schemas/applicationsHealthStatus"
          },
          "hook": {
            "type": "boolean"
          },
          "requiresPruning": {
            "type": "boolean"
          }
        },
        "title": "ResourceStatus holds the current sync and health status of a resource\nTODO: describe members of this type"
      },
      "applicationsResourcesQuery": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "applicationsRetryStrategy": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "string",
            "format": "int64",
            "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed."
          },
          "backoff": {
            "$ref": "#/components/schemas/applicationsBackoff"
          }
        },
        "title": "RetryStrategy contains information about the strategy to apply when a sync failed"
      },
      "applicationsRevisionHistory": {
        "type": "object",
        "properties": {
          "revision": {
            "type": "string",
            "title": "Revision holds the revision the sync was performed against"
          },
          "deployedAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "id": {
            "type": "string",
            "format": "int64",
            "title": "ID is an auto incrementing identifier of the RevisionHistory"
          },
          "source": {
            "$ref": "#/components/schemas/applicationsApplicationSource"
          },
          "deployStartedAt": {
            "$ref": "#/components/schemas/v1Time"
          }
        },
        "title": "RevisionHistory contains history information about a previous sync"
      },
      "applicationsRevisionMetadataQuery": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "the application's name"
          },
          "revision": {
            "type": "string",
            "title": "the revision of the app"
          }
        }
      },
      "applicationsSyncOperation": {
        "type": "object",
        "properties": {
          "revision": {
            "type": "string",
            "description": "Revision is the revision (Git) or chart version (Helm) which to sync the application to\nIf omitted, will use the revision specified in app spec."
          },
          "prune": {
            "type": "boolean",
            "title": "Prune specifies to delete resources from the cluster that are no longer tracked in git"
          },
          "dryRun": {
            "type": "boolean",
            "title": "DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync"
          },
          "syncStrategy": {
            "$ref": "#/components/schemas/applicationsSyncStrategy"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsSyncOperationResource"
            },
            "title": "Resources describes which resources shall be part of the sync"
          },
          "source": {
            "$ref": "#/components/schemas/applicationsApplicationSource"
          },
          "manifests": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Manifests is an field that overrides sync source with a local directory for development"
          },
          "syncOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "SyncOptions provide per-sync sync-options, e.g. Validate=false"
          }
        },
        "description": "SyncOperation contains details about a sync operation."
      },
      "applicationsSyncOperationResource": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        },
        "description": "SyncOperationResource contains resources to sync."
      },
      "applicationsSyncOperationResult": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsResourceResult"
            },
            "title": "Resources contains a list of sync result items for each individual resource in a sync operation"
          },
          "revision": {
            "type": "string",
            "title": "Revision holds the revision this sync operation was performed to"
          },
          "source": {
            "$ref": "#/components/schemas/applicationsApplicationSource"
          }
        },
        "title": "SyncOperationResult represent result of sync operation"
      },
      "applicationsSyncOptions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "applicationsSyncPolicy": {
        "type": "object",
        "properties": {
          "automated": {
            "$ref": "#/components/schemas/applicationsSyncPolicyAutomated"
          },
          "syncOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Options allow you to specify whole app sync-options"
          },
          "retry": {
            "$ref": "#/components/schemas/applicationsRetryStrategy"
          }
        },
        "title": "SyncPolicy controls when a sync will be performed in response to updates in git"
      },
      "applicationsSyncPolicyAutomated": {
        "type": "object",
        "properties": {
          "prune": {
            "type": "boolean",
            "title": "Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)"
          },
          "selfHeal": {
            "type": "boolean",
            "title": "SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)"
          },
          "allowEmpty": {
            "type": "boolean",
            "title": "AllowEmpty allows apps have zero live resources (default: false)"
          }
        },
        "title": "SyncPolicyAutomated controls the behavior of an automated sync"
      },
      "applicationsSyncStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "title": "Status is the sync state of the comparison"
          },
          "comparedTo": {
            "$ref": "#/components/schemas/applicationsComparedTo"
          },
          "revision": {
            "type": "string",
            "title": "Revision contains information about the revision the comparison has been performed to"
          }
        },
        "title": "SyncStatus contains information about the currently observed live and desired states of an application"
      },
      "applicationsSyncStrategy": {
        "type": "object",
        "properties": {
          "apply": {
            "$ref": "#/components/schemas/applicationsSyncStrategyApply"
          },
          "hook": {
            "$ref": "#/components/schemas/applicationsSyncStrategyHook"
          }
        },
        "title": "SyncStrategy controls the manner in which a sync is performed"
      },
      "applicationsSyncStrategyApply": {
        "type": "object",
        "properties": {
          "force": {
            "type": "boolean",
            "description": "Force indicates whether or not to supply the --force flag to `kubectl apply`.\nThe --force flag deletes and re-create the resource, when PATCH encounters conflict and has\nretried for 5 times."
          }
        },
        "title": "SyncStrategyApply uses `kubectl apply` to perform the apply"
      },
      "applicationsSyncStrategyHook": {
        "type": "object",
        "properties": {
          "syncStrategyApply": {
            "$ref": "#/components/schemas/applicationsSyncStrategyApply"
          }
        },
        "description": "SyncStrategyHook will perform a sync using hooks annotations.\nIf no hook annotation is specified falls back to `kubectl apply`."
      },
      "applicationv1alpha1RepositoryCertificate": {
        "type": "object",
        "properties": {
          "serverName": {
            "type": "string",
            "title": "ServerName specifies the DNS name of the server this certificate is intended for"
          },
          "certType": {
            "type": "string",
            "title": "CertType specifies the type of the certificate - currently one of \"https\" or \"ssh\""
          },
          "certSubType": {
            "type": "string",
            "title": "CertSubType specifies the sub type of the cert, i.e. \"ssh-rsa\""
          },
          "certData": {
            "type": "string",
            "format": "byte",
            "title": "CertData contains the actual certificate data, dependent on the certificate type"
          },
          "certInfo": {
            "type": "string",
            "title": "CertInfo will hold additional certificate info, depdendent on the certificate type (e.g. SSH fingerprint, X509 CommonName)"
          }
        },
        "title": "A RepositoryCertificate is either SSH known hosts entry or TLS certificate"
      },
      "applicationv1alpha1RepositoryCertificateList": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ListMeta"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationv1alpha1RepositoryCertificate"
            },
            "title": "List of certificates to be processed"
          }
        },
        "title": "RepositoryCertificateList is a collection of RepositoryCertificates"
      },
      "appprojectsAppProject": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ObjectMeta"
          },
          "spec": {
            "$ref": "#/components/schemas/appprojectsAppProjectSpec"
          },
          "status": {
            "$ref": "#/components/schemas/appprojectsAppProjectStatus"
          }
        },
        "title": "AppProject provides a logical grouping of applications, providing controls for:\n* where the apps may deploy to (cluster whitelist)\n* what may be deployed (repository whitelist, resource whitelist/blacklist)\n* who can access these applications (roles, OIDC group claims bindings)\n* and what they can do (RBAC policies)\n* automation access to these roles (JWT tokens)\n+genclient\n+genclient:noStatus\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n+kubebuilder:resource:path=appprojects,shortName=appproj;appprojs"
      },
      "appprojectsAppProjectList": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ListMeta"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appprojectsAppProject"
            }
          }
        },
        "title": "AppProjectList is list of AppProject resources\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object"
      },
      "appprojectsAppProjectSpec": {
        "type": "object",
        "properties": {
          "sourceRepos": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "SourceRepos contains list of repository URLs which can be used for deployment"
          },
          "destinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appprojectsApplicationDestination"
            },
            "title": "Destinations contains list of destinations available for deployment"
          },
          "description": {
            "type": "string",
            "title": "Description contains optional project description"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appprojectsProjectRole"
            },
            "title": "Roles are user defined RBAC roles associated with this project"
          },
          "clusterResourceWhitelist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1GroupKind"
            },
            "title": "ClusterResourceWhitelist contains list of whitelisted cluster level resources"
          },
          "namespaceResourceBlacklist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1GroupKind"
            },
            "title": "NamespaceResourceBlacklist contains list of blacklisted namespace level resources"
          },
          "orphanedResources": {
            "$ref": "#/components/schemas/appprojectsOrphanedResourcesMonitorSettings"
          },
          "syncWindows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appprojectsSyncWindow"
            },
            "title": "SyncWindows controls when syncs can be run for apps in this project"
          },
          "namespaceResourceWhitelist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1GroupKind"
            },
            "title": "NamespaceResourceWhitelist contains list of whitelisted namespace level resources"
          },
          "signatureKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appprojectsSignatureKey"
            },
            "title": "SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync"
          },
          "clusterResourceBlacklist": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1GroupKind"
            },
            "title": "ClusterResourceBlacklist contains list of blacklisted cluster level resources"
          }
        },
        "title": "AppProjectSpec is the specification of an AppProject"
      },
      "appprojectsAppProjectStatus": {
        "type": "object",
        "properties": {
          "jwtTokensByRole": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/appprojectsJWTTokens"
            },
            "title": "JWTTokensByRole contains a list of JWT tokens issued for a given role"
          }
        },
        "title": "AppProjectStatus contains status information for AppProject CRs"
      },
      "appprojectsApplicationDestination": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "title": "Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace specifies the target namespace for the application's resources.\nThe namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace"
          },
          "name": {
            "type": "string",
            "title": "Name is an alternate way of specifying the target cluster by its symbolic name"
          }
        },
        "title": "ApplicationDestination holds information about the application's destination"
      },
      "appprojectsJWTToken": {
        "type": "object",
        "properties": {
          "iat": {
            "type": "string",
            "format": "int64"
          },
          "exp": {
            "type": "string",
            "format": "int64"
          },
          "id": {
            "type": "string"
          }
        },
        "title": "JWTToken holds the issuedAt and expiresAt values of a token"
      },
      "appprojectsJWTTokens": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appprojectsJWTToken"
            }
          }
        },
        "title": "JWTTokens represents a list of JWT tokens"
      },
      "appprojectsOrphanedResourceKey": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "title": "OrphanedResourceKey is a reference to a resource to be ignored from"
      },
      "appprojectsOrphanedResourcesMonitorSettings": {
        "type": "object",
        "properties": {
          "warn": {
            "type": "boolean",
            "title": "Warn indicates if warning condition should be created for apps which have orphaned resources"
          },
          "ignore": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appprojectsOrphanedResourceKey"
            },
            "title": "Ignore contains a list of resources that are to be excluded from orphaned resources monitoring"
          }
        },
        "title": "OrphanedResourcesMonitorSettings holds settings of orphaned resources monitoring"
      },
      "appprojectsProjectRole": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name is a name for this role"
          },
          "description": {
            "type": "string",
            "title": "Description is a description of the role"
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Policies Stores a list of casbin formatted strings that define access policies for the role in the project"
          },
          "jwtTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/appprojectsJWTToken"
            },
            "title": "JWTTokens are a list of generated JWT tokens bound to this role"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Groups are a list of OIDC group claims bound to this role"
          }
        },
        "title": "ProjectRole represents a role that has access to a project"
      },
      "appprojectsSignatureKey": {
        "type": "object",
        "properties": {
          "keyID": {
            "type": "string",
            "title": "The ID of the key in hexadecimal notation"
          }
        },
        "title": "SignatureKey is the specification of a key required to verify commit signatures with"
      },
      "appprojectsSyncWindow": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "title": "Kind defines if the window allows or blocks syncs"
          },
          "schedule": {
            "type": "string",
            "title": "Schedule is the time the window will begin, specified in cron format"
          },
          "duration": {
            "type": "string",
            "title": "Duration is the amount of time the sync window will be open"
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Applications contains a list of applications that the window will apply to"
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Namespaces contains a list of namespaces that the window will apply to"
          },
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Clusters contains a list of clusters that the window will apply to"
          },
          "manualSync": {
            "type": "boolean",
            "title": "ManualSync enables manual syncs when they would otherwise be blocked"
          },
          "timeZone": {
            "type": "string",
            "title": "TimeZone of the sync that will be applied to the schedule"
          }
        },
        "title": "SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps"
      },
      "certificateRepositoryCertificateCreateRequest": {
        "type": "object",
        "properties": {
          "certificates": {
            "$ref": "#/components/schemas/applicationv1alpha1RepositoryCertificateList"
          },
          "upsert": {
            "type": "boolean",
            "title": "Whether to upsert already existing certificates"
          }
        },
        "title": "Request to create a set of certificates"
      },
      "certificateRepositoryCertificateQuery": {
        "type": "object",
        "properties": {
          "hostNamePattern": {
            "type": "string",
            "title": "A file-glob pattern (not regular expression) the host name has to match"
          },
          "certType": {
            "type": "string",
            "title": "The type of the certificate to match (ssh or https)"
          },
          "certSubType": {
            "type": "string",
            "title": "The sub type of the certificate to match (protocol dependent, usually only used for ssh certs)"
          }
        },
        "title": "Message to query the server for configured repository certificates"
      },
      "certificatesRepositoryCertificate": {
        "type": "object",
        "properties": {
          "serverName": {
            "type": "string",
            "title": "ServerName specifies the DNS name of the server this certificate is intended for"
          },
          "certType": {
            "type": "string",
            "title": "CertType specifies the type of the certificate - currently one of \"https\" or \"ssh\""
          },
          "certSubType": {
            "type": "string",
            "title": "CertSubType specifies the sub type of the cert, i.e. \"ssh-rsa\""
          },
          "certData": {
            "type": "string",
            "format": "byte",
            "title": "CertData contains the actual certificate data, dependent on the certificate type"
          },
          "certInfo": {
            "type": "string",
            "title": "CertInfo will hold additional certificate info, depdendent on the certificate type (e.g. SSH fingerprint, X509 CommonName)"
          }
        },
        "title": "A RepositoryCertificate is either SSH known hosts entry or TLS certificate"
      },
      "certificatesRepositoryCertificateList": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ListMeta"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/certificatesRepositoryCertificate"
            },
            "title": "List of certificates to be processed"
          }
        },
        "title": "RepositoryCertificateList is a collection of RepositoryCertificates"
      },
      "clustersAWSAuthConfig": {
        "type": "object",
        "properties": {
          "clusterName": {
            "type": "string",
            "title": "ClusterName contains AWS cluster name"
          },
          "roleARN": {
            "type": "string",
            "description": "RoleARN contains optional role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain."
          }
        },
        "title": "AWSAuthConfig is an AWS IAM authentication configuration"
      },
      "clustersCluster": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "title": "Server is the API server URL of the Kubernetes cluster"
          },
          "name": {
            "type": "string",
            "title": "Name of the cluster. If omitted, will use the server address"
          },
          "config": {
            "$ref": "#/components/schemas/clustersClusterConfig"
          },
          "connectionState": {
            "$ref": "#/components/schemas/commonsConnectionState"
          },
          "serverVersion": {
            "type": "string",
            "title": "DEPRECATED: use Info.ServerVersion field instead.\nThe server version"
          },
          "namespaces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Holds list of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty."
          },
          "refreshRequestedAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "info": {
            "$ref": "#/components/schemas/clustersClusterInfo"
          },
          "shard": {
            "type": "string",
            "format": "int64",
            "description": "Shard contains optional shard number. Calculated on the fly by the application controller if not specified."
          },
          "clusterResources": {
            "type": "boolean",
            "description": "Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode."
          },
          "project": {
            "type": "string",
            "title": "Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "Labels for cluster secret metadata"
          },
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "Annotations for cluster secret metadata"
          }
        },
        "title": "Cluster is the definition of a cluster resource"
      },
      "clustersClusterCacheInfo": {
        "type": "object",
        "properties": {
          "resourcesCount": {
            "type": "string",
            "format": "int64",
            "title": "ResourcesCount holds number of observed Kubernetes resources"
          },
          "apisCount": {
            "type": "string",
            "format": "int64",
            "title": "APIsCount holds number of observed Kubernetes API count"
          },
          "lastCacheSyncTime": {
            "$ref": "#/components/schemas/v1Time"
          }
        },
        "title": "ClusterCacheInfo contains information about the cluster cache"
      },
      "clustersClusterConfig": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "title": "Server requires Basic authentication"
          },
          "password": {
            "type": "string"
          },
          "bearerToken": {
            "type": "string",
            "description": "Server requires Bearer authentication. This client will not attempt to use\nrefresh tokens for an OAuth2 flow.\nTODO: demonstrate an OAuth2 compatible client."
          },
          "tlsClientConfig": {
            "$ref": "#/components/schemas/clustersTLSClientConfig"
          },
          "awsAuthConfig": {
            "$ref": "#/components/schemas/clustersAWSAuthConfig"
          },
          "execProviderConfig": {
            "$ref": "#/components/schemas/clustersExecProviderConfig"
          },
          "clusterConnectionType": {
            "type": "string",
            "title": "Identifies the authentication method used to connect to the cluster"
          }
        },
        "description": "ClusterConfig is the configuration attributes. This structure is subset of the go-client\nrest.Config with annotations added for marshalling."
      },
      "clustersClusterCreateRequest": {
        "type": "object",
        "properties": {
          "cluster": {
            "$ref": "#/components/schemas/clustersCluster"
          },
          "upsert": {
            "type": "boolean"
          }
        }
      },
      "clustersClusterID": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "title": "type is the type of the specified cluster identifier ( \"server\" - default, \"name\" )"
          },
          "value": {
            "type": "string",
            "title": "value holds the cluster server URL or cluster name"
          }
        },
        "title": "ClusterID holds a cluster server URL or cluster name"
      },
      "clustersClusterInfo": {
        "type": "object",
        "properties": {
          "connectionState": {
            "$ref": "#/components/schemas/commonsConnectionState"
          },
          "serverVersion": {
            "type": "string",
            "title": "ServerVersion contains information about the Kubernetes version of the cluster"
          },
          "cacheInfo": {
            "$ref": "#/components/schemas/clustersClusterCacheInfo"
          },
          "applicationsCount": {
            "type": "string",
            "format": "int64",
            "title": "ApplicationsCount is the number of applications managed by Argo CD on the cluster"
          },
          "apiVersions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "APIVersions contains list of API versions supported by the cluster"
          }
        },
        "title": "ClusterInfo contains information about the cluster"
      },
      "clustersClusterList": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ListMeta"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clustersCluster"
            }
          }
        },
        "description": "ClusterList is a collection of Clusters."
      },
      "clustersClusterQuery": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/clustersClusterID"
          },
          "project": {
            "type": "string"
          }
        },
        "title": "ClusterQuery is a query for cluster resources"
      },
      "clustersClusterResponse": {
        "type": "object"
      },
      "clustersClusterUpdateRequest": {
        "type": "object",
        "properties": {
          "cluster": {
            "$ref": "#/components/schemas/clustersCluster"
          },
          "updatedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "updateMask": {
            "$ref": "#/components/schemas/protobufFieldMask"
          },
          "id": {
            "$ref": "#/components/schemas/clustersClusterID"
          }
        }
      },
      "clustersExecProviderConfig": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "title": "Command to execute"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Arguments to pass to the command when executing it"
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "Env defines additional environment variables to expose to the process"
          },
          "apiVersion": {
            "type": "string",
            "title": "Preferred input version of the ExecInfo"
          },
          "installHint": {
            "type": "string",
            "title": "This text is shown to the user when the executable doesn't seem to be present"
          }
        },
        "title": "ExecProviderConfig is config used to call an external command to perform cluster authentication\nSee: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig"
      },
      "clustersTLSClientConfig": {
        "type": "object",
        "properties": {
          "insecure": {
            "type": "boolean",
            "description": "Insecure specifies that the server should be accessed without verifying the TLS certificate. For testing only."
          },
          "serverName": {
            "type": "string",
            "description": "ServerName is passed to the server for SNI and is used in the client to check server\ncertificates against. If ServerName is empty, the hostname used to contact the\nserver is used."
          },
          "certData": {
            "type": "string",
            "format": "byte",
            "title": "CertData holds PEM-encoded bytes (typically read from a client certificate file).\nCertData takes precedence over CertFile"
          },
          "keyData": {
            "type": "string",
            "format": "byte",
            "title": "KeyData holds PEM-encoded bytes (typically read from a client certificate key file).\nKeyData takes precedence over KeyFile"
          },
          "caData": {
            "type": "string",
            "format": "byte",
            "title": "CAData holds PEM-encoded bytes (typically read from a root certificates bundle).\nCAData takes precedence over CAFile"
          }
        },
        "title": "TLSClientConfig contains settings to enable transport layer security"
      },
      "commonsConnectionState": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "title": "Status contains the current status indicator for the connection"
          },
          "message": {
            "type": "string",
            "title": "Message contains human readable information about the connection status"
          },
          "attemptedAt": {
            "$ref": "#/components/schemas/v1Time"
          }
        },
        "title": "ConnectionState contains information about remote resource connection state, currently used for clusters and repositories"
      },
      "gatewayruntimeError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/protobufAny"
            }
          }
        }
      },
      "gpgkeysGnuPGPublicKey": {
        "type": "object",
        "properties": {
          "keyID": {
            "type": "string",
            "title": "KeyID specifies the key ID, in hexadecimal string format"
          },
          "fingerprint": {
            "type": "string",
            "title": "Fingerprint is the fingerprint of the key"
          },
          "owner": {
            "type": "string",
            "title": "Owner holds the owner identification, e.g. a name and e-mail address"
          },
          "trust": {
            "type": "string",
            "title": "Trust holds the level of trust assigned to this key"
          },
          "subType": {
            "type": "string",
            "title": "SubType holds the key's sub type (e.g. rsa4096)"
          },
          "keyData": {
            "type": "string",
            "title": "KeyData holds the raw key data, in base64 encoded format"
          }
        },
        "title": "GnuPGPublicKey is a representation of a GnuPG public key"
      },
      "gpgkeysGnuPGPublicKeyCreateRequest": {
        "type": "object",
        "properties": {
          "publickey": {
            "$ref": "#/components/schemas/gpgkeysGnuPGPublicKey"
          },
          "upsert": {
            "type": "boolean",
            "title": "Whether to upsert already existing public keys"
          }
        },
        "title": "Request to create one or more public keys on the server"
      },
      "gpgkeysGnuPGPublicKeyCreateResponse": {
        "type": "object",
        "properties": {
          "created": {
            "$ref": "#/components/schemas/gpgkeysGnuPGPublicKeyList"
          },
          "skipped": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of key IDs that haven been skipped because they already exist on the server"
          }
        },
        "title": "Response to a public key creation request"
      },
      "gpgkeysGnuPGPublicKeyList": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ListMeta"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/gpgkeysGnuPGPublicKey"
            }
          }
        },
        "title": "GnuPGPublicKeyList is a collection of GnuPGPublicKey objects"
      },
      "gpgkeysGnuPGPublicKeyQuery": {
        "type": "object",
        "properties": {
          "keyID": {
            "type": "string",
            "title": "The GPG key ID to query for"
          }
        },
        "title": "Message to query the server for configured GPG public keys"
      },
      "gpgkeysGnuPGPublicKeyResponse": {
        "type": "object",
        "title": "Generic (empty) response for GPG public key CRUD requests"
      },
      "hrepocredsRepoCreds": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "title": "URL is the URL that this credentials matches to"
          },
          "username": {
            "type": "string",
            "title": "Username for authenticating at the repo server"
          },
          "password": {
            "type": "string",
            "title": "Password for authenticating at the repo server"
          },
          "sshPrivateKey": {
            "type": "string",
            "title": "SSHPrivateKey contains the private key data for authenticating at the repo server using SSH (only Git repos)"
          },
          "tlsClientCertData": {
            "type": "string",
            "title": "TLSClientCertData specifies the TLS client cert data for authenticating at the repo server"
          },
          "tlsClientCertKey": {
            "type": "string",
            "title": "TLSClientCertKey specifies the TLS client cert key for authenticating at the repo server"
          },
          "githubAppPrivateKey": {
            "type": "string",
            "title": "GithubAppPrivateKey specifies the private key PEM data for authentication via GitHub app"
          },
          "githubAppID": {
            "type": "string",
            "format": "int64",
            "title": "GithubAppId specifies the Github App ID of the app used to access the repo for GitHub app authentication"
          },
          "githubAppInstallationID": {
            "type": "string",
            "format": "int64",
            "title": "GithubAppInstallationId specifies the ID of the installed GitHub App for GitHub app authentication"
          },
          "githubAppEnterpriseBaseUrl": {
            "type": "string",
            "title": "GithubAppEnterpriseBaseURL specifies the GitHub API URL for GitHub app authentication. If empty will default to https://api.github.com"
          },
          "enableOCI": {
            "type": "boolean",
            "title": "EnableOCI specifies whether helm-oci support should be enabled for this repo"
          },
          "type": {
            "type": "string",
            "description": "Type specifies the type of the repoCreds. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent."
          }
        },
        "title": "RepoCreds holds the definition for repository credentials"
      },
      "hrepocredsRepoCredsCreateRequest": {
        "type": "object",
        "properties": {
          "creds": {
            "$ref": "#/components/schemas/hrepocredsRepoCreds"
          },
          "upsert": {
            "type": "boolean",
            "title": "Whether to create in upsert mode"
          }
        },
        "title": "RepoCreateRequest is a request for creating repository credentials config"
      },
      "hrepocredsRepoCredsQuery": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "title": "Repo URL for query"
          },
          "repoCredsType": {
            "type": "string",
            "title": "RepoCreds type - git or helm"
          }
        },
        "title": "RepoCredsQuery is a query for RepoCreds resources"
      },
      "hrepocredsRepoCredsResponse": {
        "type": "object",
        "title": "RepoCredsResponse is a response to most repository credentials requests"
      },
      "hrepocredsRepoCredsUpdateRequest": {
        "type": "object",
        "properties": {
          "creds": {
            "$ref": "#/components/schemas/hrepocredsRepoCreds"
          }
        },
        "title": "RepoCredsUpdateRequest is a request for updating existing repository credentials config"
      },
      "projectsEmptyResponse": {
        "type": "object"
      },
      "projectsProjectCreateRequest": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/appprojectsAppProject"
          },
          "upsert": {
            "type": "boolean"
          }
        },
        "description": "ProjectCreateRequest defines project creation parameters."
      },
      "projectsProjectQuery": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "title": "ProjectQuery is a query for Project resources"
      },
      "projectsProjectUpdateRequest": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/appprojectsAppProject"
          }
        }
      },
      "protobufAny": {
        "type": "object",
        "properties": {
          "type_url": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
          },
          "value": {
            "type": "string",
            "format": "byte",
            "description": "Must be a valid serialized protocol buffer of the above specified type."
          }
        },
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
      },
      "protobufFieldMask": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of field mask paths."
          }
        },
        "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, new values will\nbe appended to the existing repeated field in the target resource. Note that\na repeated field is only allowed in the last position of a `paths` string.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then new value will be merged into the existing sub-message\nin the target resource.\n\nFor example, given the target message:\n\n    f {\n      b {\n        d: 1\n        x: 2\n      }\n      c: [1]\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d: 10\n      }\n      c: [2]\n    }\n\nthen if the field mask is:\n\n paths: [\"f.b\", \"f.c\"]\n\nthen the result will be:\n\n    f {\n      b {\n        d: 10\n        x: 2\n      }\n      c: [1, 2]\n    }\n\nAn implementation may provide options to override this default behavior for\nrepeated and message fields.\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is unmappable.",
        "title": "`FieldMask` represents a set of symbolic field paths, for example:"
      },
      "protobufNullValue": {
        "type": "string",
        "enum": [
          "NULL_VALUE"
        ],
        "default": "NULL_VALUE",
        "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
      },
      "reconcilerReconcileCountsResponse": {
        "type": "object",
        "properties": {
          "applicationCount": {
            "type": "integer",
            "format": "int32"
          },
          "clusterCount": {
            "type": "integer",
            "format": "int32"
          },
          "repositoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "repositoryCertificateCount": {
            "type": "integer",
            "format": "int32"
          },
          "gnuPGPublicKeyCount": {
            "type": "integer",
            "format": "int32"
          },
          "repoCredsCount": {
            "type": "integer",
            "format": "int32"
          },
          "applicationPerProjectCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "clusterPerProjectCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "repositoryPerProjectCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "repositoriesAppInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "title": "AppInfo contains application type and app file path"
      },
      "repositoriesDirectoryAppSpec": {
        "type": "object",
        "title": "DirectoryAppSpec contains directory"
      },
      "repositoriesHelmAppSpec": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "valueFiles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsHelmParameter"
            },
            "title": "the output of `helm inspect values`"
          },
          "values": {
            "type": "string",
            "title": "the contents of values.yaml"
          },
          "fileParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsHelmFileParameter"
            },
            "title": "helm file parameters"
          }
        },
        "title": "HelmAppSpec contains helm app name  in source repo"
      },
      "repositoriesHelmChart": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "versions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "repositoriesHelmChartsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/repositoriesHelmChart"
            }
          }
        }
      },
      "repositoriesKsonnetAppSpec": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "environments": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/repositoriesKsonnetEnvironment"
            }
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/applicationsKsonnetParameter"
            }
          }
        },
        "title": "KsonnetAppSpec contains Ksonnet app response\nThis roughly reflects: ksonnet/ksonnet/metadata/app/schema.go"
      },
      "repositoriesKsonnetEnvironment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name is the user defined name of an environment"
          },
          "k8sVersion": {
            "type": "string",
            "description": "KubernetesVersion is the kubernetes version the targeted cluster is running on."
          },
          "destination": {
            "$ref": "#/components/schemas/repositoriesKsonnetEnvironmentDestination"
          }
        }
      },
      "repositoriesKsonnetEnvironmentDestination": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "description": "Server is the Kubernetes server that the cluster is running on."
          },
          "namespace": {
            "type": "string",
            "title": "Namespace is the namespace of the Kubernetes server that targets should be deployed to"
          }
        }
      },
      "repositoriesKustomizeAppSpec": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "images is a list of available images."
          }
        },
        "title": "KustomizeAppSpec contains kustomize images"
      },
      "repositoriesManifestResponse": {
        "type": "object",
        "properties": {
          "manifests": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "namespace": {
            "type": "string"
          },
          "server": {
            "type": "string"
          },
          "revision": {
            "type": "string",
            "title": "resolved revision"
          },
          "sourceType": {
            "type": "string"
          },
          "verifyResult": {
            "type": "string",
            "title": "Raw response of git verify-commit operation (always the empty string for Helm)"
          }
        }
      },
      "repositoriesRefs": {
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "A subset of the repository's named refs"
      },
      "repositoriesRepoAccessQuery": {
        "type": "object",
        "properties": {
          "repo": {
            "type": "string",
            "title": "The URL to the repo"
          },
          "username": {
            "type": "string",
            "title": "Username for accessing repo"
          },
          "password": {
            "type": "string",
            "title": "Password for accessing repo"
          },
          "sshPrivateKey": {
            "type": "string",
            "title": "Private key data for accessing SSH repository"
          },
          "insecure": {
            "type": "boolean",
            "title": "Whether to skip certificate or host key validation"
          },
          "tlsClientCertData": {
            "type": "string",
            "title": "TLS client cert data for accessing HTTPS repository"
          },
          "tlsClientCertKey": {
            "type": "string",
            "title": "TLS client cert key for accessing HTTPS repository"
          },
          "type": {
            "type": "string",
            "title": "The type of the repo"
          },
          "name": {
            "type": "string",
            "title": "The name of the repo"
          },
          "enableOci": {
            "type": "boolean",
            "title": "Whether helm-oci support should be enabled for this repo"
          },
          "githubAppPrivateKey": {
            "type": "string",
            "title": "Github App Private Key PEM data"
          },
          "githubAppID": {
            "type": "string",
            "format": "int64",
            "title": "Github App ID of the app used to access the repo"
          },
          "githubAppInstallationID": {
            "type": "string",
            "format": "int64",
            "title": "Github App Installation ID of the installed GitHub App"
          },
          "githubAppEnterpriseBaseUrl": {
            "type": "string",
            "title": "Github App Enterprise base url if empty will default to https://api.github.com"
          },
          "proxy": {
            "type": "string",
            "title": "HTTP/HTTPS proxy to access the repository"
          },
          "project": {
            "type": "string",
            "title": "Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity"
          }
        },
        "title": "RepoAccessQuery is a query for checking access to a repo"
      },
      "repositoriesRepoAppDetailsQuery": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/applicationsApplicationSource"
          },
          "appName": {
            "type": "string"
          },
          "appProject": {
            "type": "string"
          }
        },
        "title": "RepoAppDetailsQuery contains query information for app details request"
      },
      "repositoriesRepoAppDetailsResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "ksonnet": {
            "$ref": "#/components/schemas/repositoriesKsonnetAppSpec"
          },
          "helm": {
            "$ref": "#/components/schemas/repositoriesHelmAppSpec"
          },
          "kustomize": {
            "$ref": "#/components/schemas/repositoriesKustomizeAppSpec"
          },
          "directory": {
            "$ref": "#/components/schemas/repositoriesDirectoryAppSpec"
          }
        },
        "title": "RepoAppDetailsResponse application details"
      },
      "repositoriesRepoAppsQuery": {
        "type": "object",
        "properties": {
          "repo": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "appProject": {
            "type": "string"
          }
        },
        "title": "RepoAppsQuery is a query for Repository apps"
      },
      "repositoriesRepoAppsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/repositoriesAppInfo"
            }
          }
        },
        "title": "RepoAppsResponse contains applications of specified repository"
      },
      "repositoriesRepoCreateRequest": {
        "type": "object",
        "properties": {
          "repo": {
            "$ref": "#/components/schemas/repositoriesRepository"
          },
          "upsert": {
            "type": "boolean",
            "title": "Whether to create in upsert mode"
          },
          "credsOnly": {
            "type": "boolean",
            "title": "Whether to operate on credential set instead of repository"
          }
        },
        "title": "RepoCreateRequest is a request for creating repository config"
      },
      "repositoriesRepoQuery": {
        "type": "object",
        "properties": {
          "repo": {
            "type": "string",
            "title": "Repo URL for query"
          },
          "forceRefresh": {
            "type": "boolean",
            "title": "Whether to force a cache refresh on repo's connection state"
          },
          "project": {
            "type": "string",
            "title": "The associated project project"
          }
        },
        "title": "RepoQuery is a query for Repository resources"
      },
      "repositoriesRepoResponse": {
        "type": "object"
      },
      "repositoriesRepoUpdateRequest": {
        "type": "object",
        "properties": {
          "repo": {
            "$ref": "#/components/schemas/repositoriesRepository"
          },
          "updateMask": {
            "$ref": "#/components/schemas/protobufFieldMask"
          }
        }
      },
      "repositoriesRepository": {
        "type": "object",
        "properties": {
          "repo": {
            "type": "string",
            "title": "Repo contains the URL to the remote repository"
          },
          "username": {
            "type": "string",
            "title": "Username contains the user name used for authenticating at the remote repository"
          },
          "password": {
            "type": "string",
            "title": "Password contains the password or PAT used for authenticating at the remote repository"
          },
          "sshPrivateKey": {
            "type": "string",
            "description": "SSHPrivateKey contains the PEM data for authenticating at the repo server. Only used with Git repos."
          },
          "connectionState": {
            "$ref": "#/components/schemas/commonsConnectionState"
          },
          "insecureIgnoreHostKey": {
            "type": "boolean",
            "title": "InsecureIgnoreHostKey should not be used anymore, Insecure is favoured\nUsed only for Git repos"
          },
          "insecure": {
            "type": "boolean",
            "title": "Insecure specifies whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys"
          },
          "enableLfs": {
            "type": "boolean",
            "description": "EnableLFS specifies whether git-lfs support should be enabled for this repo. Only valid for Git repositories."
          },
          "tlsClientCertData": {
            "type": "string",
            "title": "TLSClientCertData contains a certificate in PEM format for authenticating at the repo server"
          },
          "tlsClientCertKey": {
            "type": "string",
            "title": "TLSClientCertKey contains a private key in PEM format for authenticating at the repo server"
          },
          "type": {
            "type": "string",
            "description": "Type specifies the type of the repo. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent."
          },
          "name": {
            "type": "string",
            "title": "Name specifies a name to be used for this repo. Only used with Helm repos"
          },
          "inheritedCreds": {
            "type": "boolean",
            "title": "Whether credentials were inherited from a credential set"
          },
          "enableOCI": {
            "type": "boolean",
            "title": "EnableOCI specifies whether helm-oci support should be enabled for this repo"
          },
          "githubAppPrivateKey": {
            "type": "string",
            "title": "Github App Private Key PEM data"
          },
          "githubAppID": {
            "type": "string",
            "format": "int64",
            "title": "GithubAppId specifies the ID of the GitHub app used to access the repo"
          },
          "githubAppInstallationID": {
            "type": "string",
            "format": "int64",
            "title": "GithubAppInstallationId specifies the installation ID of the GitHub App used to access the repo"
          },
          "githubAppEnterpriseBaseUrl": {
            "type": "string",
            "title": "GithubAppEnterpriseBaseURL specifies the base URL of GitHub Enterprise installation. If empty will default to https://api.github.com"
          },
          "proxy": {
            "type": "string",
            "title": "Proxy specifies the HTTP/HTTPS proxy used to access the repo"
          },
          "project": {
            "type": "string",
            "title": "Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity"
          },
          "connectionType": {
            "type": "string",
            "title": "Identifies the authentication method used to connect to the repository"
          }
        },
        "title": "Repository is a repository holding application configurations"
      },
      "repositoriesRepositoryList": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ListMeta"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/repositoriesRepository"
            }
          }
        },
        "description": "RepositoryList is a collection of Repositories."
      },
      "repositoriesRevisionMetadata": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string",
            "title": "who authored this revision,\ntypically their name and email, e.g. \"John Doe <john_doe@my-company.com>\",\nbut might not match this example"
          },
          "date": {
            "$ref": "#/components/schemas/v1Time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Tags specifies any tags currently attached to the revision\nFloating tags can move from one revision to another"
          },
          "message": {
            "type": "string",
            "title": "Message contains the message associated with the revision, most likely the commit message.\nThe message is truncated to the first newline or 64 characters (which ever comes first)"
          },
          "signatureInfo": {
            "type": "string",
            "description": "SignatureInfo contains a hint on the signer if the revision was signed with GPG, and signature verification is enabled."
          }
        },
        "title": "RevisionMetadata contains metadata for a specific revision in a Git repository"
      },
      "runtimeStreamError": {
        "type": "object",
        "properties": {
          "grpc_code": {
            "type": "integer",
            "format": "int32"
          },
          "http_code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "http_status": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/protobufAny"
            }
          }
        }
      },
      "servicev1AppProjectMapping": {
        "type": "object",
        "properties": {
          "appProjMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/servicev1Project"
            }
          }
        }
      },
      "servicev1Application": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "name": {
            "type": "string"
          },
          "clusterIdentifier": {
            "type": "string"
          },
          "repoIdentifier": {
            "type": "string"
          },
          "app": {
            "$ref": "#/components/schemas/applicationsApplication"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "stale": {
            "type": "boolean"
          }
        }
      },
      "servicev1ApplicationDeleteRequestOptions": {
        "type": "object",
        "properties": {
          "removeExistingFinalizers": {
            "type": "boolean"
          }
        }
      },
      "servicev1ApplicationPatchRequest": {
        "type": "object",
        "properties": {
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "request": {
            "$ref": "#/components/schemas/applicationsApplicationPatchRequest"
          }
        }
      },
      "servicev1ApplicationQuery": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "searchTerm": {
            "type": "string"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "type": "object",
            "description": "Filters for Application. Eg. \"app.status.sync.status\": \"Synced\" or \"app.status.sync.status\": { \"$in\": [\"Synced\", \"NotSynced\"]"
          }
        }
      },
      "servicev1Applicationlist": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/servicev1Application"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "servicev1Cluster": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "identifier": {
            "type": "string"
          },
          "cluster": {
            "$ref": "#/components/schemas/clustersCluster"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "stale": {
            "type": "boolean"
          }
        }
      },
      "servicev1ClusterQuery": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "identifier": {
            "type": "string"
          },
          "searchTerm": {
            "type": "string"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "type": "object",
            "description": "Filters for Clusters. Eg. \"identifier\": { \"$in\": [\"id1\", \"id2\"]"
          }
        }
      },
      "servicev1GnuPGPublicKeyList": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1Gnupg"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "servicev1HealthStatus": {
        "type": "string",
        "enum": [
          "HEALTH_STATUS_UNSET",
          "HEALTHY",
          "UNHEALTHY"
        ],
        "default": "HEALTH_STATUS_UNSET"
      },
      "servicev1Project": {
        "type": "object",
        "properties": {
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          }
        }
      },
      "servicev1ReconcilerFilter": {
        "type": "object",
        "properties": {
          "projectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "servicev1Repository": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "identifier": {
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/repositoriesRepository"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "stale": {
            "type": "boolean"
          },
          "repositoryCredentialsId": {
            "type": "string"
          }
        }
      },
      "servicev1RepositoryCertificate": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "cert": {
            "$ref": "#/components/schemas/certificatesRepositoryCertificate"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "servicev1RepositoryCredentials": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "identifier": {
            "type": "string"
          },
          "repoCreds": {
            "$ref": "#/components/schemas/hrepocredsRepoCreds"
          },
          "createdAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "lastModifiedAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "stale": {
            "type": "boolean"
          }
        }
      },
      "servicev1RepositoryCredentialsList": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/servicev1RepositoryCredentials"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "v1Agent": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity.",
            "title": "The ID of the Harness Account that this gitops-agent belongs to"
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity.",
            "title": "The ID of the Harness Project that this gitops-agent belongs to"
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity.",
            "title": "The ID of the Harness Organization that this gitops-agent belongs to"
          },
          "identifier": {
            "type": "string",
            "title": "The gitops-server generated ID for this gitops-agent"
          },
          "name": {
            "type": "string",
            "title": "A human readable name for the gitops-agent"
          },
          "metadata": {
            "$ref": "#/components/schemas/v1AgentMetadata"
          },
          "description": {
            "type": "string",
            "title": "A human readable description for the gitops-agent"
          },
          "type": {
            "$ref": "#/components/schemas/v1AgentType"
          },
          "createdAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "lastModifiedAt": {
            "$ref": "#/components/schemas/v1Time"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "Tags that help organize gitops-agents"
          },
          "health": {
            "$ref": "#/components/schemas/v1AgentHealth"
          },
          "credentials": {
            "$ref": "#/components/schemas/v1AgentCredentials"
          },
          "version": {
            "$ref": "#/components/schemas/v1SemanticVersion"
          },
          "upgradeAvailable": {
            "type": "boolean",
            "title": "Indicates whether this agent has an upgrade available (i.e. the version of this gitops-agent is not the latest released)"
          },
          "scope": {
            "$ref": "#/components/schemas/v1AgentScope"
          }
        },
        "title": "A gitops-agent"
      },
      "v1AgentComponentHealth": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/servicev1HealthStatus"
          },
          "k8sError": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "v1AgentCredentials": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        }
      },
      "v1AgentHealth": {
        "type": "object",
        "properties": {
          "lastHeartbeat": {
            "type": "string",
            "format": "date-time",
            "title": "The last time the agent sent a HeartbeatRequest"
          },
          "argoRepoServer": {
            "$ref": "#/components/schemas/v1AgentComponentHealth"
          },
          "argoAppController": {
            "$ref": "#/components/schemas/v1AgentComponentHealth"
          },
          "argoRedisServer": {
            "$ref": "#/components/schemas/v1AgentComponentHealth"
          },
          "harnessGitopsAgent": {
            "$ref": "#/components/schemas/v1AgentComponentHealth"
          },
          "connectionStatus": {
            "$ref": "#/components/schemas/v1ConnectedStatus"
          }
        }
      },
      "v1AgentList": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1Agent"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "v1AgentMetadata": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "title": "The k8s namespace that this agent resides in"
          },
          "highAvailability": {
            "type": "boolean",
            "title": "Whether or not this deployment should be deployed using deploy-ha.yaml"
          },
          "deployedApplicationCount": {
            "type": "integer",
            "format": "int32",
            "title": "Number of Deployed Applications"
          },
          "existingInstallation": {
            "type": "boolean",
            "title": "If the agent is running in an existing argo installation"
          },
          "mappedProjects": {
            "$ref": "#/components/schemas/servicev1AppProjectMapping"
          }
        }
      },
      "v1AgentScope": {
        "type": "string",
        "enum": [
          "AGENT_SCOPE_UNSET",
          "ACCOUNT",
          "ORG",
          "PROJECT"
        ],
        "default": "AGENT_SCOPE_UNSET"
      },
      "v1AgentType": {
        "type": "string",
        "enum": [
          "AGENT_TYPE_UNSET",
          "CONNECTED_ARGO_PROVIDER",
          "MANAGED_ARGO_PROVIDER"
        ],
        "default": "AGENT_TYPE_UNSET"
      },
      "v1ApplicationStatusCounts": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "healthStatusCounts": {
            "$ref": "#/components/schemas/v1HealthStatusCounts"
          },
          "syncStatusCounts": {
            "$ref": "#/components/schemas/v1SyncStatusCounts"
          }
        }
      },
      "v1ApplicationSyncStatus": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "applicationName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "int64",
            "title": "github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.SyncStatus syncStatus = 6 [(gogoproto.moretags) = \"bson:\\\"syncStatus,omitempty\\\"\"];"
          },
          "lastModifiedAt": {
            "type": "string",
            "format": "int64"
          },
          "operationState": {
            "$ref": "#/components/schemas/applicationsOperationState"
          },
          "reqIdentifier": {
            "type": "string"
          },
          "lastKnownRevisionId": {
            "type": "string",
            "format": "int64"
          },
          "syncedBy": {
            "$ref": "#/components/schemas/v1User"
          }
        }
      },
      "v1ApplicationSyncStatusQuery": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "applicationName": {
            "type": "string"
          },
          "searchTerm": {
            "type": "string"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "endTime": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "type": "integer",
            "format": "int32"
          },
          "operationPhase": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1OperationPhase"
            }
          }
        }
      },
      "v1ApplicationSyncStatuslist": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1ApplicationSyncStatus"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "v1Certificatelist": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/servicev1RepositoryCertificate"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "v1Clusterlist": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/servicev1Cluster"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "v1ConnectedStatus": {
        "type": "string",
        "enum": [
          "CONNECTED_STATUS_UNSET",
          "CONNECTED",
          "DISCONNECTED"
        ],
        "default": "CONNECTED_STATUS_UNSET"
      },
      "v1DashboardOverview": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "applicationStatusCounts": {
            "$ref": "#/components/schemas/v1ApplicationStatusCounts"
          },
          "repositoryCount": {
            "type": "integer",
            "format": "int32"
          },
          "applicationCount": {
            "type": "integer",
            "format": "int32"
          },
          "clusterCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "v1DeploymentsDetails": {
        "type": "object",
        "properties": {
          "startedAt": {
            "type": "string"
          },
          "rollback": {
            "type": "integer",
            "format": "int32"
          },
          "deploy": {
            "type": "integer",
            "format": "int32"
          },
          "redeploy": {
            "type": "integer",
            "format": "int32"
          },
          "succeeded": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "terminating": {
            "type": "integer",
            "format": "int32"
          },
          "failed": {
            "type": "integer",
            "format": "int32"
          },
          "running": {
            "type": "integer",
            "format": "int32"
          },
          "totalDeployments": {
            "type": "integer",
            "format": "int32"
          },
          "failureRate": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "v1Empty": {
        "type": "object"
      },
      "v1EventList": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/v1ListMeta"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apicorev1Event"
            },
            "title": "List of events"
          }
        },
        "description": "EventList is a list of events."
      },
      "v1EventSeries": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "title": "Number of occurrences in this series up to the last heartbeat time"
          },
          "lastObservedTime": {
            "$ref": "#/components/schemas/v1MicroTime"
          }
        },
        "description": "EventSeries contain information on series of events, i.e. thing that was/is happening\ncontinuously for some time."
      },
      "v1EventSource": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "title": "Component from which the event is generated.\n+optional"
          },
          "host": {
            "type": "string",
            "title": "Node name on which the event is generated.\n+optional"
          }
        },
        "description": "EventSource contains information for an event."
      },
      "v1FieldsV1": {
        "type": "object",
        "properties": {
          "Raw": {
            "type": "string",
            "format": "byte",
            "description": "Raw is the underlying serialization of this object."
          }
        },
        "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set,\nor a string representing a sub-field or item. The string will follow one of these four formats:\n'f:<name>', where <name> is the name of a field in a struct, or key in a map\n'v:<value>', where <value> is the exact json formatted value of a list item\n'i:<index>', where <index> is position of a item in a list\n'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values\nIf a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff\n+protobuf.options.(gogoproto.goproto_stringer)=false"
      },
      "v1Gnupg": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "gnuPGPublicKey": {
            "$ref": "#/components/schemas/gpgkeysGnuPGPublicKey"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "v1GroupKind": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          }
        },
        "description": "+protobuf.options.(gogoproto.goproto_stringer)=false",
        "title": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying\nconcepts during lookup stages without having partially valid types"
      },
      "v1HealthStatusCounts": {
        "type": "object",
        "properties": {
          "healthy": {
            "type": "integer",
            "format": "int32"
          },
          "degraded": {
            "type": "integer",
            "format": "int32"
          },
          "progressing": {
            "type": "integer",
            "format": "int32"
          },
          "suspended": {
            "type": "integer",
            "format": "int32"
          },
          "missing": {
            "type": "integer",
            "format": "int32"
          },
          "unknown": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "v1ListMeta": {
        "type": "object",
        "properties": {
          "selfLink": {
            "type": "string",
            "description": "selfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this field in 1.20 release and the field is planned\nto be removed in 1.21 release.\n+optional"
          },
          "resourceVersion": {
            "type": "string",
            "title": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
          },
          "continue": {
            "type": "string",
            "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage."
          },
          "remainingItemCount": {
            "type": "string",
            "format": "int64",
            "title": "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional"
          }
        },
        "description": "ListMeta describes metadata that synthetic resources must have, including lists and\nvarious status objects. A resource may have only one of {ObjectMeta, ListMeta}."
      },
      "v1LoadBalancerIngress": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "title": "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)\n+optional"
          },
          "hostname": {
            "type": "string",
            "title": "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)\n+optional"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1PortStatus"
            },
            "title": "Ports is a list of records of service ports\nIf used, every port defined in the service should have an entry in it\n+listType=atomic\n+optional"
          }
        },
        "description": "LoadBalancerIngress represents the status of a load-balancer ingress point:\ntraffic intended for the service should be sent to an ingress point."
      },
      "v1ManagedFieldsEntry": {
        "type": "object",
        "properties": {
          "manager": {
            "type": "string",
            "description": "Manager is an identifier of the workflow managing these fields."
          },
          "operation": {
            "type": "string",
            "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'."
          },
          "apiVersion": {
            "type": "string",
            "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted."
          },
          "time": {
            "$ref": "#/components/schemas/v1Time"
          },
          "fieldsType": {
            "type": "string",
            "title": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\""
          },
          "fieldsV1": {
            "$ref": "#/components/schemas/v1FieldsV1"
          },
          "subresource": {
            "type": "string",
            "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource."
          }
        },
        "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource\nthat the fieldset applies to."
      },
      "v1MicroTime": {
        "type": "object",
        "properties": {
          "seconds": {
            "type": "string",
            "format": "int64",
            "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
          },
          "nanos": {
            "type": "integer",
            "format": "int32",
            "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context."
          }
        },
        "description": "MicroTime is version of Time with microsecond level precision.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false"
      },
      "v1NodeSystemInfo": {
        "type": "object",
        "properties": {
          "machineID": {
            "type": "string",
            "title": "MachineID reported by the node. For unique machine identification\nin the cluster this field is preferred. Learn more from man(5)\nmachine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html"
          },
          "systemUUID": {
            "type": "string",
            "title": "SystemUUID reported by the node. For unique machine identification\nMachineID is preferred. This field is specific to Red Hat hosts\nhttps://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid"
          },
          "bootID": {
            "type": "string",
            "description": "Boot ID reported by the node."
          },
          "kernelVersion": {
            "type": "string",
            "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
          },
          "osImage": {
            "type": "string",
            "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
          },
          "containerRuntimeVersion": {
            "type": "string",
            "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)."
          },
          "kubeletVersion": {
            "type": "string",
            "description": "Kubelet Version reported by the node."
          },
          "kubeProxyVersion": {
            "type": "string",
            "description": "KubeProxy Version reported by the node."
          },
          "operatingSystem": {
            "type": "string",
            "title": "The Operating System reported by the node"
          },
          "architecture": {
            "type": "string",
            "title": "The Architecture reported by the node"
          }
        },
        "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node."
      },
      "v1ObjectMeta": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
          },
          "generateName": {
            "type": "string",
            "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional"
          },
          "selfLink": {
            "type": "string",
            "description": "SelfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this field in 1.20 release and the field is planned\nto be removed in 1.21 release.\n+optional"
          },
          "uid": {
            "type": "string",
            "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional"
          },
          "resourceVersion": {
            "type": "string",
            "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
          },
          "generation": {
            "type": "string",
            "format": "int64",
            "title": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional"
          },
          "creationTimestamp": {
            "$ref": "#/components/schemas/v1Time"
          },
          "deletionTimestamp": {
            "$ref": "#/components/schemas/v1Time"
          },
          "deletionGracePeriodSeconds": {
            "type": "string",
            "format": "int64",
            "title": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional"
          },
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional"
          },
          "ownerReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1OwnerReference"
            },
            "title": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge"
          },
          "finalizers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge"
          },
          "clusterName": {
            "type": "string",
            "title": "The name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in different clusters.\nThis field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n+optional"
          },
          "managedFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1ManagedFieldsEntry"
            },
            "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional"
          }
        },
        "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create."
      },
      "v1ObjectReference": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "title": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional"
          },
          "name": {
            "type": "string",
            "title": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional"
          },
          "uid": {
            "type": "string",
            "title": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n+optional"
          },
          "apiVersion": {
            "type": "string",
            "title": "API version of the referent.\n+optional"
          },
          "resourceVersion": {
            "type": "string",
            "title": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
          },
          "fieldPath": {
            "type": "string",
            "title": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional"
          }
        },
        "title": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n+structType=atomic"
      },
      "v1OperationPhase": {
        "type": "string",
        "enum": [
          "OPERATION_PHASE_UNSET",
          "RUNNING",
          "FAILED",
          "SUCCEEDED"
        ],
        "default": "OPERATION_PHASE_UNSET"
      },
      "v1OwnerReference": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "API version of the referent."
          },
          "kind": {
            "type": "string",
            "title": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
          },
          "name": {
            "type": "string",
            "title": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names"
          },
          "uid": {
            "type": "string",
            "title": "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids"
          },
          "controller": {
            "type": "boolean",
            "title": "If true, this reference points to the managing controller.\n+optional"
          },
          "blockOwnerDeletion": {
            "type": "boolean",
            "title": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional"
          }
        },
        "title": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.\n+structType=atomic"
      },
      "v1PortStatus": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "format": "int32",
            "title": "Port is the port number of the service port of which status is recorded here"
          },
          "protocol": {
            "type": "string",
            "title": "Protocol is the protocol of the service port of which status is recorded here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\""
          },
          "error": {
            "type": "string",
            "title": "Error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+optional\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n+kubebuilder:validation:MaxLength=316"
          }
        }
      },
      "v1RecentDeploymentQuery": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "operationPhase": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1OperationPhase"
            }
          },
          "applicationName": {
            "type": "string"
          },
          "startTime": {
            "type": "integer",
            "format": "int32"
          },
          "endTime": {
            "type": "integer",
            "format": "int32"
          },
          "searchTerm": {
            "type": "string"
          }
        },
        "description": "mirko RecentDeploymentQuery",
        "title": "RecentDeploymentQuery",
        "required": [
          "orgIdentifier",
          "projecIdentifier"
        ]
      },
      "v1RecentDeploymentsDetailsList": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1DeploymentsDetails"
            }
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "v1RecentlyCreatedCount": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "recentlyCreated": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "v1RecentlyCreatedOverview": {
        "type": "object",
        "properties": {
          "appCounts": {
            "$ref": "#/components/schemas/v1RecentlyCreatedCount"
          },
          "repoCounts": {
            "$ref": "#/components/schemas/v1RecentlyCreatedCount"
          },
          "clusterCounts": {
            "$ref": "#/components/schemas/v1RecentlyCreatedCount"
          }
        }
      },
      "v1RepositoryCredentialsQuery": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "identifier": {
            "type": "string"
          },
          "searchTerm": {
            "type": "string"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "type": "object",
            "description": "Filters for Repo Credentials. Eg. \"identifier\": { \"$in\": [\"id1\", \"id2\"]"
          }
        }
      },
      "v1RepositoryQuery": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "type": "string",
            "description": "Account Identifier for the Entity."
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Project Identifier for the Entity."
          },
          "orgIdentifier": {
            "type": "string",
            "description": "Organization Identifier for the Entity."
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          },
          "identifier": {
            "type": "string"
          },
          "searchTerm": {
            "type": "string"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "type": "object",
            "description": "Filters for Repositories. Eg. \"identifier\": { \"$in\": [\"id1\", \"id2\"]"
          },
          "repoCredsId": {
            "type": "string"
          }
        }
      },
      "v1Repositorylist": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/servicev1Repository"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "pageItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "v1SemanticVersion": {
        "type": "object",
        "properties": {
          "major": {
            "type": "string",
            "format": "int64"
          },
          "minor": {
            "type": "string",
            "format": "int64"
          },
          "patch": {
            "type": "string",
            "format": "int64"
          }
        }
      },
      "v1SyncStatusCounts": {
        "type": "object",
        "properties": {
          "synced": {
            "type": "integer",
            "format": "int32"
          },
          "outOfSync": {
            "type": "integer",
            "format": "int32"
          },
          "unknown": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "v1Time": {
        "type": "object",
        "properties": {
          "seconds": {
            "type": "string",
            "format": "int64",
            "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
          },
          "nanos": {
            "type": "integer",
            "format": "int32",
            "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context."
          }
        },
        "description": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false"
      },
      "v1TopApplicationPhaseStats": {
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string"
          },
          "totalDeployments": {
            "type": "integer",
            "format": "int32"
          },
          "deploymentRate": {
            "type": "integer",
            "format": "int32"
          },
          "succeeded": {
            "type": "integer",
            "format": "int32"
          },
          "failed": {
            "type": "integer",
            "format": "int32"
          },
          "agentIdentifier": {
            "type": "string",
            "description": "Agent identifier for entity."
          }
        }
      },
      "v1TopApplicationPhaseStatsList": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1TopApplicationPhaseStats"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "v1UniqueMessage": {
        "type": "object",
        "properties": {
          "unique": {
            "type": "boolean"
          }
        }
      },
      "v1User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "DashboardDownloadResponse": {
        "properties": {
          "file": {
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "type": "string"
          },
          "responseMessages": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "APIKeyResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CfApiKey"
            }
          }
        },
        "description": "Created"
      },
      "APIKeysResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiKeys"
            }
          }
        },
        "description": "OK"
      },
      "AvailableFlagResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FlagBasicInfos"
            }
          }
        },
        "description": "OK"
      },
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CfError"
            }
          }
        },
        "description": "Bad request"
      },
      "Conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CfError"
            }
          }
        },
        "description": "The specified resource already exists"
      },
      "FeatureEditResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FeatureResponseMetadata"
            }
          }
        },
        "description": "OK"
      },
      "FeatureResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Feature"
            }
          }
        },
        "description": "OK"
      },
      "FeaturesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Features"
            }
          }
        },
        "description": "OK"
      },
      "GitSyncError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CfError"
            }
          }
        },
        "description": "An error with git syncing"
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CfError"
            }
          }
        },
        "description": "Internal server error"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CfError"
            }
          }
        },
        "description": "The specified resource was not found"
      },
      "SegmentFlagsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/SegmentFlag"
              },
              "type": "array"
            }
          }
        },
        "description": "OK"
      },
      "SegmentResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Segment"
            }
          }
        },
        "description": "OK"
      },
      "SegmentsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Segments"
            }
          }
        },
        "description": "OK"
      },
      "TargetDetailResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TargetDetail"
            }
          }
        },
        "description": "OK"
      },
      "TargetResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Target"
            }
          }
        },
        "description": "OK"
      },
      "TargetsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Targets"
            }
          }
        },
        "description": "OK"
      },
      "Unauthenticated": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CfError"
            }
          }
        },
        "description": "Unauthenticated"
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CfError"
            }
          }
        },
        "description": "Unauthorized"
      }
    },
    "parameters": {
      "accountQueryParam": {
        "description": "Account Identifier",
        "examples": {
          "default": {
            "value": "default"
          }
        },
        "in": "query",
        "name": "accountIdentifier",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "archivedQueryParam": {
        "description": "Status of the feature flag",
        "in": "query",
        "name": "archived",
        "schema": {
          "type": "boolean"
        }
      },
      "commitMsgQueryParam": {
        "allowEmptyValue": true,
        "description": "Git commit message",
        "in": "query",
        "name": "commitMsg",
        "schema": {
          "type": "string"
        }
      },
      "environmentOptionalQueryParam": {
        "allowEmptyValue": true,
        "description": "Environment",
        "in": "query",
        "name": "environmentIdentifier",
        "schema": {
          "type": "string"
        }
      },
      "environmentQueryParam": {
        "allowEmptyValue": true,
        "description": "Environment Identifier",
        "in": "query",
        "name": "environmentIdentifier",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "excludedFeaturesOptionalParam": {
        "allowEmptyValue": true,
        "description": "Comma separated identifiers to exclude from the response",
        "in": "query",
        "name": "excludedFeatures",
        "schema": {
          "type": "string"
        }
      },
      "featuresOptionalParam": {
        "description": "Comma separated identifiers for multiple Features",
        "in": "query",
        "name": "featureIdentifiers",
        "schema": {
          "type": "string"
        }
      },
      "flagCounts": {
        "description": "Returns counts for the different types of flags e.g num active, potentially-stale, recently-accessed etc",
        "in": "query",
        "name": "flagCounts",
        "schema": {
          "type": "boolean"
        }
      },
      "flagEnabled": {
        "description": "Filter for flags based on if they are enabled or disabled",
        "in": "query",
        "name": "enabled",
        "schema": {
          "type": "boolean"
        }
      },
      "flagLifetime": {
        "description": "Filter for flags based on their lifetime (permanent/temporary)",
        "in": "query",
        "name": "lifetime",
        "schema": {
          "type": "string"
        }
      },
      "flagNameQueryParam": {
        "description": "Identifier of the feature flag",
        "in": "query",
        "name": "flagNameIdentifier",
        "schema": {
          "type": "string"
        }
      },
      "flagStatus": {
        "description": "Filter for flags based on their status (active,never-requested,recently-accessed,potentially-stale)",
        "in": "query",
        "name": "status",
        "schema": {
          "type": "string"
        }
      },
      "identifier": {
        "description": "Unique identifier for the object in the API.",
        "in": "path",
        "name": "identifier",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "identifierQueryParam": {
        "description": "Identifier of the field",
        "in": "query",
        "name": "identifier",
        "schema": {
          "type": "string"
        }
      },
      "kindQueryParam": {
        "description": "Kind of the feature flag",
        "in": "query",
        "name": "kind",
        "schema": {
          "enum": [
            "json",
            "string",
            "int",
            "boolean"
          ],
          "type": "string"
        }
      },
      "metricsOptionalParam": {
        "description": "Parameter to indicate if metrics data is requested in response",
        "in": "query",
        "name": "metrics",
        "schema": {
          "type": "boolean"
        }
      },
      "nameQueryParam": {
        "allowEmptyValue": true,
        "description": "Name of the field",
        "in": "query",
        "name": "name",
        "schema": {
          "type": "string"
        }
      },
      "orgQueryParam": {
        "description": "Organization Identifier",
        "examples": {
          "default": {
            "value": "default_org"
          }
        },
        "in": "query",
        "name": "orgIdentifier",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "pageNumber": {
        "description": "PageNumber",
        "in": "query",
        "name": "pageNumber",
        "schema": {
          "type": "integer"
        }
      },
      "pageSize": {
        "description": "PageSize",
        "in": "query",
        "name": "pageSize",
        "schema": {
          "type": "integer"
        }
      },
      "projectQueryParam": {
        "description": "The Project identifier",
        "in": "query",
        "name": "projectIdentifier",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "safSortByField": {
        "description": "SortByField",
        "in": "query",
        "name": "sortByField",
        "schema": {
          "enum": [
            "name"
          ],
          "type": "string"
        }
      },
      "safSortOrder": {
        "description": "SortOrder",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "enum": [
            "ASCENDING",
            "DESCENDING"
          ],
          "type": "string"
        }
      },
      "sortByField": {
        "description": "SortByField",
        "in": "query",
        "name": "sortByField",
        "schema": {
          "enum": [
            "name",
            "identifier",
            "archived",
            "kind",
            "modifiedAt"
          ],
          "type": "string"
        }
      },
      "sortOrder": {
        "description": "SortOrder",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "enum": [
            "ASCENDING",
            "DESCENDING"
          ],
          "type": "string"
        }
      },
      "targetFilterOptionalParam": {
        "allowEmptyValue": true,
        "description": "Identifier of the target to filter on",
        "in": "query",
        "name": "targetIdentifierFilter",
        "schema": {
          "type": "string"
        }
      },
      "targetIdentifierQueryParam": {
        "allowEmptyValue": true,
        "description": "Identifier of the target",
        "in": "query",
        "name": "targetIdentifier",
        "schema": {
          "type": "string"
        }
      },
      "targetNameQueryParam": {
        "allowEmptyValue": true,
        "description": "Name of the target",
        "in": "query",
        "name": "targetName",
        "schema": {
          "type": "string"
        }
      },
      "targetOptionalParam": {
        "allowEmptyValue": true,
        "description": "Identifier of a target",
        "in": "query",
        "name": "targetIdentifier",
        "schema": {
          "type": "string"
        }
      },
      "targetSortByField": {
        "allowEmptyValue": true,
        "description": "SortByField",
        "in": "query",
        "name": "sortByField",
        "schema": {
          "enum": [
            "createdAt",
            "name",
            "identifier"
          ],
          "type": "string"
        }
      },
      "targetSortOrder": {
        "allowEmptyValue": true,
        "description": "SortOrder",
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "enum": [
            "ASC",
            "DESC"
          ],
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "APIKeyRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "description": {
                  "example": "This key is for server side production environment",
                  "type": "string"
                },
                "expiredAt": {
                  "type": "integer"
                },
                "identifier": {
                  "example": "production-environment",
                  "type": "string"
                },
                "name": {
                  "example": "production-env-key",
                  "type": "string"
                },
                "type": {
                  "$ref": "#/components/schemas/ApiKeyRequestType"
                }
              },
              "required": [
                "name",
                "identifier",
                "type"
              ],
              "type": "object"
            }
          }
        }
      },
      "APIKeyUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "description": {
                  "example": "This key is for server side production environment",
                  "type": "string"
                },
                "expiredAt": {
                  "type": "integer"
                },
                "name": {
                  "example": "production-env-key",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "FeatureFlagRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "archived": {
                  "type": "boolean"
                },
                "defaultOffVariation": {
                  "type": "string"
                },
                "defaultOnVariation": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "gitDetails": {
                  "$ref": "#/components/schemas/GitDetails"
                },
                "identifier": {
                  "type": "string"
                },
                "kind": {
                  "$ref": "#/components/schemas/FeatureFlagRequestKind"
                },
                "name": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                },
                "permanent": {
                  "type": "boolean"
                },
                "prerequisites": {
                  "items": {
                    "$ref": "#/components/schemas/Prerequisite"
                  },
                  "type": "array"
                },
                "project": {
                  "type": "string"
                },
                "services": {
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  },
                  "type": "array"
                },
                "tags": {
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  },
                  "type": "array"
                },
                "variations": {
                  "items": {
                    "$ref": "#/components/schemas/Variation"
                  },
                  "minItems": 2,
                  "type": "array"
                }
              },
              "required": [
                "name",
                "project",
                "identifier",
                "kind",
                "variations",
                "defaultOnVariation",
                "defaultOffVariation",
                "permanent"
              ],
              "type": "object"
            }
          }
        }
      },
      "FeaturePatchRequest": {
        "content": {
          "application/json": {
            "example": {
              "gitDetails": {
                "commitMsg": "Making some changes"
              },
              "instructions": [
                {
                  "kind": "updateName",
                  "parameters": {
                    "name": "Updated Name"
                  }
                },
                {
                  "kind": "updateDescription",
                  "parameters": {
                    "description": "Updated Description"
                  }
                },
                {
                  "kind": "addPrerequisite",
                  "parameters": {
                    "feature": "feature1",
                    "variations": [
                      "variation1",
                      "variation2"
                    ]
                  }
                },
                {
                  "kind": "updatePrerequisite",
                  "parameters": {
                    "feature": "feature1",
                    "variations": [
                      "variation1"
                    ]
                  }
                },
                {
                  "kind": "removePrerequisite",
                  "parameters": {
                    "feature": "feature1"
                  }
                },
                {
                  "kind": "addVariation",
                  "parameters": {
                    "description": "Variation 1 description",
                    "identifier": "variation_1",
                    "name": "variation1",
                    "value": "v1"
                  }
                },
                {
                  "kind": "updateVariation",
                  "parameters": {
                    "description": "Variation 1 description",
                    "identifier": "variation_1",
                    "name": "variation1",
                    "value": "v1"
                  }
                },
                {
                  "kind": "deleteVariation",
                  "parameters": {
                    "identifier": "variation_1"
                  }
                },
                {
                  "kind": "setDefaultOnVariation",
                  "parameters": {
                    "identifier": "variation_1"
                  }
                },
                {
                  "kind": "setDefaultOffVariation",
                  "parameters": {
                    "identifier": "variation_1"
                  }
                },
                {
                  "kind": "addTag",
                  "parameters": {
                    "name": "TagName",
                    "value": "TagValue"
                  }
                },
                {
                  "kind": "updateTag",
                  "parameters": {
                    "name": "TagName",
                    "value": "TagValue"
                  }
                },
                {
                  "kind": "removeTag",
                  "parameters": {
                    "name": "TagName",
                    "value": "TagValue"
                  }
                },
                {
                  "kind": "setFeatureFlagState",
                  "parameters": {
                    "state": "on"
                  }
                },
                {
                  "kind": "setFeatureFlagState",
                  "parameters": {
                    "state": "off"
                  }
                },
                {
                  "kind": "addTargetsToVariationTargetMap",
                  "parameters": {
                    "targets": [
                      "target1-identifier",
                      "target2-identifier"
                    ],
                    "variation": "variation-identifier"
                  }
                },
                {
                  "kind": "removeTargetsToVariationTargetMap",
                  "parameters": {
                    "targets": [
                      "target1-identifier",
                      "target2-identifier"
                    ],
                    "variation": "variation-identifier"
                  }
                },
                {
                  "kind": "addSegmentToVariationTargetMap",
                  "parameters": {
                    "targetSegments": [
                      "segment1",
                      "segment2"
                    ],
                    "variation": "variation-identifier"
                  }
                },
                {
                  "kind": "removeSegmentToVariationTargetMap",
                  "parameters": {
                    "targetSegments": [
                      "segment3",
                      "segment4"
                    ],
                    "variation": "variation-identifier"
                  }
                },
                {
                  "kind": "clearVariationTargetMapping",
                  "parameters": {
                    "variation": "variation-identifier"
                  }
                },
                {
                  "kind": "addRule",
                  "parameters": {
                    "clauses": [
                      {
                        "attribute": "email",
                        "op": "eq",
                        "values": [
                          "user1@gmail.com",
                          "user2@gmail.com"
                        ]
                      }
                    ],
                    "priority": 1,
                    "serve": {
                      "variation": "variation1"
                    },
                    "uuid": "fd2ebf1f-7efb-4324-a7ee-6de0a47bf826"
                  }
                },
                {
                  "kind": "removeRule",
                  "parameters": {
                    "ruleID": "testRuleID"
                  }
                },
                {
                  "kind": "addClause",
                  "parameters": {
                    "clause": {
                      "attribute": "email",
                      "op": "eq",
                      "values": [
                        "user1@gmail.com",
                        "user2@gmail.com"
                      ]
                    },
                    "ruleID": "testRuleID"
                  }
                },
                {
                  "kind": "removeClause",
                  "parameters": {
                    "clauseID": "testClauseID",
                    "ruleID": "testRuleID"
                  }
                },
                {
                  "kind": "updateClause",
                  "parameters": {
                    "clause": [
                      {
                        "attribute": "email",
                        "op": "eq",
                        "values": [
                          "user1@gmail.com",
                          "user2@gmail.com"
                        ]
                      }
                    ],
                    "clauseID": "testClauseID",
                    "ruleID": "testRuleID"
                  }
                },
                {
                  "kind": "reorderRules",
                  "parameters": {
                    "rules": [
                      "rule1",
                      "rule2",
                      "rule3"
                    ]
                  }
                },
                {
                  "kind": "updateDefaultServe",
                  "parameters": {
                    "bucketBy": "accountID",
                    "variations": [
                      {
                        "variation": "variation1",
                        "weight": 30
                      },
                      {
                        "variation": "variation2",
                        "weight": 60
                      },
                      {
                        "variation": "variation3",
                        "weight": 10
                      }
                    ]
                  }
                },
                {
                  "kind": "updateRule",
                  "parameters": {
                    "ruleID": "testRuleID",
                    "variation": "variation1"
                  }
                },
                {
                  "kind": "updateRule",
                  "parameters": {
                    "bucketBy": "accountID",
                    "ruleID": "testRuleID",
                    "variations": [
                      {
                        "variation": "variation1",
                        "weight": 30
                      },
                      {
                        "variation": "variation2",
                        "weight": 60.66
                      },
                      {
                        "variation": "variation3",
                        "weight": 10.01
                      }
                    ]
                  }
                },
                {
                  "kind": "updateDefaultServe",
                  "parameters": {
                    "variation": "variation1"
                  }
                },
                {
                  "kind": "updateOffVariation",
                  "parameters": {
                    "variation": "variation1"
                  }
                },
                {
                  "Kind": "updateArchived",
                  "parameters": {
                    "archived": true
                  }
                },
                {
                  "Kind": "updatePermanent",
                  "parameters": {
                    "permanent": true
                  }
                }
              ]
            },
            "schema": {
              "$ref": "#/components/schemas/GitSyncPatchOperation"
            }
          }
        }
      },
      "SegmentPatchRequest": {
        "content": {
          "application/json": {
            "example": {
              "instructions": [
                {
                  "kind": "addToIncludeList",
                  "parameters": {
                    "targets": [
                      "target1",
                      "target2"
                    ]
                  }
                },
                {
                  "kind": "removeFromIncludeList",
                  "parameters": {
                    "targets": [
                      "target1",
                      "target2"
                    ]
                  }
                },
                {
                  "kind": "addToExcludeList",
                  "parameters": {
                    "targets": [
                      "target3"
                    ]
                  }
                },
                {
                  "kind": "removeFromExcludeList",
                  "parameters": {
                    "targets": [
                      "target4",
                      "target5"
                    ]
                  }
                },
                {
                  "kind": "addClause",
                  "parameters": {
                    "attribute": "email",
                    "negate": false,
                    "op": "endsWith",
                    "values": [
                      "gmail.com"
                    ]
                  }
                },
                {
                  "kind": "updateClause",
                  "parameters": {
                    "attribute": "email",
                    "clauseID": "test-clause-ID",
                    "op": "equals",
                    "value": [
                      "testuser@testcompany.com"
                    ]
                  }
                },
                {
                  "kind": "removeClause",
                  "parameters": {
                    "clauseID": "test-clause-ID"
                  }
                }
              ]
            },
            "schema": {
              "$ref": "#/components/schemas/GitSyncPatchOperation"
            }
          }
        }
      },
      "SegmentRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "environment": {
                  "type": "string"
                },
                "excluded": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "identifier": {
                  "example": "beta-testers",
                  "type": "string"
                },
                "included": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name of the target segment.",
                  "example": "Beta Testers",
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "rules": {
                  "description": "An array of rules that can cause a user to be included in this segment.",
                  "items": {
                    "$ref": "#/components/schemas/Clause"
                  },
                  "type": "array"
                },
                "tags": {
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name",
                "environment",
                "project"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      },
      "TargetPatchRequest": {
        "content": {
          "application/json": {
            "example": {
              "gitDetails": {
                "commitMsg": "Making some changes"
              },
              "instructions": [
                {
                  "kind": "addToIncludeList",
                  "parameters": {
                    "segments": [
                      "alpha-testers",
                      "beta-testers"
                    ]
                  }
                },
                {
                  "kind": "removeFromIncludeList",
                  "parameters": {
                    "segments": [
                      "alpha-testers",
                      "beta-testers"
                    ]
                  }
                },
                {
                  "kind": "addToExcludeList",
                  "parameters": {
                    "segments": [
                      "alpha-testers",
                      "beta-testers"
                    ]
                  }
                },
                {
                  "kind": "removeFromExcludeList",
                  "parameters": {
                    "segments": [
                      "alpha-testers",
                      "beta-testers"
                    ]
                  }
                },
                {
                  "kind": "addTargetToFlagsVariationTargetMap",
                  "parameters": {
                    "features": [
                      {
                        "identifier": "flag1",
                        "variation": "true"
                      },
                      {
                        "identifier": "flag2",
                        "variation": "false"
                      }
                    ]
                  }
                },
                {
                  "kind": "removeTargetFromFlagsVariationTargetMap",
                  "parameters": {
                    "features": [
                      {
                        "identifier": "flag1",
                        "variation": "true"
                      },
                      {
                        "identifier": "flag2",
                        "variation": "false"
                      }
                    ]
                  }
                }
              ]
            },
            "schema": {
              "$ref": "#/components/schemas/GitSyncPatchOperation"
            }
          }
        }
      },
      "TargetRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Target"
            }
          }
        },
        "required": true
      },
      "v1Agent": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/v1Agent"
            }
          }
        },
        "required": true
      },
      "servicev1ReconcilerFilter": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/servicev1ReconcilerFilter"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}